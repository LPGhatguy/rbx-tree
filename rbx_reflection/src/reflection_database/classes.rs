// This file is automatically @generated.
use crate::reflection_types::*;
use rbx_dom_weak::{RbxValue, RbxValueType};
use std::{borrow::Cow, collections::HashMap};
pub fn generate_classes() -> HashMap<Cow<'static, str>, RbxClassDescriptor> {
    {
        let mut map = HashMap::with_capacity(404);
        map.insert(
            Cow::Borrowed("ABTestService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ABTestService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ABTestService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Accessory"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Accessory"),
                superclass: Some(Cow::Borrowed("Accoutrement")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("AttachmentForward"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, -1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPoint"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPos"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentRight"),
                        RbxValue::Vector3 {
                            value: [1.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentUp"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Accessory"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Accoutrement"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Accoutrement"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("AttachmentForward"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AttachmentForward"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPoint"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AttachmentPoint"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPos"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AttachmentPos"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentRight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AttachmentRight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentUp"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AttachmentUp"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("AttachmentForward"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, -1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPoint"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPos"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentRight"),
                        RbxValue::Vector3 {
                            value: [1.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentUp"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Accoutrement"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AdService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AdService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AdService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AdvancedDragger"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AdvancedDragger"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AdvancedDragger"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AlignOrientation"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AlignOrientation"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("AlignType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AlignType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AlignType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxAngularVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxAngularVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrimaryAxisOnly"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrimaryAxisOnly"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReactionTorqueEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReactionTorqueEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Responsiveness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Responsiveness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RigidityEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RigidityEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(Cow::Borrowed("AlignType"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("MaxAngularVelocity"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxValue::Float32 { value: 10000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AlignOrientation"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrimaryAxisOnly"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("ReactionTorqueEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Responsiveness"),
                        RbxValue::Float32 { value: 10.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RigidityEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AlignPosition"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AlignPosition"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("ApplyAtCenterOfMass"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ApplyAtCenterOfMass"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReactionForceEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReactionForceEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Responsiveness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Responsiveness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RigidityEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RigidityEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(
                        Cow::Borrowed("ApplyAtCenterOfMass"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxValue::Float32 { value: 10000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MaxVelocity"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AlignPosition"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReactionForceEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Responsiveness"),
                        RbxValue::Float32 { value: 10.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RigidityEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AnalysticsSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AnalysticsSettings"),
                superclass: Some(Cow::Borrowed("GenericSettings")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("AnalyticsService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AnalyticsService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AnalyticsService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AngularVelocity"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AngularVelocity"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RelativeTo"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RelativeTo"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorRelativeTo")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("MaxTorque"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AngularVelocity"),
                        },
                    );
                    map.insert(Cow::Borrowed("RelativeTo"), RbxValue::Enum { value: 2 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Animation"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Animation"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("AnimationId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AnimationId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("AnimationId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Animation"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AnimationController"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AnimationController"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AnimationController"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AnimationTrack"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AnimationTrack"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("Animation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Animation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsPlaying"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsPlaying"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Length"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Length"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Looped"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Looped"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Priority"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Priority"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AnimationPriority")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Speed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Speed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TimePosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TimePosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WeightCurrent"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WeightCurrent"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WeightTarget"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WeightTarget"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Animator"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Animator"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Animator"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AppStorageService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AppStorageService"),
                superclass: Some(Cow::Borrowed("LocalStorageService")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ArcHandles"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ArcHandles"),
                superclass: Some(Cow::Borrowed("HandlesBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Axes"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Axes"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Axes")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ArcHandles"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("AssetService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("AssetService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("AssetService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Attachment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Attachment"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("Axis"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Axis"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Orientation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Rotation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SecondaryAxis"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SecondaryAxis"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Visible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Visible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldAxis"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WorldAxis"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldCFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WorldCFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldOrientation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WorldOrientation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WorldPosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldRotation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WorldRotation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldSecondaryAxis"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WorldSecondaryAxis"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("Axis"),
                        RbxValue::Vector3 {
                            value: [1.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Attachment"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SecondaryAxis"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("WorldAxis"),
                        RbxValue::Vector3 {
                            value: [1.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldCFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldOrientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldPosition"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldSecondaryAxis"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Backpack"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Backpack"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Backpack"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BackpackItem"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BackpackItem"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("TextureId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("BadgeService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BadgeService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BadgeService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BallSocketConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BallSocketConstraint"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LimitsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Radius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Radius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Restitution"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TwistLimitsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TwistLimitsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TwistLowerAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TwistLowerAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TwistUpperAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TwistUpperAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UpperAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UpperAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BallSocketConstraint"),
                        },
                    );
                    map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.15 });
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TwistLimitsEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("TwistLowerAngle"),
                        RbxValue::Float32 { value: -45.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TwistUpperAngle"),
                        RbxValue::Float32 { value: 45.0 },
                    );
                    map.insert(
                        Cow::Borrowed("UpperAngle"),
                        RbxValue::Float32 { value: 45.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BasePart"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BasePart"),
                superclass: Some(Cow::Borrowed("PVInstance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(56);
                    map.insert(
                        Cow::Borrowed("Anchored"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Anchored"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackParamA"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackParamB"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackSurfaceInput"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BottomParamA"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BottomParamB"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BottomSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BottomSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BottomSurfaceInput"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BrickColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BrickColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Color")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CanCollide"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CanCollide"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CastShadow"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CastShadow"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CenterOfMass"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CenterOfMass"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CollisionGroupId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CollisionGroups"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CollisionGroups"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Custom,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("Color3uint8")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3uint8"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color3uint8"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3uint8),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Color")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CustomPhysicalProperties"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::PhysicalProperties),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Elasticity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Friction"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Friction"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FrontParamA"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FrontParamB"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FrontSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FrontSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FrontSurfaceInput"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftParamA"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftParamB"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftSurfaceInput"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LocalTransparencyModifier"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Locked"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Locked"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Massless"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Massless"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Material"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Material"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Material")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Orientation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReceiveAge"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReceiveAge"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Reflectance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ResizeIncrement"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ResizeIncrement"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ResizeableFaces"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ResizeableFaces"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Faces")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightParamA"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightParamB"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightSurfaceInput"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RootPriority"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RotVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Rotation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("size")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SpecificGravity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SpecificGravity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TopParamA"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamB"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TopParamB"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TopSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TopSurfaceInput"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Velocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("brickColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("brickColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Color")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Size")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("BasePlayerGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BasePlayerGui"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("BaseScript"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BaseScript"),
                superclass: Some(Cow::Borrowed("LuaSourceContainer")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Disabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Disabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LinkedSource"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LinkedSource"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Beam"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Beam"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(18);
                    map.insert(
                        Cow::Borrowed("Attachment0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attachment0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Attachment1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attachment1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::ColorSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurveSize0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurveSize0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurveSize1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurveSize1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FaceCamera"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FaceCamera"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightEmission"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightEmission"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightInfluence"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Segments"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Segments"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Texture"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextureMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Width0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Width0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Width1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Width1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ZOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ZOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(17);
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("CurveSize0"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("CurveSize1"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("FaceCamera"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("LightEmission"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Beam"),
                        },
                    );
                    map.insert(Cow::Borrowed("Segments"), RbxValue::Float32 { value: 10.0 });
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureLength"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("TextureMode"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TextureSpeed"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Width0"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("Width1"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("ZOffset"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BevelMesh"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BevelMesh"),
                superclass: Some(Cow::Borrowed("DataModelMesh")),
                tags: RbxInstanceTags::DEPRECATED
                    | RbxInstanceTags::NOT_BROWSABLE
                    | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("BillboardGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BillboardGui"),
                superclass: Some(Cow::Borrowed("LayerCollector")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("Active"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Active"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Adornee"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Adornee"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AlwaysOnTop"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClipsDescendants"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExtentsOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExtentsOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExtentsOffsetWorldSpace"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExtentsOffsetWorldSpace"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightInfluence"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlayerToHideFrom"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlayerToHideFrom"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SizeOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SizeOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StudsOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StudsOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StudsOffsetWorldSpace"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StudsOffsetWorldSpace"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(20);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("ExtentsOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExtentsOffsetWorldSpace"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("MaxDistance"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BillboardGui"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlayerToHideFrom"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("ResetOnSpawn"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SizeOffset"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("StudsOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StudsOffsetWorldSpace"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BinaryStringValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BinaryStringValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BindableEvent"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BindableEvent"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Event"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BindableFunction"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BindableFunction"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Function"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BlockMesh"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BlockMesh"),
                superclass: Some(Cow::Borrowed("BevelMesh")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Mesh"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Offset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Scale"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VertexColor"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BloomEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BloomEffect"),
                superclass: Some(Cow::Borrowed("PostEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Intensity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Intensity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Threshold"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Threshold"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Intensity"), RbxValue::Float32 { value: 0.4 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Bloom"),
                        },
                    );
                    map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 24.0 });
                    map.insert(
                        Cow::Borrowed("Threshold"),
                        RbxValue::Float32 { value: 0.95 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BlurEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BlurEffect"),
                superclass: Some(Cow::Borrowed("PostEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Blur"),
                        },
                    );
                    map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 24.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BodyAngularVelocity"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyAngularVelocity"),
                superclass: Some(Cow::Borrowed("BodyMover")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("P"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("P"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("angularvelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("angularvelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("maxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 2.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxValue::Vector3 {
                            value: [4000.0, 4000.0, 4000.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BodyAngularVelocity"),
                        },
                    );
                    map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 1250.0 });
                    map.insert(
                        Cow::Borrowed("angularvelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 2.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxTorque"),
                        RbxValue::Vector3 {
                            value: [4000.0, 4000.0, 4000.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BodyColors"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyColors"),
                superclass: Some(Cow::Borrowed("CharacterAppearance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("HeadColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeadColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeadColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeadColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftArmColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftArmColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftArmColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftArmColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftLegColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftLegColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftLegColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftLegColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightArmColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightArmColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightArmColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightArmColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightLegColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightLegColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightLegColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightLegColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TorsoColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TorsoColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TorsoColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TorsoColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("HeadColor3"),
                        RbxValue::Color3 {
                            value: [0.9921569, 0.9176471, 0.5529412],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftArmColor3"),
                        RbxValue::Color3 {
                            value: [0.9921569, 0.9176471, 0.5529412],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftLegColor3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Body Colors"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightArmColor3"),
                        RbxValue::Color3 {
                            value: [0.9921569, 0.9176471, 0.5529412],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightLegColor3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TorsoColor3"),
                        RbxValue::Color3 {
                            value: [0.15686275, 0.49803925, 0.2784314],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BodyForce"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyForce"),
                superclass: Some(Cow::Borrowed("BodyMover")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Force"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Force"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("force"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("force"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Force"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BodyForce"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("force"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BodyGyro"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyGyro"),
                superclass: Some(Cow::Borrowed("BodyMover")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("D"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("D"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("P"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("P"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("cframe"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("cframe"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("maxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("D"), RbxValue::Float32 { value: 500.0 });
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxValue::Vector3 {
                            value: [400000.0, 0.0, 400000.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BodyGyro"),
                        },
                    );
                    map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 3000.0 });
                    map.insert(
                        Cow::Borrowed("cframe"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxTorque"),
                        RbxValue::Vector3 {
                            value: [400000.0, 0.0, 400000.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BodyMover"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyMover"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("BodyPosition"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyPosition"),
                superclass: Some(Cow::Borrowed("BodyMover")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("D"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("D"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("P"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("P"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("maxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(Cow::Borrowed("D"), RbxValue::Float32 { value: 1250.0 });
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxValue::Vector3 {
                            value: [4000.0, 4000.0, 4000.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BodyPosition"),
                        },
                    );
                    map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 10000.0 });
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 50.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxForce"),
                        RbxValue::Vector3 {
                            value: [4000.0, 4000.0, 4000.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("position"),
                        RbxValue::Vector3 {
                            value: [0.0, 50.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BodyThrust"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyThrust"),
                superclass: Some(Cow::Borrowed("BodyMover")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Force"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Force"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Location"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Location"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("force"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("force"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("location"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("location"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("Force"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Location"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BodyThrust"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("force"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("location"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BodyVelocity"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BodyVelocity"),
                superclass: Some(Cow::Borrowed("BodyMover")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("P"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("P"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Velocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("maxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("velocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("velocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxValue::Vector3 {
                            value: [4000.0, 4000.0, 4000.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BodyVelocity"),
                        },
                    );
                    map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 1250.0 });
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 2.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxForce"),
                        RbxValue::Vector3 {
                            value: [4000.0, 4000.0, 4000.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 2.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BoolValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BoolValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(Cow::Borrowed("Value"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BoxHandleAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BoxHandleAdornment"),
                superclass: Some(Cow::Borrowed("HandleAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("BoxHandleAdornment"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SizeRelativeOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: -1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BrickColorValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BrickColorValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("BrowserService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("BrowserService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("CFrameValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CFrameValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CSGDictionaryService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CSGDictionaryService"),
                superclass: Some(Cow::Borrowed("FlyweightService")),
                tags: RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("CacheableContentProvider"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CacheableContentProvider"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Camera"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Camera"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraSubject"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraSubject"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CameraType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CoordinateFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CoordinateFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("CFrame")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FieldOfView"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FieldOfView"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Focus"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Focus"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeadLocked"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeadLocked"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeadScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeadScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NearPlaneZ"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NearPlaneZ"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ViewportSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ViewportSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("focus"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("focus"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Focus")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [
                                0.0, 20.0, 20.0, 1.0, 0.0, 0.0, 0.0, 0.7071068, 0.7071068, 0.0,
                                -0.7071068, 0.7071068,
                            ],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraSubject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("CameraType"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FieldOfView"),
                        RbxValue::Float32 { value: 70.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Focus"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, -5.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("HeadLocked"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("HeadScale"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Camera"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ChangeHistoryService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ChangeHistoryService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ChangeHistoryService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CharacterAppearance"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CharacterAppearance"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("CharacterMesh"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CharacterMesh"),
                superclass: Some(Cow::Borrowed("CharacterAppearance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("BaseTextureId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BaseTextureId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BodyPart"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BodyPart"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("BodyPart")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MeshId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MeshId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverlayTextureId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OverlayTextureId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("BaseTextureId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("BodyPart"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("MeshId"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CharacterMesh"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverlayTextureId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Chat"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Chat"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("BubbleChatEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BubbleChatEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LoadDefaultChat"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LoadDefaultChat"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("BubbleChatEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("LoadDefaultChat"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Chat"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ChorusSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ChorusSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Depth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Depth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Mix"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Mix"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Rate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("Depth"), RbxValue::Float32 { value: 0.15 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Mix"), RbxValue::Float32 { value: 0.5 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ChorusSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Rate"), RbxValue::Float32 { value: 0.5 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ClickDetector"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ClickDetector"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("CursorIcon"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CursorIcon"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxActivationDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxActivationDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("CursorIcon"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxActivationDistance"),
                        RbxValue::Float32 { value: 32.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ClickDetector"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ClientReplicator"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ClientReplicator"),
                superclass: Some(Cow::Borrowed("NetworkReplicator")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Clothing"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Clothing"),
                superclass: Some(Cow::Borrowed("CharacterAppearance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ClusterPacketCache"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ClusterPacketCache"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("CollectionService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CollectionService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CollectionService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Color3Value"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Color3Value"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ColorCorrectionEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ColorCorrectionEffect"),
                superclass: Some(Cow::Borrowed("PostEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Brightness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Contrast"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Contrast"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Saturation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Saturation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TintColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TintColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Contrast"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ColorCorrection"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Saturation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TintColor"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CompressorSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CompressorSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Attack"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attack"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GainMakeup"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GainMakeup"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Ratio"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Ratio"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Release"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Release"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SideChain"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SideChain"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Threshold"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Threshold"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(Cow::Borrowed("Attack"), RbxValue::Float32 { value: 0.1 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("GainMakeup"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CompressorSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Ratio"), RbxValue::Float32 { value: 40.0 });
                    map.insert(Cow::Borrowed("Release"), RbxValue::Float32 { value: 0.1 });
                    map.insert(Cow::Borrowed("SideChain"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Threshold"),
                        RbxValue::Float32 { value: -40.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ConeHandleAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ConeHandleAdornment"),
                superclass: Some(Cow::Borrowed("HandleAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Height"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Height"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Radius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Radius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(Cow::Borrowed("Height"), RbxValue::Float32 { value: 2.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ConeHandleAdornment"),
                        },
                    );
                    map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.5 });
                    map.insert(
                        Cow::Borrowed("SizeRelativeOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: -1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Configuration"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Configuration"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Configuration"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Constraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Constraint"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Active"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Active"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Attachment0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attachment0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Attachment1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attachment1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Visible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Visible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ContentProvider"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ContentProvider"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("BaseUrl"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BaseUrl"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RequestQueueSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RequestQueueSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ContentProvider"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ContextActionService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ContextActionService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ContextActionService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Controller"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Controller"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ControllerService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ControllerService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CookiesService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CookiesService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CookiesService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CoreGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CoreGui"),
                superclass: Some(Cow::Borrowed("BasePlayerGui")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SelectionImageObject"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Version"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Version"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CoreGui"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CorePackages"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CorePackages"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CorePackages"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CoreScript"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CoreScript"),
                superclass: Some(Cow::Borrowed("BaseScript")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("CoreScriptSyncService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CoreScriptSyncService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("CornerWedgePart"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CornerWedgePart"),
                superclass: Some(Cow::Borrowed("BasePart")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(47);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CornerWedge"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [2.0, 2.0, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CustomEvent"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CustomEvent"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CustomEvent"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CustomEventReceiver"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CustomEventReceiver"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Source"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Source"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CustomEventReceiver"),
                        },
                    );
                    map.insert(Cow::Borrowed("Source"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CylinderHandleAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CylinderHandleAdornment"),
                superclass: Some(Cow::Borrowed("HandleAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Height"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Height"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Radius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Radius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(Cow::Borrowed("Height"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CylinderHandleAdornment"),
                        },
                    );
                    map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("SizeRelativeOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: -1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CylinderMesh"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CylinderMesh"),
                superclass: Some(Cow::Borrowed("BevelMesh")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Mesh"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Offset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Scale"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VertexColor"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("CylindricalConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("CylindricalConstraint"),
                superclass: Some(Cow::Borrowed("SlidingBallConstraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(15);
                    map.insert(
                        Cow::Borrowed("AngularActuatorType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularActuatorType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AngularLimitsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularLimitsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AngularRestitution"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularRestitution"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AngularSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("InclinationAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("InclinationAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LowerAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LowerAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxAngularAcceleration"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MotorMaxAngularAcceleration"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MotorMaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RotationAxisVisible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RotationAxisVisible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ServoMaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ServoMaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UpperAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UpperAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WorldRotationAxis"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WorldRotationAxis"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(30);
                    map.insert(Cow::Borrowed("ActuatorType"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("AngularActuatorType"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("AngularLimitsEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("AngularRestitution"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("AngularSpeed"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("InclinationAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("LowerAngle"),
                        RbxValue::Float32 { value: -45.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LowerLimit"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxAcceleration"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxAngularAcceleration"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxForce"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxTorque"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("CylindricalConstraint"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotationAxisVisible"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("ServoMaxForce"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ServoMaxTorque"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 0.15 });
                    map.insert(Cow::Borrowed("Speed"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("TargetAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TargetPosition"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("UpperAngle"),
                        RbxValue::Float32 { value: 45.0 },
                    );
                    map.insert(
                        Cow::Borrowed("UpperLimit"),
                        RbxValue::Float32 { value: 5.0 },
                    );
                    map.insert(Cow::Borrowed("Velocity"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("DataModel"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DataModel"),
                superclass: Some(Cow::Borrowed("ServiceProvider")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(16);
                    map.insert(
                        Cow::Borrowed("CreatorId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CreatorId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CreatorType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CreatorType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CreatorType")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GearGenreSetting"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GearGenreSetting"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("GearGenreSetting")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Genre"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Genre"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Genre")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsSFFlagsLoaded"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsSFFlagsLoaded"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("JobId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("JobId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlaceId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlaceId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlaceVersion"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlaceVersion"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrivateServerId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrivateServerId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrivateServerOwnerId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrivateServerOwnerId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VIPServerId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VIPServerId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VIPServerOwnerId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VIPServerOwnerId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Workspace"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Workspace"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("lighting"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("lighting"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("workspace"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("workspace"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("DataModelMesh"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DataModelMesh"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Offset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Offset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Scale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Scale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VertexColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VertexColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("DataStorePages"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DataStorePages"),
                superclass: Some(Cow::Borrowed("Pages")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("DataStoreService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DataStoreService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("AutomaticRetry"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutomaticRetry"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LegacyNamingScheme"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LegacyNamingScheme"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("DataStoreService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Debris"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Debris"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("MaxItems"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxItems"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("MaxItems"),
                        RbxValue::Float32 { value: 1000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Debris"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("DebugSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DebugSettings"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SETTINGS,
                properties: {
                    let mut map = HashMap::with_capacity(20);
                    map.insert(
                        Cow::Borrowed("DataModel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataModel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ErrorReporting"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ErrorReporting"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ErrorReporting")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GfxCard"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GfxCard"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("InstanceCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("InstanceCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsFmodProfilingEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsFmodProfilingEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsScriptStackTracingEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsScriptStackTracingEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("JobCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("JobCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LuaRamLimit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LuaRamLimit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OsIs64Bit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OsIs64Bit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OsPlatform"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OsPlatform"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OsPlatformId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OsPlatformId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OsVer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OsVer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlayerCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlayerCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReportSoundWarnings"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReportSoundWarnings"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxProductName"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RobloxProductName"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxVersion"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RobloxVersion"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SIMD"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SIMD"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SystemProductName"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SystemProductName"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TickCountPreciseOverride"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TickCountPreciseOverride"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "TickCountSampleMethod",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VideoMemory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VideoMemory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("DebuggerBreakpoint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DebuggerBreakpoint"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Condition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Condition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Line"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Line"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("DebuggerManager"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DebuggerManager"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("DebuggingEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DebuggingEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("DebuggerWatch"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DebuggerWatch"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Expression"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Expression"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Decal"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Decal"),
                superclass: Some(Cow::Borrowed("FaceInstance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LocalTransparencyModifier"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Shiny"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Shiny"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Specular"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Specular"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Texture"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Decal"),
                        },
                    );
                    map.insert(Cow::Borrowed("Shiny"), RbxValue::Float32 { value: 20.0 });
                    map.insert(Cow::Borrowed("Specular"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Dialog"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Dialog"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("BehaviorType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BehaviorType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("DialogBehaviorType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ConversationDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ConversationDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GoodbyeChoiceActive"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GoodbyeChoiceActive"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GoodbyeDialog"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GoodbyeDialog"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("InUse"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("InUse"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("InitialPrompt"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("InitialPrompt"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Purpose"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Purpose"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("DialogPurpose")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Tone"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Tone"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("DialogTone")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TriggerDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TriggerDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TriggerOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TriggerOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(Cow::Borrowed("BehaviorType"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("ConversationDistance"),
                        RbxValue::Float32 { value: 25.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GoodbyeChoiceActive"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("GoodbyeDialog"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("InUse"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("InitialPrompt"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Dialog"),
                        },
                    );
                    map.insert(Cow::Borrowed("Purpose"), RbxValue::Enum { value: 1 });
                    map.insert(Cow::Borrowed("Tone"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TriggerDistance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TriggerOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("DialogChoice"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DialogChoice"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("GoodbyeChoiceActive"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GoodbyeChoiceActive"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GoodbyeDialog"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GoodbyeDialog"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ResponseDialog"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ResponseDialog"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UserDialog"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UserDialog"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("GoodbyeChoiceActive"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("GoodbyeDialog"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("DialogChoice"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ResponseDialog"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UserDialog"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("DistortionSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DistortionSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Level"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Level"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Level"), RbxValue::Float32 { value: 0.75 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("DistortionSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("DockWidgetPluginGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DockWidgetPluginGui"),
                superclass: Some(Cow::Borrowed("PluginGui")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("HostWidgetWasRestored"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HostWidgetWasRestored"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("DoubleConstrainedValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DoubleConstrainedValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("ConstrainedValue"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ConstrainedValue"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxValue"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxValue"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinValue"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MinValue"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("ConstrainedValue"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("MaxValue"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("MinValue"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(Cow::Borrowed("Value"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Dragger"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Dragger"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Dragger"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("DynamicRotate"),
            RbxClassDescriptor {
                name: Cow::Borrowed("DynamicRotate"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("BaseAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BaseAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("EchoSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("EchoSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Delay"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Delay"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DryLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DryLevel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Feedback"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Feedback"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WetLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WetLevel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(Cow::Borrowed("Delay"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("DryLevel"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Feedback"), RbxValue::Float32 { value: 0.5 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("EchoSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("WetLevel"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("EqualizerSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("EqualizerSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("HighGain"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HighGain"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LowGain"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LowGain"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MidGain"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MidGain"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("HighGain"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("LowGain"), RbxValue::Float32 { value: -20.0 });
                    map.insert(Cow::Borrowed("MidGain"), RbxValue::Float32 { value: -10.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("EqualizerSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Explosion"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Explosion"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("BlastPressure"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BlastPressure"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BlastRadius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BlastRadius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DestroyJointRadiusPercent"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DestroyJointRadiusPercent"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExplosionType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExplosionType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ExplosionType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Visible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Visible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("BlastPressure"),
                        RbxValue::Float32 { value: 500000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BlastRadius"),
                        RbxValue::Float32 { value: 4.0 },
                    );
                    map.insert(
                        Cow::Borrowed("DestroyJointRadiusPercent"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("ExplosionType"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Explosion"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FaceInstance"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FaceInstance"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Face"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Face"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Feature"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Feature"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("FaceId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FaceId"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("InOut"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("InOut"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InOut")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftRight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftRight"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("LeftRight")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopBottom"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TopBottom"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TopBottom")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("File"),
            RbxClassDescriptor {
                name: Cow::Borrowed("File"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("FileName"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FileName"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FileSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FileSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("FileMesh"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FileMesh"),
                superclass: Some(Cow::Borrowed("DataModelMesh")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("MeshId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MeshId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("MeshId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Mesh"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Offset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Scale"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VertexColor"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Fire"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Fire"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Heat"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Heat"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("heat_xml")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SecondaryColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SecondaryColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("size_xml")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("heat_xml"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("heat_xml"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Heat")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Size")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("size_xml"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("size_xml"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Size")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.92549026, 0.54509807, 0.27450982],
                        },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Heat"), RbxValue::Float32 { value: 9.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Fire"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SecondaryColor"),
                        RbxValue::Color3 {
                            value: [0.54509807, 0.3137255, 0.21568629],
                        },
                    );
                    map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 5.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Flag"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Flag"),
                superclass: Some(Cow::Borrowed("Tool")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("TeamColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TeamColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("CanBeDropped"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Grip"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripForward"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, -1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripPos"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripRight"),
                        RbxValue::Vector3 {
                            value: [1.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripUp"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ManualActivationOnly"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Flag"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RequiresHandle"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("TextureId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ToolTip"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FlagStand"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FlagStand"),
                superclass: Some(Cow::Borrowed("Part")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("TeamColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TeamColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(49);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("FlagStand"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FlagStandService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FlagStandService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("FlangeSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FlangeSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Depth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Depth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Mix"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Mix"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Rate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("Depth"), RbxValue::Float32 { value: 0.45 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Mix"), RbxValue::Float32 { value: 0.85 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("FlangeSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Rate"), RbxValue::Float32 { value: 5.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FloorWire"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FloorWire"),
                superclass: Some(Cow::Borrowed("GuiBase3d")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("CycleOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CycleOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("From"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("From"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StudsBetweenTextures"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StudsBetweenTextures"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Texture"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("To"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("To"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Velocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WireRadius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WireRadius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CycleOffset"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("From"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("FloorWire"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StudsBetweenTextures"),
                        RbxValue::Float32 { value: 4.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureSize"),
                        RbxValue::Vector2 { value: [1.0, 1.0] },
                    );
                    map.insert(Cow::Borrowed("To"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Velocity"), RbxValue::Float32 { value: 2.0 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("WireRadius"),
                        RbxValue::Float32 { value: 0.0625 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FlyweightService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FlyweightService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Folder"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Folder"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Folder"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ForceField"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ForceField"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Visible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Visible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ForceField"),
                        },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FormFactorPart"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FormFactorPart"),
                superclass: Some(Cow::Borrowed("BasePart")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("FormFactor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FormFactor"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FormFactor")),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("formFactorRaw")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("formFactor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("formFactor"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FormFactor")),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("FormFactor")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("formFactorRaw"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("formFactorRaw"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FormFactor")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("FormFactor")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Frame"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Frame"),
                superclass: Some(Cow::Borrowed("GuiObject")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Style"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Style"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FrameStyle")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(27);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Frame"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FriendPages"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FriendPages"),
                superclass: Some(Cow::Borrowed("Pages")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("FriendService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FriendService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("FriendService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("FunctionalTest"),
            RbxClassDescriptor {
                name: Cow::Borrowed("FunctionalTest"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Description"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Description"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Description"),
                        RbxValue::String {
                            value: String::from("?"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GamePassService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GamePassService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("GamePassService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GameSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GameSettings"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SETTINGS,
                properties: {
                    let mut map = HashMap::with_capacity(14);
                    map.insert(
                        Cow::Borrowed("AdditionalCoreIncludeDirs"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AdditionalCoreIncludeDirs"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BubbleChatLifetime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BubbleChatLifetime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BubbleChatMaxBubbles"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BubbleChatMaxBubbles"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ChatHistory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ChatHistory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ChatScrollLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ChatScrollLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CollisionSoundEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CollisionSoundEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CollisionSoundVolume"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CollisionSoundVolume"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HardwareMouse"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HardwareMouse"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxCollisionSounds"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxCollisionSounds"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverrideStarterScript"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OverrideStarterScript"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReportAbuseChatHistory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReportAbuseChatHistory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SoftwareSound"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SoftwareSound"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VideoCaptureEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VideoCaptureEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VideoQuality"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VideoQuality"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "VideoQualitySettings",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GamepadService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GamepadService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("GamepadService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GenericSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GenericSettings"),
                superclass: Some(Cow::Borrowed("ServiceProvider")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Geometry"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Geometry"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Geometry"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GlobalDataStore"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GlobalDataStore"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GlobalSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GlobalSettings"),
                superclass: Some(Cow::Borrowed("GenericSettings")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Glue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Glue"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("F0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("F0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("F1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("F1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("F2"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("F2"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("F3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("F3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("F0"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("F1"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("F2"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("F3"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Glue"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GoogleAnalyticsConfiguration"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GoogleAnalyticsConfiguration"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GroupService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GroupService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("GroupService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GuiBase"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiBase"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GuiBase2d"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiBase2d"),
                superclass: Some(Cow::Borrowed("GuiBase")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("AbsolutePosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AbsolutePosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AbsoluteRotation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AbsoluteRotation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AbsoluteSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AbsoluteSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoLocalize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Localize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Localize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RootLocalizationTable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GuiBase3d"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiBase3d"),
                superclass: Some(Cow::Borrowed("GuiBase")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Visible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Visible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GuiButton"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiButton"),
                superclass: Some(Cow::Borrowed("GuiObject")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("AutoButtonColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoButtonColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Modal"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Modal"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Selected"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Selected"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Style"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Style"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ButtonStyle")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GuiLabel"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiLabel"),
                superclass: Some(Cow::Borrowed("GuiObject")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GuiMain"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiMain"),
                superclass: Some(Cow::Borrowed("ScreenGui")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("DisplayOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("IgnoreGuiInset"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("GuiMain"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnTopOfCoreBlur"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("ResetOnSpawn"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GuiObject"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiObject"),
                superclass: Some(Cow::Borrowed("GuiBase2d")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(24);
                    map.insert(
                        Cow::Borrowed("Active"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Active"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AnchorPoint"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackgroundColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackgroundColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackgroundTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BorderColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BorderColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BorderSizePixel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClipsDescendants"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Draggable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Draggable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LayoutOrder"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NextSelectionDown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NextSelectionLeft"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NextSelectionRight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NextSelectionUp"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Rotation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Selectable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Selectable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SelectionImageObject"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SizeConstraint"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SizeConstraint"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SizeConstraint")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Visible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Visible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ZIndex"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ZIndex"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("GuiService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuiService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("AutoSelectGuiEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoSelectGuiEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CoreEffectFolder"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CoreEffectFolder"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CoreGuiFolder"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CoreGuiFolder"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CoreGuiNavigationEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CoreGuiNavigationEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GuiNavigationEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GuiNavigationEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsModalDialog"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsModalDialog"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsWindows"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsWindows"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MenuIsOpen"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MenuIsOpen"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectedCoreObject"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SelectedCoreObject"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectedObject"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SelectedObject"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("AutoSelectGuiEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("CoreEffectFolder"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("CoreGuiFolder"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("CoreGuiNavigationEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("GuiNavigationEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("GuiService"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectedCoreObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("SelectedObject"),
                        RbxValue::Ref { value: None },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("GuidRegistryService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("GuidRegistryService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("HandleAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HandleAdornment"),
                superclass: Some(Cow::Borrowed("PVAdornment")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AlwaysOnTop"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SizeRelativeOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SizeRelativeOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ZIndex"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ZIndex"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Handles"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Handles"),
                superclass: Some(Cow::Borrowed("HandlesBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Faces"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Faces"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Faces")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Style"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Style"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("HandlesStyle")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Handles"),
                        },
                    );
                    map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("HandlesBase"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HandlesBase"),
                superclass: Some(Cow::Borrowed("PartAdornment")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("HapticService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HapticService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("HapticService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Hat"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Hat"),
                superclass: Some(Cow::Borrowed("Accoutrement")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("AttachmentForward"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, -1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPoint"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentPos"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentRight"),
                        RbxValue::Vector3 {
                            value: [1.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AttachmentUp"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Hat"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("HingeConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HingeConstraint"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("ActuatorType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ActuatorType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AngularSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AngularVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LimitsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LowerAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LowerAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxAcceleration"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MotorMaxAcceleration"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MotorMaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Radius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Radius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Restitution"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ServoMaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ServoMaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UpperAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UpperAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(17);
                    map.insert(Cow::Borrowed("ActuatorType"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("AngularSpeed"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("AngularVelocity"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("LowerAngle"),
                        RbxValue::Float32 { value: -45.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxAcceleration"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxTorque"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("HingeConstraint"),
                        },
                    );
                    map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.15 });
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ServoMaxTorque"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TargetAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("UpperAngle"),
                        RbxValue::Float32 { value: 45.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Hint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Hint"),
                superclass: Some(Cow::Borrowed("Message")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Message"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Hole"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Hole"),
                superclass: Some(Cow::Borrowed("Feature")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(Cow::Borrowed("FaceId"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("InOut"), RbxValue::Enum { value: 2 });
                    map.insert(Cow::Borrowed("LeftRight"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Hole"),
                        },
                    );
                    map.insert(Cow::Borrowed("TopBottom"), RbxValue::Enum { value: 1 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Hopper"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Hopper"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::DEPRECATED
                    | RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("HopperBin"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HopperBin"),
                superclass: Some(Cow::Borrowed("BackpackItem")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Active"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Active"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BinType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BinType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("BinType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("BinType"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("HopperBin"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("HttpRbxApiService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HttpRbxApiService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("HttpRbxApiService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("HttpRequest"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HttpRequest"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("HttpService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HttpService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("HttpEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HttpEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("HttpService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Humanoid"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Humanoid"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(34);
                    map.insert(
                        Cow::Borrowed("AutoJumpEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoJumpEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AutoRotate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoRotate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AutomaticScalingEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutomaticScalingEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BreakJointsOnDeath"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BreakJointsOnDeath"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CollisionType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CollisionType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "HumanoidCollisionType",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DisplayDistanceType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DisplayDistanceType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "HumanoidDisplayDistanceType",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FloorMaterial"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FloorMaterial"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Material")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Health"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Health"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HealthDisplayDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HealthDisplayDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HealthDisplayType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HealthDisplayType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "HumanoidHealthDisplayType",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HipHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HipHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Jump"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Jump"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("JumpHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("JumpHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("JumpPower"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("JumpPower"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftLeg"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftLeg"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxHealth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxHealth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxSlopeAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxSlopeAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MoveDirection"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MoveDirection"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NameDisplayDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NameDisplayDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NameOcclusion"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NameOcclusion"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NameOcclusion")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlatformStand"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlatformStand"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RigType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RigType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("HumanoidRigType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightLeg"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightLeg"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootPart"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RootPart"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SeatPart"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SeatPart"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Sit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Sit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetPoint"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetPoint"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Torso"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Torso"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UseJumpPower"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UseJumpPower"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WalkSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WalkSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WalkToPart"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WalkToPart"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WalkToPoint"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WalkToPoint"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxHealth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("maxHealth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(31);
                    map.insert(
                        Cow::Borrowed("AutoJumpEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("AutoRotate"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("AutomaticScalingEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BreakJointsOnDeath"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("CameraOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CollisionType"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("DisplayDistanceType"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(Cow::Borrowed("Health"), RbxValue::Float32 { value: 100.0 });
                    map.insert(
                        Cow::Borrowed("HealthDisplayDistance"),
                        RbxValue::Float32 { value: 100.0 },
                    );
                    map.insert(
                        Cow::Borrowed("HealthDisplayType"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(Cow::Borrowed("HipHeight"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Jump"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("JumpHeight"),
                        RbxValue::Float32 { value: 7.2 },
                    );
                    map.insert(
                        Cow::Borrowed("JumpPower"),
                        RbxValue::Float32 { value: 50.0 },
                    );
                    map.insert(Cow::Borrowed("LeftLeg"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("MaxHealth"),
                        RbxValue::Float32 { value: 100.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MaxSlopeAngle"),
                        RbxValue::Float32 { value: 89.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Humanoid"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NameDisplayDistance"),
                        RbxValue::Float32 { value: 100.0 },
                    );
                    map.insert(Cow::Borrowed("NameOcclusion"), RbxValue::Enum { value: 2 });
                    map.insert(
                        Cow::Borrowed("PlatformStand"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("RigType"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("RightLeg"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Sit"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("TargetPoint"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Torso"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("UseJumpPower"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("WalkSpeed"),
                        RbxValue::Float32 { value: 16.0 },
                    );
                    map.insert(Cow::Borrowed("WalkToPart"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("WalkToPoint"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("maxHealth"),
                        RbxValue::Float32 { value: 100.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("HumanoidController"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HumanoidController"),
                superclass: Some(Cow::Borrowed("Controller")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("HumanoidDescription"),
            RbxClassDescriptor {
                name: Cow::Borrowed("HumanoidDescription"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(37);
                    map.insert(
                        Cow::Borrowed("BackAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BackAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BodyTypeScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BodyTypeScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClimbAnimation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClimbAnimation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DepthScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DepthScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Face"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Face"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FaceAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FaceAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FallAnimation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FallAnimation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FrontAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FrontAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GraphicTShirt"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GraphicTShirt"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HairAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HairAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HatAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HatAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Head"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Head"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeadColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeadColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeadScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeadScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeightScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeightScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IdleAnimation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IdleAnimation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("JumpAnimation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("JumpAnimation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftArm"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftArm"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftArmColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftArmColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftLeg"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftLeg"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LeftLegColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LeftLegColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NeckAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NeckAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Pants"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Pants"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ProportionScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ProportionScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightArm"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightArm"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightArmColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightArmColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightLeg"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightLeg"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightLegColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightLegColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RunAnimation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RunAnimation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Shirt"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Shirt"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShouldersAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShouldersAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SwimAnimation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SwimAnimation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Torso"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Torso"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TorsoColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TorsoColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaistAccessory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WaistAccessory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WalkAnimation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WalkAnimation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WidthScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WidthScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(38);
                    map.insert(
                        Cow::Borrowed("BackAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BodyTypeScale"),
                        RbxValue::Float32 { value: 0.3 },
                    );
                    map.insert(
                        Cow::Borrowed("ClimbAnimation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("DepthScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Face"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("FaceAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FallAnimation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GraphicTShirt"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("HairAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HatAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("Head"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("HeadColor"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("HeadScale"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("HeightScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("IdleAnimation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("JumpAnimation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("LeftArm"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("LeftArmColor"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("LeftLeg"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("LeftLegColor"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("HumanoidDescription"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NeckAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("Pants"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("ProportionScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("RightArm"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("RightArmColor"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("RightLeg"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("RightLegColor"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RunAnimation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Shirt"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("ShouldersAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SwimAnimation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Torso"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("TorsoColor"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaistAccessory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WalkAnimation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("WidthScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ImageButton"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ImageButton"),
                superclass: Some(Cow::Borrowed("GuiButton")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("HoverImage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HoverImage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Image"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Image"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageRectOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageRectSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsLoaded"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLoaded"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PressedImage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PressedImage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScaleType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScaleType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScaleType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SliceCenter"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SliceCenter"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Rect")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SliceScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SliceScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TileSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TileSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(40);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoButtonColor"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("HoverImage"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Image"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageColor3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectOffset"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectSize"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("ImageTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Modal"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ImageButton"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PressedImage"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("ScaleType"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Selected"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("SliceScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TileSize"),
                        RbxValue::UDim2 {
                            value: (1.0, 0, 1.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ImageHandleAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ImageHandleAdornment"),
                superclass: Some(Cow::Borrowed("HandleAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Image"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Image"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.9490197, 0.95294124, 0.95294124],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Image"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/SurfacesDefault.png"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ImageHandleAdornment"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector2 { value: [1.0, 1.0] },
                    );
                    map.insert(
                        Cow::Borrowed("SizeRelativeOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: -1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ImageLabel"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ImageLabel"),
                superclass: Some(Cow::Borrowed("GuiLabel")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("Image"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Image"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageRectOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageRectSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsLoaded"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLoaded"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScaleType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScaleType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScaleType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SliceCenter"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SliceCenter"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Rect")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SliceScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SliceScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TileSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TileSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(34);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Image"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageColor3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectOffset"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("ImageRectSize"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("ImageTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ImageLabel"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("ScaleType"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("SliceScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TileSize"),
                        RbxValue::UDim2 {
                            value: (1.0, 0, 1.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("InputObject"),
            RbxClassDescriptor {
                name: Cow::Borrowed("InputObject"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("Delta"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Delta"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("KeyCode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("KeyCode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("KeyCode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UserInputState"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UserInputState"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UserInputState")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UserInputType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UserInputType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UserInputType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("InsertService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("InsertService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("AllowClientInsertModels"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllowClientInsertModels"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AllowInsertFreeModels"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllowInsertFreeModels"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_BROWSABLE
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("AllowInsertFreeModels"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("InsertService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Instance"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Instance"),
                superclass: None,
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("Archivable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Archivable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClassName"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClassName"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataCost"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataCost"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Name"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Parent"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Parent"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxLocked"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RobloxLocked"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Tags"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Tags"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BinaryString),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Custom,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("archivable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("archivable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Archivable")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("className"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("className"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("ClassName")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("IntConstrainedValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("IntConstrainedValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("ConstrainedValue"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ConstrainedValue"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxValue"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxValue"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinValue"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MinValue"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("ConstrainedValue"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("MaxValue"), RbxValue::Float32 { value: 10.0 });
                    map.insert(Cow::Borrowed("MinValue"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(Cow::Borrowed("Value"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("IntValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("IntValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(Cow::Borrowed("Value"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("InventoryPages"),
            RbxClassDescriptor {
                name: Cow::Borrowed("InventoryPages"),
                superclass: Some(Cow::Borrowed("Pages")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("JointInstance"),
            RbxClassDescriptor {
                name: Cow::Borrowed("JointInstance"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Active"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Active"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("C0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("C1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Part0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Part0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Part1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Part1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("part1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("part1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Part1")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("JointsService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("JointsService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::DEPRECATED
                    | RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("JointsService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("KeyboardService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("KeyboardService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Keyframe"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Keyframe"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Time"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Time"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Keyframe"),
                        },
                    );
                    map.insert(Cow::Borrowed("Time"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("KeyframeMarker"),
            RbxClassDescriptor {
                name: Cow::Borrowed("KeyframeMarker"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("KeyframeMarker"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("KeyframeSequence"),
            RbxClassDescriptor {
                name: Cow::Borrowed("KeyframeSequence"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("AuthoredHipHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AuthoredHipHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Loop"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Loop"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Priority"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Priority"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AnimationPriority")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("AuthoredHipHeight"),
                        RbxValue::Float32 { value: 2.0 },
                    );
                    map.insert(Cow::Borrowed("Loop"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("KeyframeSequence"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Enum { value: 2 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("KeyframeSequenceProvider"),
            RbxClassDescriptor {
                name: Cow::Borrowed("KeyframeSequenceProvider"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LayerCollector"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LayerCollector"),
                superclass: Some(Cow::Borrowed("GuiBase2d")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ResetOnSpawn"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ResetOnSpawn"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ZIndexBehavior"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ZIndexBehavior"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ZIndexBehavior")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Light"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Light"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Brightness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Shadows"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Shadows"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Lighting"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Lighting"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(17);
                    map.insert(
                        Cow::Borrowed("Ambient"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Ambient"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Brightness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClockTime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClockTime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ColorShift_Bottom"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ColorShift_Bottom"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ColorShift_Top"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ColorShift_Top"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExposureCompensation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExposureCompensation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FogColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FogColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FogEnd"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FogEnd"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FogStart"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FogStart"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GeographicLatitude"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GeographicLatitude"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GlobalShadows"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GlobalShadows"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OutdoorAmbient"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OutdoorAmbient"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Outlines"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Outlines"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShadowColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShadowColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShadowSoftness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShadowSoftness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Technology"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Technology"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Technology")),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TimeOfDay"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TimeOfDay"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(17);
                    map.insert(
                        Cow::Borrowed("Ambient"),
                        RbxValue::Color3 {
                            value: [0.5, 0.5, 0.5],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClockTime"),
                        RbxValue::Float32 { value: 14.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ColorShift_Bottom"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ColorShift_Top"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExposureCompensation"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("FogColor"),
                        RbxValue::Color3 {
                            value: [0.75, 0.75, 0.75],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FogEnd"),
                        RbxValue::Float32 { value: 100000.0 },
                    );
                    map.insert(Cow::Borrowed("FogStart"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("GeographicLatitude"),
                        RbxValue::Float32 { value: 41.7333 },
                    );
                    map.insert(
                        Cow::Borrowed("GlobalShadows"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Lighting"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OutdoorAmbient"),
                        RbxValue::Color3 {
                            value: [0.5, 0.5, 0.5],
                        },
                    );
                    map.insert(Cow::Borrowed("Outlines"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("ShadowColor"),
                        RbxValue::Color3 {
                            value: [0.7, 0.7, 0.72],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShadowSoftness"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("TimeOfDay"),
                        RbxValue::String {
                            value: String::from("14:00:00"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LineForce"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LineForce"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("ApplyAtCenterOfMass"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ApplyAtCenterOfMass"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("InverseSquareLaw"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("InverseSquareLaw"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Magnitude"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Magnitude"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReactionForceEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReactionForceEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("ApplyAtCenterOfMass"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("InverseSquareLaw"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Magnitude"),
                        RbxValue::Float32 { value: 1000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("LineForce"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReactionForceEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LineHandleAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LineHandleAdornment"),
                superclass: Some(Cow::Borrowed("HandleAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Length"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Length"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Thickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Thickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(Cow::Borrowed("Length"), RbxValue::Float32 { value: 5.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("LineHandleAdornment"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SizeRelativeOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: -1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LocalScript"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LocalScript"),
                superclass: Some(Cow::Borrowed("Script")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("LinkedSource"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("LocalScript"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Source"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LocalStorageService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LocalStorageService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("LocalizationService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LocalizationService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("ForcePlayModeGameLocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ForcePlayModeGameLocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ForcePlayModeRobloxLocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ForcePlayModeRobloxLocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsTextScraperRunning"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsTextScraperRunning"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxForcePlayModeGameLocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RobloxForcePlayModeGameLocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxForcePlayModeRobloxLocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RobloxForcePlayModeRobloxLocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxLocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RobloxLocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SystemLocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SystemLocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("IsTextScraperRunning"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("LocalizationService"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxForcePlayModeGameLocaleId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RobloxForcePlayModeRobloxLocaleId"),
                        RbxValue::String {
                            value: String::from("en-us"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LocalizationTable"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LocalizationTable"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Contents"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Contents"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Custom,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevelopmentLanguage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevelopmentLanguage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Root"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Root"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SourceLocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SourceLocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("DevelopmentLanguage"),
                        RbxValue::String {
                            value: String::from("en-us"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("LocalizationTable"),
                        },
                    );
                    map.insert(Cow::Borrowed("Root"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("SourceLocaleId"),
                        RbxValue::String {
                            value: String::from("en-us"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LogService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LogService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("LogService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("LoginService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LoginService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("LuaSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LuaSettings"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SETTINGS,
                properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("AreScriptStartsReported"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreScriptStartsReported"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DefaultWaitTime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DefaultWaitTime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GcFrequency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GcFrequency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GcLimit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GcLimit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GcPause"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GcPause"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GcStepMul"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GcStepMul"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaitingThreadsBudget"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WaitingThreadsBudget"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("LuaSourceContainer"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LuaSourceContainer"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("CurrentEditor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentEditor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("LuaWebService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("LuaWebService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ManualGlue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ManualGlue"),
                superclass: Some(Cow::Borrowed("ManualSurfaceJointInstance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ManualGlue"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ManualSurfaceJointInstance"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ManualSurfaceJointInstance"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ManualWeld"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ManualWeld"),
                superclass: Some(Cow::Borrowed("ManualSurfaceJointInstance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ManualWeld"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("MarketplaceService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("MarketplaceService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("MarketplaceService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("MeshContentProvider"),
            RbxClassDescriptor {
                name: Cow::Borrowed("MeshContentProvider"),
                superclass: Some(Cow::Borrowed("CacheableContentProvider")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("MeshContentProvider"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("MeshPart"),
            RbxClassDescriptor {
                name: Cow::Borrowed("MeshPart"),
                superclass: Some(Cow::Borrowed("TriangleMeshPart")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("MeshID"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MeshID"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MeshId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MeshId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RenderFidelity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RenderFidelity"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RenderFidelity")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureID"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureID"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(50);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("MeshId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("MeshPart"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureID"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Message"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Message"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Text"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Message"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("MessagingService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("MessagingService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("MessagingService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Model"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Model"),
                superclass: Some(Cow::Borrowed("PVInstance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("PrimaryPart"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrimaryPart"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Model"),
                        },
                    );
                    map.insert(Cow::Borrowed("PrimaryPart"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ModuleScript"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ModuleScript"),
                superclass: Some(Cow::Borrowed("LuaSourceContainer")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("LinkedSource"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LinkedSource"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Source"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Source"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("LinkedSource"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ModuleScript"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Source"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Motor"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Motor"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("CurrentAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DesiredAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DesiredAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("DesiredAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MaxVelocity"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Motor"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Motor6D"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Motor6D"),
                superclass: Some(Cow::Borrowed("Motor")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Transform"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transform"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("DesiredAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MaxVelocity"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Motor6D"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Transform"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("MotorFeature"),
            RbxClassDescriptor {
                name: Cow::Borrowed("MotorFeature"),
                superclass: Some(Cow::Borrowed("Feature")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(Cow::Borrowed("FaceId"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("InOut"), RbxValue::Enum { value: 2 });
                    map.insert(Cow::Borrowed("LeftRight"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("MotorFeature"),
                        },
                    );
                    map.insert(Cow::Borrowed("TopBottom"), RbxValue::Enum { value: 1 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Mouse"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Mouse"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("Hit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Hit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Icon"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Icon"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Origin"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Origin"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Target"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Target"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetFilter"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetFilter"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UnitRay"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UnitRay"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Ray")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ViewSizeX"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ViewSizeX"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ViewSizeY"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ViewSizeY"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("X"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("X"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Y"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Y"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("hit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("hit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("target"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("target"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("MouseService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("MouseService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("NegateOperation"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NegateOperation"),
                superclass: Some(Cow::Borrowed("PartOperation")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(49);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("NegativePart"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.1 },
                    );
                    map.insert(
                        Cow::Borrowed("UsePartColor"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("NetworkClient"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NetworkClient"),
                superclass: Some(Cow::Borrowed("NetworkPeer")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Ticket"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Ticket"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("NetworkMarker"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NetworkMarker"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("NetworkPeer"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NetworkPeer"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("NetworkReplicator"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NetworkReplicator"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("NetworkServer"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NetworkServer"),
                superclass: Some(Cow::Borrowed("NetworkPeer")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Port"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Port"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("NetworkSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NetworkSettings"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(33);
                    map.insert(
                        Cow::Borrowed("ArePhysicsRejectionsReported"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ArePhysicsRejectionsReported"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClientPhysicsSendRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClientPhysicsSendRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataGCRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataGCRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataMtuAdjust"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataMtuAdjust"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataSendPriority"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataSendPriority"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PacketPriority")),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataSendRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataSendRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExtraMemoryUsed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExtraMemoryUsed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FreeMemoryMBytes"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FreeMemoryMBytes"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IncommingReplicationLag"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IncommingReplicationLag"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsQueueErrorComputed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsQueueErrorComputed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NetworkOwnerRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NetworkOwnerRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PhysicsMtuAdjust"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PhysicsMtuAdjust"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PhysicsSendPriority"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PhysicsSendPriority"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PacketPriority")),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PhysicsSendRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PhysicsSendRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PreferredClientPort"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PreferredClientPort"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintBits"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintBits"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintEvents"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintEvents"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintFilters"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintFilters"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintInstances"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintInstances"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintPhysicsErrors"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintPhysicsErrors"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintProperties"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintProperties"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintSplitMessage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintSplitMessage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintStreamInstanceQuota"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintStreamInstanceQuota"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrintTouches"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrintTouches"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ProxyEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ProxyEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ProxyURL"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ProxyURL"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReceiveRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReceiveRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RenderStreamedRegions"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RenderStreamedRegions"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShowActiveAnimationAsset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShowActiveAnimationAsset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TouchSendRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TouchSendRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TrackDataTypes"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TrackDataTypes"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TrackPhysicsDetails"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TrackPhysicsDetails"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UsePhysicsPacketCache"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UsePhysicsPacketCache"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("NonReplicatedCSGDictionaryService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NonReplicatedCSGDictionaryService"),
                superclass: Some(Cow::Borrowed("FlyweightService")),
                tags: RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("NotificationService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NotificationService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("IsLuaBottomBarEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLuaBottomBarEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsLuaChatEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLuaChatEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsLuaGameDetailsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLuaGameDetailsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsLuaGamesPageEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLuaGamesPageEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsLuaHomePageEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLuaHomePageEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectedTheme"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SelectedTheme"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("NotificationService"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectedTheme"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("NumberValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("NumberValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(Cow::Borrowed("Value"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ObjectValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ObjectValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(Cow::Borrowed("Value"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("OrderedDataStore"),
            RbxClassDescriptor {
                name: Cow::Borrowed("OrderedDataStore"),
                superclass: Some(Cow::Borrowed("GlobalDataStore")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PVAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PVAdornment"),
                superclass: Some(Cow::Borrowed("GuiBase3d")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Adornee"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Adornee"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PVInstance"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PVInstance"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PackageLink"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PackageLink"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("AutoUpdate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoUpdate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PackageId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PackageId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Status"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Status"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VersionNumber"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VersionNumber"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PackageService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PackageService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Pages"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Pages"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("IsFinished"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsFinished"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Pants"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Pants"),
                superclass: Some(Cow::Borrowed("Clothing")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("PantsTemplate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PantsTemplate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Clothing"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PantsTemplate"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ParabolaAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ParabolaAdornment"),
                superclass: Some(Cow::Borrowed("PVAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("A"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("A"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("B"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("B"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("C"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Range"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Range"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Thickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Thickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(Cow::Borrowed("A"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("B"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("C"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.9490197, 0.95294124, 0.95294124],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ParabolaAdornment"),
                        },
                    );
                    map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Part"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Part"),
                superclass: Some(Cow::Borrowed("FormFactorPart")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Shape"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Shape"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PartType")),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("shape")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("shape"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("shape"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PartType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Shape")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(49);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Part"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PartAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PartAdornment"),
                superclass: Some(Cow::Borrowed("GuiBase3d")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Adornee"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Adornee"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PartOperation"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PartOperation"),
                superclass: Some(Cow::Borrowed("TriangleMeshPart")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("RenderFidelity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RenderFidelity"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RenderFidelity")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TriangleCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TriangleCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UsePartColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UsePartColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(49);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("PartOperation"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("UsePartColor"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PartOperationAsset"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PartOperationAsset"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ParticleEmitter"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ParticleEmitter"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(20);
                    map.insert(
                        Cow::Borrowed("Acceleration"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Acceleration"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::ColorSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Drag"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Drag"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EmissionDirection"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EmissionDirection"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Lifetime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Lifetime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightEmission"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightEmission"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightInfluence"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LockedToPart"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LockedToPart"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Rate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RotSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RotSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Rotation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Speed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Speed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SpreadAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SpreadAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Texture"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VelocityInheritance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VelocityInheritance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VelocitySpread"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VelocitySpread"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ZOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ZOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(14);
                    map.insert(
                        Cow::Borrowed("Acceleration"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Drag"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("EmissionDirection"),
                        RbxValue::Enum { value: 1 },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("LightEmission"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LockedToPart"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ParticleEmitter"),
                        },
                    );
                    map.insert(Cow::Borrowed("Rate"), RbxValue::Float32 { value: 20.0 });
                    map.insert(
                        Cow::Borrowed("SpreadAngle"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/particles/sparkles_main.dds"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VelocityInheritance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("VelocitySpread"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("ZOffset"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Path"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Path"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Status"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Status"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PathStatus")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PathfindingService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PathfindingService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("EmptyCutoff"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EmptyCutoff"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("EmptyCutoff"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PhysicsPacketCache"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PhysicsPacketCache"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PhysicsService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PhysicsService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("PhysicsService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PhysicsSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PhysicsSettings"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SETTINGS,
                properties: {
                    let mut map = HashMap::with_capacity(22);
                    map.insert(
                        Cow::Borrowed("AllowSleep"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllowSleep"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreAnchorsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreAnchorsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreAssembliesShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreAssembliesShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreAwakePartsHighlighted"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreAwakePartsHighlighted"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreBodyTypesShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreBodyTypesShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreContactIslandsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreContactIslandsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreContactPointsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreContactPointsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreJointCoordinatesShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreJointCoordinatesShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreMechanismsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreMechanismsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreModelCoordsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreModelCoordsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreOwnersShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreOwnersShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ArePartCoordsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ArePartCoordsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreRegionsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreRegionsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreUnalignedPartsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreUnalignedPartsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AreWorldCoordsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreWorldCoordsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DisableCSGv2"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DisableCSGv2"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsReceiveAgeShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsReceiveAgeShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsTreeShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsTreeShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PhysicsEnvironmentalThrottle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PhysicsEnvironmentalThrottle"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "EnviromentalPhysicsThrottle",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShowDecompositionGeometry"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShowDecompositionGeometry"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ThrottleAdjustTime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ThrottleAdjustTime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UseCSGv2"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UseCSGv2"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PitchShiftSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PitchShiftSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Octave"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Octave"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("PitchShiftSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Octave"), RbxValue::Float32 { value: 1.25 });
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Platform"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Platform"),
                superclass: Some(Cow::Borrowed("Part")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Player"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Player"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(40);
                    map.insert(
                        Cow::Borrowed("AccountAge"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AccountAge"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AppearanceDidLoad"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AppearanceDidLoad"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AutoJumpEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoJumpEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMaxZoomDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraMaxZoomDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMinZoomDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraMinZoomDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CameraMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CanLoadCharacterAppearance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CanLoadCharacterAppearance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Character"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Character"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterAppearance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterAppearance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_BROWSABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterAppearanceId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterAppearanceId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ChatMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ChatMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ChatMode")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataComplexity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataComplexity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataComplexityLimit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataComplexityLimit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataReady"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataReady"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevCameraOcclusionMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevCameraOcclusionMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevCameraOcclusionMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevComputerCameraMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevComputerCameraMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevComputerCameraMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevComputerMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevComputerMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevComputerMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevEnableMouseLock"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevEnableMouseLock"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevTouchCameraMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevTouchCameraMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevTouchCameraMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevTouchMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevTouchMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevTouchMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DisplayName"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DisplayName"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FollowUserId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FollowUserId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Guest"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Guest"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HealthDisplayDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HealthDisplayDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaximumSimulationRadius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaximumSimulationRadius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MembershipType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MembershipType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("MembershipType")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NameDisplayDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NameDisplayDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Neutral"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Neutral"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OsPlatform"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OsPlatform"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReplicationFocus"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReplicationFocus"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RespawnLocation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RespawnLocation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SimulationRadius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SimulationRadius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Team"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Team"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TeamColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TeamColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Teleported"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Teleported"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TeleportedIn"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TeleportedIn"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UserId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UserId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VRDevice"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VRDevice"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("userId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("userId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PlayerGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PlayerGui"),
                superclass: Some(Cow::Borrowed("BasePlayerGui")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::PLAYER_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("CurrentScreenOrientation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentScreenOrientation"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScreenOrientation")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScreenOrientation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScreenOrientation"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScreenOrientation")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SelectionImageObject"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PlayerMouse"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PlayerMouse"),
                superclass: Some(Cow::Borrowed("Mouse")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PlayerScripts"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PlayerScripts"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Players"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Players"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("BubbleChat"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BubbleChat"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterAutoLoads"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterAutoLoads"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClassicChat"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClassicChat"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LocalPlayer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LocalPlayer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxPlayers"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxPlayers"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("MaxPlayersInternal")),
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxPlayersInternal"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxPlayersInternal"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("MaxPlayers")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NumPlayers"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NumPlayers"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PreferredPlayers"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PreferredPlayers"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("PreferredPlayersInternal")),
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PreferredPlayersInternal"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PreferredPlayersInternal"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("PreferredPlayers")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RespawnTime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RespawnTime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("localPlayer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("localPlayer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("numPlayers"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("numPlayers"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("CharacterAutoLoads"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Players"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RespawnTime"),
                        RbxValue::Float32 { value: 5.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Plugin"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Plugin"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("CollisionEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CollisionEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GridSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GridSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UsesAssetInsertionDrag"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UsesAssetInsertionDrag"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PluginAction"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginAction"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("ActionId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ActionId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AllowBinding"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllowBinding"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StatusTip"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StatusTip"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Text"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PluginDragEvent"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginDragEvent"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Data"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Data"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MimeType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MimeType"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Sender"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Sender"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PluginGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginGui"),
                superclass: Some(Cow::Borrowed("LayerCollector")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Title"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Title"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PluginGuiService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginGuiService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("PluginGuiService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PluginManager"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginManager"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PluginMenu"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginMenu"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Icon"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Icon"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Title"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Title"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PluginMouse"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginMouse"),
                superclass: Some(Cow::Borrowed("Mouse")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PluginToolbar"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginToolbar"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PluginToolbarButton"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PluginToolbarButton"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("ClickableWhenViewportHidden"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClickableWhenViewportHidden"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Icon"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Icon"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PointLight"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PointLight"),
                superclass: Some(Cow::Borrowed("Light")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Range"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Range"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("PointLight"),
                        },
                    );
                    map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 8.0 });
                    map.insert(Cow::Borrowed("Shadows"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PointsService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PointsService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::DEPRECATED
                    | RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("PointsService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Pose"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Pose"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EasingDirection"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EasingDirection"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PoseEasingDirection")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EasingStyle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EasingStyle"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PoseEasingStyle")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaskWeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaskWeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Weight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Weight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EasingDirection"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(Cow::Borrowed("EasingStyle"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("MaskWeight"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Pose"),
                        },
                    );
                    map.insert(Cow::Borrowed("Weight"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("PostEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PostEffect"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("PrismaticConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("PrismaticConstraint"),
                superclass: Some(Cow::Borrowed("SlidingBallConstraint")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(17);
                    map.insert(Cow::Borrowed("ActuatorType"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("LowerLimit"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxAcceleration"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxForce"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("PrismaticConstraint"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ServoMaxForce"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 0.15 });
                    map.insert(Cow::Borrowed("Speed"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("TargetPosition"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("UpperLimit"),
                        RbxValue::Float32 { value: 5.0 },
                    );
                    map.insert(Cow::Borrowed("Velocity"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("QWidgetPluginGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("QWidgetPluginGui"),
                superclass: Some(Cow::Borrowed("PluginGui")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("RayValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RayValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Ray")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadata"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadata"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataCallbacks"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataCallbacks"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataClass"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataClass"),
                superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("ExplorerImageIndex"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExplorerImageIndex"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExplorerOrder"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExplorerOrder"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Insertable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Insertable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PreferredParent"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PreferredParent"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PreferredParents"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PreferredParents"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(19);
                    map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("ClassCategory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Constraint"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("EditingDisabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("ExplorerImageIndex"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ExplorerOrder"),
                        RbxValue::Float32 {
                            value: 2147483600.0,
                        },
                    );
                    map.insert(Cow::Borrowed("Insertable"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PreferredParent"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PreferredParents"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScriptContext"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("UINumTicks"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("summary"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataClasses"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataClasses"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataEnum"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataEnum"),
                superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(14);
                    map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("ClassCategory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Constraint"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("EditingDisabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScriptContext"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("UINumTicks"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("summary"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataEnumItem"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataEnumItem"),
                superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(14);
                    map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("ClassCategory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Constraint"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("EditingDisabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScriptContext"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("UINumTicks"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("summary"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataEnums"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataEnums"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataEvents"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataEvents"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataFunctions"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataFunctions"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataItem"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataItem"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("Browsable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Browsable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClassCategory"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClassCategory"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClientOnly"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClientOnly"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Constraint"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Constraint"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Deprecated"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Deprecated"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EditingDisabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EditingDisabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsBackend"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsBackend"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScriptContext"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScriptContext"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ServerOnly"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ServerOnly"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UIMaximum"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UIMaximum"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UIMinimum"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UIMinimum"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UINumTicks"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UINumTicks"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("summary"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("summary"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataMember"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataMember"),
                superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(14);
                    map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("ClassCategory"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Constraint"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("EditingDisabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScriptContext"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("UINumTicks"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("summary"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataProperties"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataProperties"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReflectionMetadataYieldFunctions"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReflectionMetadataYieldFunctions"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RemoteEvent"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RemoteEvent"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RemoteEvent"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RemoteFunction"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RemoteFunction"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RemoteFunction"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RenderSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RenderSettings"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("AutoFRMLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoFRMLevel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EagerBulkExecution"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EagerBulkExecution"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EditQualityLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EditQualityLevel"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("QualityLevel")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EnableFRM"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EnableFRM"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExportMergeByMaterial"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExportMergeByMaterial"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FrameRateManager"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FrameRateManager"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "FramerateManagerMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GraphicsMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GraphicsMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("GraphicsMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MeshCacheSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MeshCacheSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("QualityLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("QualityLevel"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("QualityLevel")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ReloadAssets"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ReloadAssets"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RenderCSGTrianglesDebug"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RenderCSGTrianglesDebug"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShowBoundingBoxes"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShowBoundingBoxes"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("RenderingTest"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RenderingTest"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ComparisonDiffThreshold"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ComparisonDiffThreshold"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ComparisonMethod"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ComparisonMethod"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "RenderingTestComparisonMethod",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ComparisonPsnrThreshold"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ComparisonPsnrThreshold"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Description"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Description"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FieldOfView"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FieldOfView"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Orientation"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("QualityLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("QualityLevel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShouldSkip"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShouldSkip"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Ticket"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Ticket"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ComparisonDiffThreshold"),
                        RbxValue::Float32 { value: 10.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ComparisonMethod"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("ComparisonPsnrThreshold"),
                        RbxValue::Float32 { value: 50.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Description"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FieldOfView"),
                        RbxValue::Float32 { value: 70.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RenderingTest"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("QualityLevel"),
                        RbxValue::Float32 { value: 21.0 },
                    );
                    map.insert(Cow::Borrowed("ShouldSkip"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Ticket"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReplicatedFirst"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReplicatedFirst"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ReplicatedFirst"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReplicatedStorage"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReplicatedStorage"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ReplicatedStorage"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ReverbSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ReverbSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("DecayTime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DecayTime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Density"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Density"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Diffusion"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Diffusion"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DryLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DryLevel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WetLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WetLevel"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(Cow::Borrowed("DecayTime"), RbxValue::Float32 { value: 1.5 });
                    map.insert(Cow::Borrowed("Density"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("Diffusion"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("DryLevel"), RbxValue::Float32 { value: -6.0 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ReverbSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("WetLevel"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RobloxReplicatedStorage"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RobloxReplicatedStorage"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE
                    | RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RobloxReplicatedStorage"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RocketPropulsion"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RocketPropulsion"),
                superclass: Some(Cow::Borrowed("BodyMover")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(
                        Cow::Borrowed("CartoonFactor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CartoonFactor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxThrust"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxThrust"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxTorque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Target"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Target"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetRadius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetRadius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ThrustD"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ThrustD"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ThrustP"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ThrustP"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TurnD"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TurnD"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TurnP"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TurnP"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("CartoonFactor"),
                        RbxValue::Float32 { value: 0.7 },
                    );
                    map.insert(Cow::Borrowed("MaxSpeed"), RbxValue::Float32 { value: 30.0 });
                    map.insert(
                        Cow::Borrowed("MaxThrust"),
                        RbxValue::Float32 { value: 4000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MaxTorque"),
                        RbxValue::Vector3 {
                            value: [400000.0, 400000.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RocketPropulsion"),
                        },
                    );
                    map.insert(Cow::Borrowed("Target"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("TargetOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetRadius"),
                        RbxValue::Float32 { value: 4.0 },
                    );
                    map.insert(Cow::Borrowed("ThrustD"), RbxValue::Float32 { value: 0.001 });
                    map.insert(Cow::Borrowed("ThrustP"), RbxValue::Float32 { value: 5.0 });
                    map.insert(Cow::Borrowed("TurnD"), RbxValue::Float32 { value: 500.0 });
                    map.insert(Cow::Borrowed("TurnP"), RbxValue::Float32 { value: 3000.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RodConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RodConstraint"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("CurrentDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Length"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Length"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Thickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Thickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Length"), RbxValue::Float32 { value: 5.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RodConstraint"),
                        },
                    );
                    map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 0.1 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RopeConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RopeConstraint"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("CurrentDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Length"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Length"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Restitution"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Thickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Thickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Length"), RbxValue::Float32 { value: 5.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RopeConstraint"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 0.1 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Rotate"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Rotate"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Rotate"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RotateP"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RotateP"),
                superclass: Some(Cow::Borrowed("DynamicRotate")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("BaseAngle"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RotateP"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RotateV"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RotateV"),
                superclass: Some(Cow::Borrowed("DynamicRotate")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("BaseAngle"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("RotateV"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RunService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RunService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Run Service"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("RunningAverageItemDouble"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RunningAverageItemDouble"),
                superclass: Some(Cow::Borrowed("StatsItem")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("RunningAverageItemInt"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RunningAverageItemInt"),
                superclass: Some(Cow::Borrowed("StatsItem")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("RunningAverageTimeIntervalItem"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RunningAverageTimeIntervalItem"),
                superclass: Some(Cow::Borrowed("StatsItem")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("RuntimeScriptService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("RuntimeScriptService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ScreenGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ScreenGui"),
                superclass: Some(Cow::Borrowed("LayerCollector")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("DisplayOrder"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DisplayOrder"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IgnoreGuiInset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IgnoreGuiInset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnTopOfCoreBlur"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OnTopOfCoreBlur"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("DisplayOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("IgnoreGuiInset"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ScreenGui"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnTopOfCoreBlur"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("ResetOnSpawn"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Script"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Script"),
                superclass: Some(Cow::Borrowed("BaseScript")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Source"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Source"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("LinkedSource"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Script"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Source"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ScriptContext"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ScriptContext"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("ScriptsDisabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScriptsDisabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Script Context"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ScriptDebugger"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ScriptDebugger"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("CurrentLine"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentLine"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsDebugging"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsDebugging"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsPaused"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsPaused"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Script"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Script"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ScriptService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ScriptService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ScrollingFrame"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ScrollingFrame"),
                superclass: Some(Cow::Borrowed("GuiObject")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(15);
                    map.insert(
                        Cow::Borrowed("AbsoluteWindowSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AbsoluteWindowSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BottomImage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BottomImage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CanvasPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CanvasPosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CanvasSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CanvasSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ElasticBehavior"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ElasticBehavior"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ElasticBehavior")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HorizontalScrollBarInset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HorizontalScrollBarInset"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScrollBarInset")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MidImage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MidImage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollBarImageColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScrollBarImageColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollBarImageTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScrollBarImageTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollBarThickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScrollBarThickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollingDirection"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScrollingDirection"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScrollingDirection")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollingEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScrollingEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopImage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TopImage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VerticalScrollBarInset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VerticalScrollBarInset"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScrollBarInset")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VerticalScrollBarPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VerticalScrollBarPosition"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "VerticalScrollBarPosition",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(40);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomImage"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/ui/Scroll/scroll-bottom.png"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CanvasPosition"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("CanvasSize"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 2.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("ElasticBehavior"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("HorizontalScrollBarInset"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("MidImage"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/ui/Scroll/scroll-middle.png"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ScrollingFrame"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("ScrollBarImageColor3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollBarImageTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollBarThickness"),
                        RbxValue::Float32 { value: 12.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollingDirection"),
                        RbxValue::Enum { value: 4 },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollingEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopImage"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/ui/Scroll/scroll-top.png"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("VerticalScrollBarInset"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("VerticalScrollBarPosition"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Seat"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Seat"),
                superclass: Some(Cow::Borrowed("Part")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Disabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Disabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Occupant"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Occupant"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(50);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Seat"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Selection"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Selection"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Selection"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SelectionBox"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SelectionBox"),
                superclass: Some(Cow::Borrowed("PVAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("LineThickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LineThickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SurfaceColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SurfaceColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SurfaceTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LineThickness"),
                        RbxValue::Float32 { value: 0.15 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SelectionBox"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceColor3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceTransparency"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SelectionLasso"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SelectionLasso"),
                superclass: Some(Cow::Borrowed("GuiBase3d")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Humanoid"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Humanoid"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("SelectionPartLasso"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SelectionPartLasso"),
                superclass: Some(Cow::Borrowed("SelectionLasso")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Part"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Part"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(Cow::Borrowed("Humanoid"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SelectionPartLasso"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SelectionPointLasso"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SelectionPointLasso"),
                superclass: Some(Cow::Borrowed("SelectionLasso")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Point"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Point"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(Cow::Borrowed("Humanoid"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SelectionPointLasso"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Point"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SelectionSphere"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SelectionSphere"),
                superclass: Some(Cow::Borrowed("PVAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("SurfaceColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SurfaceColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SurfaceColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SurfaceTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SelectionSphere"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceColor3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SurfaceTransparency"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ServerReplicator"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ServerReplicator"),
                superclass: Some(Cow::Borrowed("NetworkReplicator")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("ServerScriptService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ServerScriptService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("LoadStringEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LoadStringEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ServerScriptService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ServerStorage"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ServerStorage"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ServerStorage"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ServiceProvider"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ServiceProvider"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Shirt"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Shirt"),
                superclass: Some(Cow::Borrowed("Clothing")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("ShirtTemplate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShirtTemplate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Clothing"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShirtTemplate"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ShirtGraphic"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ShirtGraphic"),
                superclass: Some(Cow::Borrowed("CharacterAppearance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Graphic"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Graphic"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Graphic"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Shirt Graphic"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SkateboardController"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SkateboardController"),
                superclass: Some(Cow::Borrowed("Controller")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Steer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Steer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Throttle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Throttle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SkateboardController"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SkateboardPlatform"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SkateboardPlatform"),
                superclass: Some(Cow::Borrowed("Part")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("Controller"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Controller"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ControllingHumanoid"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ControllingHumanoid"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Steer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Steer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StickyWheels"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StickyWheels"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Throttle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Throttle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(52);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SkateboardPlatform"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Steer"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("StickyWheels"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("Throttle"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Skin"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Skin"),
                superclass: Some(Cow::Borrowed("CharacterAppearance")),
                tags: RbxInstanceTags::DEPRECATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("SkinColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SkinColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Skin"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Sky"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Sky"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("CelestialBodiesShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CelestialBodiesShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MoonAngularSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MoonAngularSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MoonTextureId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MoonTextureId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxBk"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SkyboxBk"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxDn"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SkyboxDn"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxFt"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SkyboxFt"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxLf"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SkyboxLf"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxRt"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SkyboxRt"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxUp"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SkyboxUp"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StarCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StarCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SunAngularSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SunAngularSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SunTextureId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SunTextureId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("CelestialBodiesShown"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("MoonAngularSize"),
                        RbxValue::Float32 { value: 11.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MoonTextureId"),
                        RbxValue::String {
                            value: String::from("rbxasset://sky/moon.jpg"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Sky"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxBk"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/sky/sky512_bk.tex"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxDn"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/sky/sky512_dn.tex"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxFt"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/sky/sky512_ft.tex"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxLf"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/sky/sky512_lf.tex"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxRt"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/sky/sky512_rt.tex"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SkyboxUp"),
                        RbxValue::String {
                            value: String::from("rbxasset://textures/sky/sky512_up.tex"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StarCount"),
                        RbxValue::Float32 { value: 3000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("SunAngularSize"),
                        RbxValue::Float32 { value: 21.0 },
                    );
                    map.insert(
                        Cow::Borrowed("SunTextureId"),
                        RbxValue::String {
                            value: String::from("rbxasset://sky/sun.jpg"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SlidingBallConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SlidingBallConstraint"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(
                        Cow::Borrowed("ActuatorType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ActuatorType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentPosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LimitsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LowerLimit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LowerLimit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxAcceleration"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MotorMaxAcceleration"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MotorMaxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MotorMaxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Restitution"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Restitution"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ServoMaxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ServoMaxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Speed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Speed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TargetPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetPosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UpperLimit"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UpperLimit"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Velocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Smoke"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Smoke"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Opacity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Opacity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("opacity_xml")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RiseVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RiseVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("riseVelocity_xml")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Size"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: Some(Cow::Borrowed("size_xml")),
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("opacity_xml"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("opacity_xml"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Opacity")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("riseVelocity_xml"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("riseVelocity_xml"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("RiseVelocity")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("size_xml"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("size_xml"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: false,
                            canonical_name: Some(Cow::Borrowed("Size")),
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Smoke"),
                        },
                    );
                    map.insert(Cow::Borrowed("Opacity"), RbxValue::Float32 { value: 0.5 });
                    map.insert(
                        Cow::Borrowed("RiseVelocity"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Snap"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Snap"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Snap"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SocialService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SocialService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SocialService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SolidModelContentProvider"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SolidModelContentProvider"),
                superclass: Some(Cow::Borrowed("CacheableContentProvider")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SolidModelContentProvider"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Sound"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Sound"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(19);
                    map.insert(
                        Cow::Borrowed("EmitterSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EmitterSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsLoaded"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsLoaded"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsPaused"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsPaused"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsPlaying"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsPlaying"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Looped"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Looped"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MinDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Pitch"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Pitch"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::DEPRECATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlayOnRemove"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlayOnRemove"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlaybackLoudness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlaybackLoudness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlaybackSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlaybackSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Playing"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Playing"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RollOffMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RollOffMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RollOffMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SoundGroup"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SoundGroup"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SoundId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SoundId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TimeLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TimeLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TimePosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TimePosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Volume"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Volume"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("isPlaying"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("isPlaying"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(14);
                    map.insert(
                        Cow::Borrowed("EmitterSize"),
                        RbxValue::Float32 { value: 10.0 },
                    );
                    map.insert(Cow::Borrowed("Looped"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("MaxDistance"),
                        RbxValue::Float32 { value: 10000.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MinDistance"),
                        RbxValue::Float32 { value: 10.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Sound"),
                        },
                    );
                    map.insert(Cow::Borrowed("Pitch"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("PlayOnRemove"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("PlaybackSpeed"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Playing"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("RollOffMode"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("SoundGroup"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("SoundId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TimePosition"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Volume"), RbxValue::Float32 { value: 0.5 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SoundEffect"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Priority"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Priority"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("SoundGroup"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SoundGroup"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Volume"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Volume"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SoundGroup"),
                        },
                    );
                    map.insert(Cow::Borrowed("Volume"), RbxValue::Float32 { value: 0.5 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SoundService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SoundService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("AmbientReverb"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AmbientReverb"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ReverbType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DistanceFactor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DistanceFactor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DopplerScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DopplerScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RespectFilteringEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RespectFilteringEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RolloffScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RolloffScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("AmbientReverb"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("DistanceFactor"),
                        RbxValue::Float32 { value: 3.33 },
                    );
                    map.insert(
                        Cow::Borrowed("DopplerScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SoundService"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RespectFilteringEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("RolloffScale"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Sparkles"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Sparkles"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SparkleColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SparkleColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0000001, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Sparkles"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SparkleColor"),
                        RbxValue::Color3 {
                            value: [0.5647059, 0.098039225, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SpawnLocation"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SpawnLocation"),
                superclass: Some(Cow::Borrowed("Part")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("AllowTeamChangeOnTouch"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllowTeamChangeOnTouch"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Duration"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Duration"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Neutral"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Neutral"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TeamColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TeamColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(53);
                    map.insert(
                        Cow::Borrowed("AllowTeamChangeOnTouch"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Duration"), RbxValue::Float32 { value: 10.0 });
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SpawnLocation"),
                        },
                    );
                    map.insert(Cow::Borrowed("Neutral"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SpawnerService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SpawnerService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("SpecialMesh"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SpecialMesh"),
                superclass: Some(Cow::Borrowed("FileMesh")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("MeshType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MeshType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("MeshType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(
                        Cow::Borrowed("MeshId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(Cow::Borrowed("MeshType"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Mesh"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Offset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Scale"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VertexColor"),
                        RbxValue::Vector3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SphereHandleAdornment"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SphereHandleAdornment"),
                superclass: Some(Cow::Borrowed("HandleAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Radius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Radius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SphereHandleAdornment"),
                        },
                    );
                    map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("SizeRelativeOffset"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: -1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SpotLight"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SpotLight"),
                superclass: Some(Cow::Borrowed("Light")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Angle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Angle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Face"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Face"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Range"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Range"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(Cow::Borrowed("Angle"), RbxValue::Float32 { value: 90.0 });
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SpotLight"),
                        },
                    );
                    map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 16.0 });
                    map.insert(Cow::Borrowed("Shadows"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SpringConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SpringConstraint"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(
                        Cow::Borrowed("Coils"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Coils"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Damping"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Damping"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FreeLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FreeLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LimitsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxForce"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MinLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Radius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Radius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Stiffness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Stiffness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Thickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Thickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(15);
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Coils"), RbxValue::Float32 { value: 3.0 });
                    map.insert(Cow::Borrowed("Damping"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("FreeLength"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LimitsEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("MaxForce"),
                        RbxValue::Float32 {
                            value: 1000000000.0,
                        },
                    );
                    map.insert(Cow::Borrowed("MaxLength"), RbxValue::Float32 { value: 5.0 });
                    map.insert(Cow::Borrowed("MinLength"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SpringConstraint"),
                        },
                    );
                    map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.4 });
                    map.insert(Cow::Borrowed("Stiffness"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 0.1 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StandardPages"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StandardPages"),
                superclass: Some(Cow::Borrowed("Pages")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("StarterCharacterScripts"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StarterCharacterScripts"),
                superclass: Some(Cow::Borrowed("StarterPlayerScripts")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("StarterCharacterScripts"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StarterGear"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StarterGear"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("StarterGear"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StarterGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StarterGui"),
                superclass: Some(Cow::Borrowed("BasePlayerGui")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("ProcessUserInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ProcessUserInput"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ResetPlayerGuiOnSpawn"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ResetPlayerGuiOnSpawn"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScreenOrientation"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScreenOrientation"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScreenOrientation")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShowDevelopmentGui"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShowDevelopmentGui"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("StarterGui"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ProcessUserInput"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("ResetPlayerGuiOnSpawn"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("ScreenOrientation"),
                        RbxValue::Enum { value: 2 },
                    );
                    map.insert(
                        Cow::Borrowed("ShowDevelopmentGui"),
                        RbxValue::Bool { value: true },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StarterPack"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StarterPack"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("StarterPack"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StarterPlayer"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StarterPlayer"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(36);
                    map.insert(
                        Cow::Borrowed("AllowCustomAnimations"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllowCustomAnimations"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AutoJumpEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoJumpEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMaxZoomDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraMaxZoomDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMinZoomDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraMinZoomDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CameraMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterJumpHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterJumpHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterJumpPower"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterJumpPower"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterMaxSlopeAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterMaxSlopeAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterUseJumpPower"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterUseJumpPower"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterWalkSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CharacterWalkSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevCameraOcclusionMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevCameraOcclusionMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevCameraOcclusionMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevComputerCameraMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevComputerCameraMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevComputerCameraMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevComputerMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevComputerMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevComputerMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevTouchCameraMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevTouchCameraMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevTouchCameraMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DevTouchMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DevTouchMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DevTouchMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EnableMouseLockOption"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EnableMouseLockOption"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDFace"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDFace"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDHead"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDHead"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDLeftArm"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDLeftArm"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDLeftLeg"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDLeftLeg"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDPants"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDPants"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDRightArm"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDRightArm"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDRightLeg"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDRightLeg"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDShirt"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDShirt"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDTeeShirt"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDTeeShirt"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDTorso"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAssetIDTorso"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAvatar"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsAvatar"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("GameAvatarType")),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsR15Collision"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsR15Collision"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("R15CollisionType")),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsScaleRangeBodyType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsScaleRangeBodyType"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsScaleRangeHead"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsScaleRangeHead"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsScaleRangeHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsScaleRangeHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsScaleRangeProportion"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsScaleRangeProportion"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsScaleRangeWidth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GameSettingsScaleRangeWidth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HealthDisplayDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HealthDisplayDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LoadCharacterAppearance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LoadCharacterAppearance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NameDisplayDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NameDisplayDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(32);
                    map.insert(
                        Cow::Borrowed("AllowCustomAnimations"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("AutoJumpEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMaxZoomDistance"),
                        RbxValue::Float32 { value: 400.0 },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMinZoomDistance"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("CameraMode"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("CharacterJumpHeight"),
                        RbxValue::Float32 { value: 7.2 },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterJumpPower"),
                        RbxValue::Float32 { value: 50.0 },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterMaxSlopeAngle"),
                        RbxValue::Float32 { value: 89.0 },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterUseJumpPower"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("CharacterWalkSpeed"),
                        RbxValue::Float32 { value: 16.0 },
                    );
                    map.insert(
                        Cow::Borrowed("DevCameraOcclusionMode"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("DevComputerCameraMovementMode"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("DevComputerMovementMode"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("DevTouchCameraMovementMode"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("DevTouchMovementMode"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("EnableMouseLockOption"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDFace"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDHead"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDLeftArm"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDLeftLeg"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDPants"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDRightArm"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDRightLeg"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDShirt"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDTeeShirt"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAssetIDTorso"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsAvatar"),
                        RbxValue::Enum { value: 1 },
                    );
                    map.insert(
                        Cow::Borrowed("GameSettingsR15Collision"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("HealthDisplayDistance"),
                        RbxValue::Float32 { value: 100.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LoadCharacterAppearance"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("StarterPlayer"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NameDisplayDistance"),
                        RbxValue::Float32 { value: 100.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StarterPlayerScripts"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StarterPlayerScripts"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("StarterPlayerScripts"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Stats"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Stats"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("ContactsCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ContactsCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataReceiveKbps"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataReceiveKbps"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DataSendKbps"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DataSendKbps"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeartbeatTimeMs"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeartbeatTimeMs"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("InstanceCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("InstanceCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MovingPrimitivesCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MovingPrimitivesCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PhysicsReceiveKbps"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PhysicsReceiveKbps"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PhysicsSendKbps"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PhysicsSendKbps"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PhysicsStepTimeMs"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PhysicsStepTimeMs"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PrimitivesCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PrimitivesCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Stats"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StatsItem"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StatsItem"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Status"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Status"),
                superclass: Some(Cow::Borrowed("Model")),
                tags: RbxInstanceTags::DEPRECATED | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("StopWatchReporter"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StopWatchReporter"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("StringValue"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StringValue"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Studio"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Studio"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_REPLICATED | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(75);
                    map.insert(
                        Cow::Borrowed("Always Save Script Changes"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Always Save Script Changes"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Animate Hover Over"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Animate Hover Over"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Attach Debugger To"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attach Debugger To"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "DEPRECATED_DebuggerDataModelPreference",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Auto Indent"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Auto Indent"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Auto-Recovery Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Auto-Recovery Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Auto-Recovery Interval (Minutes)"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Auto-Recovery Interval (Minutes)"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Auto-Recovery Path"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Auto-Recovery Path"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Auto-Save Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Auto-Save Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Auto-Save Interval (Minutes)"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Auto-Save Interval (Minutes)"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Auto-Save Path"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Auto-Save Path"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Background Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Background Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Basic Objects Display Mode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Basic Objects Display Mode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ListDisplayMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Built-in Function Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Built-in Function Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Camera Mouse Wheel Speed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Camera Mouse Wheel Speed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Camera Shift Speed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Camera Shift Speed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Camera Speed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Camera Speed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Camera Zoom to Mouse Position"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Camera Zoom to Mouse Position"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Clear Output On Start"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Clear Output On Start"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Comment Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Comment Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DefaultScriptFileDir"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DefaultScriptFileDir"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DeprecatedObjectsShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DeprecatedObjectsShown"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Device Pairing Code"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Device Pairing Code"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Disable Accurate Play Solo"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Disable Accurate Play Solo"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Drag Multiple Parts As Single Part"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Drag Multiple Parts As Single Part"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enable Autocomplete"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enable Autocomplete"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enable CoreScript Debugger"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enable CoreScript Debugger"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enable Intellisense"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enable Intellisense"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Error Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Error Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Find Selection Background Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Find Selection Background Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Font"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Font"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QFont")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Hover Animate Speed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Hover Animate Speed"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("HoverAnimateSpeed")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Hover Over Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Hover Over Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Import mesh files as single mesh"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Import mesh files as single mesh"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Keyword Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Keyword Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Language"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Language"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("LanguagePreference")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Line Thickness"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Line Thickness"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LuaDebuggerEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LuaDebuggerEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LuaDebuggerEnabledAtStartup"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LuaDebuggerEnabledAtStartup"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Matching Word Background Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Matching Word Background Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Maximum Output Lines"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Maximum Output Lines"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Number Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Number Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Only Play Audio from Window in Focus"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Only Play Audio from Window in Focus"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Operator Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Operator Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Output Font"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Output Font"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QFont")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Output Layout Mode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Output Layout Mode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("OutputLayoutMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverrideCoreScripts"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OverrideCoreScripts"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverrideCoreScriptsDir"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OverrideCoreScriptsDir"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PermissionLevelShown"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PermissionLevelShown"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "PermissionLevelShown",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PluginsDir"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PluginsDir"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Preprocessor Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Preprocessor Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RecentSavesDir"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RecentSavesDir"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Render Throttle Percentage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Render Throttle Percentage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Respect Studio shortcuts when game has focus"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Respect Studio shortcuts when game has focus"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RuntimeUndoBehavior"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RuntimeUndoBehavior"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RuntimeUndoBehavior")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScriptTimeoutLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScriptTimeoutLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Select Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Select Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Select/Hover Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Select/Hover Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Selection Background Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Selection Background Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Selection Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Selection Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Server Audio Behavior"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Server Audio Behavior"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ServerAudioBehavior")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show Core GUI in Explorer while Playing"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show Core GUI in Explorer while Playing"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show Diagnostics Bar"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show Diagnostics Bar"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show Hidden Objects in Explorer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show Hidden Objects in Explorer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show Hover Over"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show Hover Over"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show Navigation Mesh"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show Navigation Mesh"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show Plugin GUI Service in Explorer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show Plugin GUI Service in Explorer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show QT warnings in output"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show QT warnings in output"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Show plus button on hover in Explorer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Show plus button on hover in Explorer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("String Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("String Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Tab Width"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Tab Width"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Text Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text Wrapping"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Text Wrapping"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Theme"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Theme"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UI Theme"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UI Theme"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UITheme")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Warning Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Warning Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("StudioService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StudioService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("ActiveScript"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ActiveScript"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("StudioService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("StudioTheme"),
            RbxClassDescriptor {
                name: Cow::Borrowed("StudioTheme"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("SunRaysEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SunRaysEffect"),
                superclass: Some(Cow::Borrowed("PostEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Intensity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Intensity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Spread"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Spread"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Intensity"),
                        RbxValue::Float32 { value: 0.25 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SunRays"),
                        },
                    );
                    map.insert(Cow::Borrowed("Spread"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SurfaceGui"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SurfaceGui"),
                superclass: Some(Cow::Borrowed("LayerCollector")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("Active"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Active"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Adornee"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Adornee"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AlwaysOnTop"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CanvasSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CanvasSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClipsDescendants"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Face"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Face"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightInfluence"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ToolPunchThroughDistance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ToolPunchThroughDistance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ZOffset"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ZOffset"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(16);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("AlwaysOnTop"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("CanvasSize"),
                        RbxValue::Vector2 {
                            value: [800.0, 600.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SurfaceGui"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ResetOnSpawn"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("ToolPunchThroughDistance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("ZOffset"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SurfaceLight"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SurfaceLight"),
                superclass: Some(Cow::Borrowed("Light")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Angle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Angle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Face"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Face"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Range"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Range"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(Cow::Borrowed("Angle"), RbxValue::Float32 { value: 90.0 });
                    map.insert(
                        Cow::Borrowed("Brightness"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SurfaceLight"),
                        },
                    );
                    map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 16.0 });
                    map.insert(Cow::Borrowed("Shadows"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("SurfaceSelection"),
            RbxClassDescriptor {
                name: Cow::Borrowed("SurfaceSelection"),
                superclass: Some(Cow::Borrowed("PartAdornment")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("TargetSurface"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TargetSurface"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [0.050980397, 0.41176474, 0.6745098],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("SurfaceSelection"),
                        },
                    );
                    map.insert(Cow::Borrowed("TargetSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TaskScheduler"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TaskScheduler"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("SchedulerDutyCycle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SchedulerDutyCycle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SchedulerRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SchedulerRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ThreadPoolConfig"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ThreadPoolConfig"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ThreadPoolConfig")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ThreadPoolSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ThreadPoolSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Team"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Team"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("AutoAssignable"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoAssignable"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AutoColorCharacters"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoColorCharacters"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Score"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Score"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TeamColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TeamColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("AutoAssignable"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("AutoColorCharacters"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Team"),
                        },
                    );
                    map.insert(Cow::Borrowed("Score"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Teams"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Teams"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Teams"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TeleportService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TeleportService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("CustomizedTeleportUI"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CustomizedTeleportUI"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("CustomizedTeleportUI"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Teleport Service"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Terrain"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Terrain"),
                superclass: Some(Cow::Borrowed("BasePart")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("IsSmooth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsSmooth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaterialColors"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaterialColors"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BinaryString),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxExtents"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxExtents"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "Region3int16",
                            )),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaterColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WaterColor"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaterReflectance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WaterReflectance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaterTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WaterTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaterWaveSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WaterWaveSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WaterWaveSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WaterWaveSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("TerrainRegion"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TerrainRegion"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("IsSmooth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsSmooth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SizeInCells"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SizeInCells"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TerrainRegion"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TestService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TestService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("AutoRuns"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoRuns"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Description"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Description"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ErrorCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ErrorCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExecuteWithStudioRun"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ExecuteWithStudioRun"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Is30FpsThrottleEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Is30FpsThrottleEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsPhysicsEnvironmentalThrottled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsPhysicsEnvironmentalThrottled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsSleepAllowed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsSleepAllowed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NumberOfPlayers"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NumberOfPlayers"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SimulateSecondsLag"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SimulateSecondsLag"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TestCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TestCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Timeout"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Timeout"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WarnCount"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WarnCount"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(Cow::Borrowed("AutoRuns"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Description"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ExecuteWithStudioRun"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Is30FpsThrottleEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("IsPhysicsEnvironmentalThrottled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("IsSleepAllowed"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TestService"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NumberOfPlayers"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("SimulateSecondsLag"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Timeout"), RbxValue::Float32 { value: 10.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TextBox"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TextBox"),
                superclass: Some(Cow::Borrowed("GuiObject")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(27);
                    map.insert(
                        Cow::Borrowed("ClearTextOnFocus"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ClearTextOnFocus"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CursorPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CursorPosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Font"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Font"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Font")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FontSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FontSize"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FontSize")),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsPassword"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsPassword"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LineHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LineHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ManualFocusRelease"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ManualFocusRelease"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MultiLine"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MultiLine"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverlayNativeInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OverlayNativeInput"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlaceholderColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlaceholderColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlaceholderText"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlaceholderText"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ShowNativeInput"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ShowNativeInput"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Text"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextBounds"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextBounds"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextFits"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextFits"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextScaled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextScaled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextStrokeColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextStrokeTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextTruncate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextTruncate"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextTruncate")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextWrap"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextWrap"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextWrapped"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextWrapped"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextXAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextXAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextXAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextYAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextYAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextYAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(50);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClearTextOnFocus"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CursorPosition"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Font"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("FontSize"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("IsPassword"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LineHeight"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("ManualFocusRelease"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("MultiLine"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TextBox"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("OverlayNativeInput"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("PlaceholderColor3"),
                        RbxValue::Color3 {
                            value: [0.7, 0.7, 0.7],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PlaceholderText"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("ShowNativeInput"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxValue::String {
                            value: String::from("TextBox"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(Cow::Borrowed("TextScaled"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("TextSize"), RbxValue::Float32 { value: 8.0 });
                    map.insert(
                        Cow::Borrowed("TextStrokeColor3"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeTransparency"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TextTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("TextTruncate"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("TextWrap"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("TextWrapped"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("TextXAlignment"), RbxValue::Enum { value: 2 });
                    map.insert(Cow::Borrowed("TextYAlignment"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TextButton"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TextButton"),
                superclass: Some(Cow::Borrowed("GuiButton")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(19);
                    map.insert(
                        Cow::Borrowed("Font"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Font"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Font")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FontSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FontSize"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FontSize")),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LineHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LineHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LocalizedText"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LocalizedText"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Text"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextBounds"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextBounds"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextFits"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextFits"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextScaled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextScaled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextStrokeColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextStrokeTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextTruncate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextTruncate"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextTruncate")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextWrap"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextWrap"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextWrapped"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextWrapped"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextXAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextXAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextXAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextYAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextYAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextYAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(45);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoButtonColor"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Font"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("FontSize"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LineHeight"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Modal"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TextButton"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Selected"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxValue::String {
                            value: String::from("Button"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(Cow::Borrowed("TextScaled"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("TextSize"), RbxValue::Float32 { value: 8.0 });
                    map.insert(
                        Cow::Borrowed("TextStrokeColor3"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeTransparency"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TextTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("TextTruncate"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("TextWrap"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("TextWrapped"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("TextXAlignment"), RbxValue::Enum { value: 2 });
                    map.insert(Cow::Borrowed("TextYAlignment"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TextFilterResult"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TextFilterResult"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("TextLabel"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TextLabel"),
                superclass: Some(Cow::Borrowed("GuiLabel")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(19);
                    map.insert(
                        Cow::Borrowed("Font"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Font"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Font")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FontSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FontSize"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FontSize")),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LineHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LineHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LocalizedText"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LocalizedText"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Text"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextBounds"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextBounds"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextColor"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "BrickColor",
                            )),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextFits"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextFits"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextScaled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextScaled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextStrokeColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextStrokeTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextTruncate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextTruncate"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextTruncate")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextWrap"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextWrap"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextWrapped"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextWrapped"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextXAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextXAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextXAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextYAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextYAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextYAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(41);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Font"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("FontSize"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LineHeight"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TextLabel"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Text"),
                        RbxValue::String {
                            value: String::from("Label"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(Cow::Borrowed("TextScaled"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("TextSize"), RbxValue::Float32 { value: 8.0 });
                    map.insert(
                        Cow::Borrowed("TextStrokeColor3"),
                        RbxValue::Color3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextStrokeTransparency"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TextTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("TextTruncate"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("TextWrap"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("TextWrapped"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("TextXAlignment"), RbxValue::Enum { value: 2 });
                    map.insert(Cow::Borrowed("TextYAlignment"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TextService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TextService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TextService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Texture"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Texture"),
                superclass: Some(Cow::Borrowed("Decal")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("StudsPerTileU"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StudsPerTileU"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StudsPerTileV"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StudsPerTileV"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("Color3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Texture"),
                        },
                    );
                    map.insert(Cow::Borrowed("Shiny"), RbxValue::Float32 { value: 20.0 });
                    map.insert(Cow::Borrowed("Specular"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("StudsPerTileU"),
                        RbxValue::Float32 { value: 2.0 },
                    );
                    map.insert(
                        Cow::Borrowed("StudsPerTileV"),
                        RbxValue::Float32 { value: 2.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ThirdPartyUserService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ThirdPartyUserService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("TimerService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TimerService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Tool"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Tool"),
                superclass: Some(Cow::Borrowed("BackpackItem")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("CanBeDropped"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CanBeDropped"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Grip"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Grip"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripForward"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GripForward"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripPos"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GripPos"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripRight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GripRight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripUp"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GripUp"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ManualActivationOnly"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ManualActivationOnly"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RequiresHandle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RequiresHandle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ToolTip"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ToolTip"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("CanBeDropped"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Grip"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripForward"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, -1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripPos"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripRight"),
                        RbxValue::Vector3 {
                            value: [1.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GripUp"),
                        RbxValue::Vector3 {
                            value: [0.0, 1.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ManualActivationOnly"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Tool"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RequiresHandle"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("TextureId"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ToolTip"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Torque"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Torque"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("RelativeTo"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RelativeTo"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorRelativeTo")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Torque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Torque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(7);
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Torque"),
                        },
                    );
                    map.insert(Cow::Borrowed("RelativeTo"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Torque"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TotalCountTimeIntervalItem"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TotalCountTimeIntervalItem"),
                superclass: Some(Cow::Borrowed("StatsItem")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("TouchInputService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TouchInputService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TouchInputService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TouchTransmitter"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TouchTransmitter"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Trail"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Trail"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(15);
                    map.insert(
                        Cow::Borrowed("Attachment0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attachment0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Attachment1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Attachment1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Color"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::ColorSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FaceCamera"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FaceCamera"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Lifetime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Lifetime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightEmission"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightEmission"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LightInfluence"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MinLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Texture"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureLength"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureLength"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TextureMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextureMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Transparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("WidthScale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("WidthScale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(13);
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("FaceCamera"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Lifetime"), RbxValue::Float32 { value: 2.0 });
                    map.insert(
                        Cow::Borrowed("LightEmission"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LightInfluence"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("MaxLength"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("MinLength"), RbxValue::Float32 { value: 0.1 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Trail"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Texture"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TextureLength"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("TextureMode"), RbxValue::Enum { value: 0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Translator"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Translator"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("LocaleId"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LocaleId"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("TremoloSoundEffect"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TremoloSoundEffect"),
                superclass: Some(Cow::Borrowed("SoundEffect")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("Depth"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Depth"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Duty"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Duty"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Frequency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Frequency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("Depth"), RbxValue::Float32 { value: 1.0 });
                    map.insert(Cow::Borrowed("Duty"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Frequency"), RbxValue::Float32 { value: 5.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TremoloSoundEffect"),
                        },
                    );
                    map.insert(Cow::Borrowed("Priority"), RbxValue::Float32 { value: 0.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TriangleMeshPart"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TriangleMeshPart"),
                superclass: Some(Cow::Borrowed("BasePart")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("CollisionFidelity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CollisionFidelity"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CollisionFidelity")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("TrussPart"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TrussPart"),
                superclass: Some(Cow::Borrowed("BasePart")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Style"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Style"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Style")),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(48);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Truss"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [2.0, 2.0, 2.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 5 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Tween"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Tween"),
                superclass: Some(Cow::Borrowed("TweenBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Instance"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Instance"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TweenInfo"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TweenInfo"),
                            value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                                "TweenInfo",
                            )),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Tween"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("TweenBase"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TweenBase"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("PlaybackState"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PlaybackState"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PlaybackState")),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("TweenService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("TweenService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("TweenService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UIAspectRatioConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIAspectRatioConstraint"),
                superclass: Some(Cow::Borrowed("UIConstraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("AspectRatio"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AspectRatio"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AspectType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AspectType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AspectType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DominantAxis"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DominantAxis"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("DominantAxis")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("AspectRatio"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(Cow::Borrowed("AspectType"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("DominantAxis"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UIAspectRatioConstraint"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UIBase"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIBase"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("UIComponent"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIComponent"),
                superclass: Some(Cow::Borrowed("UIBase")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("UIConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIConstraint"),
                superclass: Some(Cow::Borrowed("UIComponent")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("UIGridLayout"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIGridLayout"),
                superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("CellPadding"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CellPadding"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CellSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CellSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FillDirectionMaxCells"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FillDirectionMaxCells"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StartCorner"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StartCorner"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("StartCorner")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("CellPadding"),
                        RbxValue::UDim2 {
                            value: (0.0, 5, 0.0, 5),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CellSize"),
                        RbxValue::UDim2 {
                            value: (0.0, 100, 0.0, 100),
                        },
                    );
                    map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FillDirectionMaxCells"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("HorizontalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UIGridLayout"),
                        },
                    );
                    map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("StartCorner"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("VerticalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UIGridStyleLayout"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIGridStyleLayout"),
                superclass: Some(Cow::Borrowed("UILayout")),
                tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
                properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("AbsoluteContentSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AbsoluteContentSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FillDirection"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FillDirection"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FillDirection")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HorizontalAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HorizontalAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("HorizontalAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SortOrder"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SortOrder"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SortOrder")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VerticalAlignment"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VerticalAlignment"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("VerticalAlignment")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("UILayout"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UILayout"),
                superclass: Some(Cow::Borrowed("UIComponent")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("UIListLayout"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIListLayout"),
                superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Padding"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Padding"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(6);
                    map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("HorizontalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UIListLayout"),
                        },
                    );
                    map.insert(Cow::Borrowed("Padding"), RbxValue::UDim { value: (0.0, 0) });
                    map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("VerticalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UIPadding"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIPadding"),
                superclass: Some(Cow::Borrowed("UIComponent")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("PaddingBottom"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PaddingBottom"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PaddingLeft"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PaddingLeft"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PaddingRight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PaddingRight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PaddingTop"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PaddingTop"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UIPadding"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PaddingBottom"),
                        RbxValue::UDim { value: (0.0, 0) },
                    );
                    map.insert(
                        Cow::Borrowed("PaddingLeft"),
                        RbxValue::UDim { value: (0.0, 0) },
                    );
                    map.insert(
                        Cow::Borrowed("PaddingRight"),
                        RbxValue::UDim { value: (0.0, 0) },
                    );
                    map.insert(
                        Cow::Borrowed("PaddingTop"),
                        RbxValue::UDim { value: (0.0, 0) },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UIPageLayout"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIPageLayout"),
                superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(10);
                    map.insert(
                        Cow::Borrowed("Animated"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Animated"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Circular"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Circular"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentPage"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentPage"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EasingDirection"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EasingDirection"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("EasingDirection")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("EasingStyle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("EasingStyle"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("EasingStyle")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GamepadInputEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GamepadInputEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Padding"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Padding"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ScrollWheelInputEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ScrollWheelInputEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TouchInputEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TouchInputEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TweenTime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TweenTime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(14);
                    map.insert(Cow::Borrowed("Animated"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("Circular"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("EasingDirection"),
                        RbxValue::Enum { value: 1 },
                    );
                    map.insert(Cow::Borrowed("EasingStyle"), RbxValue::Enum { value: 2 });
                    map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("GamepadInputEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("HorizontalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UIPageLayout"),
                        },
                    );
                    map.insert(Cow::Borrowed("Padding"), RbxValue::UDim { value: (0.0, 0) });
                    map.insert(
                        Cow::Borrowed("ScrollWheelInputEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TouchInputEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(Cow::Borrowed("TweenTime"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("VerticalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UIScale"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UIScale"),
                superclass: Some(Cow::Borrowed("UIComponent")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Scale"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Scale"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UIScale"),
                        },
                    );
                    map.insert(Cow::Borrowed("Scale"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UISizeConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UISizeConstraint"),
                superclass: Some(Cow::Borrowed("UIConstraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("MaxSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MinSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("MaxSize"),
                        RbxValue::Vector2 {
                            value: [1000000000.0, 1000000000.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinSize"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UISizeConstraint"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UITableLayout"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UITableLayout"),
                superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("FillEmptySpaceColumns"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FillEmptySpaceColumns"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FillEmptySpaceRows"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FillEmptySpaceRows"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MajorAxis"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MajorAxis"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TableMajorAxis")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Padding"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Padding"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("FillEmptySpaceColumns"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("FillEmptySpaceRows"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("HorizontalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map.insert(Cow::Borrowed("MajorAxis"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UITableLayout"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Padding"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("VerticalAlignment"),
                        RbxValue::Enum { value: 1 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UITextSizeConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UITextSizeConstraint"),
                superclass: Some(Cow::Borrowed("UIConstraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("MaxTextSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxTextSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MinTextSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MinTextSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("MaxTextSize"),
                        RbxValue::Float32 { value: 100.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MinTextSize"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("UITextSizeConstraint"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UnionOperation"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UnionOperation"),
                superclass: Some(Cow::Borrowed("PartOperation")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(49);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Union"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("UsePartColor"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UserGameSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UserGameSettings"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(36);
                    map.insert(
                        Cow::Borrowed("AllTutorialsDisabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllTutorialsDisabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CustomCameraMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CameraYInverted"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CameraYInverted"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ChatVisible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ChatVisible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ComputerCameraMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ComputerCameraMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "ComputerCameraMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ComputerMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ComputerMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "ComputerMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ControlMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ControlMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ControlMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Fullscreen"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Fullscreen"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GamepadCameraSensitivity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GamepadCameraSensitivity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HasEverUsedVR"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HasEverUsedVR"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsUsingCameraYInverted"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsUsingCameraYInverted"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("IsUsingGamepadCameraSensitivity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("IsUsingGamepadCameraSensitivity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MasterVolume"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MasterVolume"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MicroProfilerWebServerEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MicroProfilerWebServerEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MicroProfilerWebServerIP"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MicroProfilerWebServerIP"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MicroProfilerWebServerPort"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MicroProfilerWebServerPort"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::HIDDEN
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MouseSensitivity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MouseSensitivity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MouseSensitivityFirstPerson"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MouseSensitivityFirstPerson"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MouseSensitivityThirdPerson"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MouseSensitivityThirdPerson"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnScreenProfilerEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OnScreenProfilerEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnboardingsCompleted"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OnboardingsCompleted"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("PerformanceStatsVisible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("PerformanceStatsVisible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RCCProfilerRecordFrameRate"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RCCProfilerRecordFrameRate"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RCCProfilerRecordTimeFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RCCProfilerRecordTimeFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RotationType"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RotationType"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RotationType")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SavedQualityLevel"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SavedQualityLevel"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SavedQualitySetting")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StartMaximized"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StartMaximized"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StartScreenPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StartScreenPosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StartScreenSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StartScreenSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TouchCameraMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TouchCameraMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "TouchCameraMovementMode",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TouchMovementMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TouchMovementMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TouchMovementMode")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UsedCoreGuiIsVisibleToggle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UsedCoreGuiIsVisibleToggle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UsedCustomGuiIsVisibleToggle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UsedCustomGuiIsVisibleToggle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UsedHideHudShortcut"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UsedHideHudShortcut"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VREnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VREnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VRRotationIntensity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VRRotationIntensity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("UserInputService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UserInputService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(23);
                    map.insert(
                        Cow::Borrowed("AccelerometerEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AccelerometerEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BottomBarSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("BottomBarSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GamepadEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GamepadEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GazeSelectionEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GazeSelectionEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("GyroscopeEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GyroscopeEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("KeyboardEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("KeyboardEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("LegacyInputEventsEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("LegacyInputEventsEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ModalEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ModalEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MouseBehavior"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MouseBehavior"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("MouseBehavior")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MouseDeltaSensitivity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MouseDeltaSensitivity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MouseEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MouseEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MouseIconEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MouseIconEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NavBarSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("NavBarSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnScreenKeyboardAnimationDuration"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OnScreenKeyboardAnimationDuration"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnScreenKeyboardPosition"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OnScreenKeyboardPosition"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnScreenKeyboardSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OnScreenKeyboardSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OnScreenKeyboardVisible"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OnScreenKeyboardVisible"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverrideMouseIconBehavior"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("OverrideMouseIconBehavior"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                                "OverrideMouseIconBehavior",
                            )),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RightBarSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RightBarSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StatusBarSize"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StatusBarSize"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TouchEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TouchEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("UserHeadCFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("UserHeadCFrame"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                            tags: RbxPropertyTags::DEPRECATED
                                | RbxPropertyTags::NOT_REPLICATED
                                | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VREnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VREnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("GazeSelectionEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("LegacyInputEventsEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("ModalEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("MouseBehavior"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("MouseDeltaSensitivity"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("MouseIconEnabled"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("OverrideMouseIconBehavior"),
                        RbxValue::Enum { value: 0 },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("UserSettings"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UserSettings"),
                superclass: Some(Cow::Borrowed("GenericSettings")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("UserStorageService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("UserStorageService"),
                superclass: Some(Cow::Borrowed("LocalStorageService")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("VRService"),
            RbxClassDescriptor {
                name: Cow::Borrowed("VRService"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("GuiInputUserCFrame"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("GuiInputUserCFrame"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UserCFrame")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VRDeviceName"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VRDeviceName"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("VREnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("VREnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("GuiInputUserCFrame"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("VRService"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ValueBase"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ValueBase"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE,
                properties: HashMap::new(),
                default_properties: HashMap::new(),
            },
        );
        map.insert(
            Cow::Borrowed("Vector3Value"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Vector3Value"),
                superclass: Some(Cow::Borrowed("ValueBase")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Value"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Value"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Value"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("VectorForce"),
            RbxClassDescriptor {
                name: Cow::Borrowed("VectorForce"),
                superclass: Some(Cow::Borrowed("Constraint")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("ApplyAtCenterOfMass"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ApplyAtCenterOfMass"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Force"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Force"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RelativeTo"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("RelativeTo"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorRelativeTo")),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(8);
                    map.insert(
                        Cow::Borrowed("ApplyAtCenterOfMass"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Force"),
                        RbxValue::Vector3 {
                            value: [1000.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("VectorForce"),
                        },
                    );
                    map.insert(Cow::Borrowed("RelativeTo"), RbxValue::Enum { value: 0 });
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("VehicleController"),
            RbxClassDescriptor {
                name: Cow::Borrowed("VehicleController"),
                superclass: Some(Cow::Borrowed("Controller")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("VehicleSeat"),
            RbxClassDescriptor {
                name: Cow::Borrowed("VehicleSeat"),
                superclass: Some(Cow::Borrowed("BasePart")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(11);
                    map.insert(
                        Cow::Borrowed("AreHingesDetected"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AreHingesDetected"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Disabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Disabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("HeadsUpDisplay"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("HeadsUpDisplay"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Occupant"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Occupant"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Steer"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Steer"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("SteerFloat"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("SteerFloat"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Throttle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Throttle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ThrottleFloat"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ThrottleFloat"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Torque"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Torque"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TurnSpeed"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TurnSpeed"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(56);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("HeadsUpDisplay"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(Cow::Borrowed("MaxSpeed"), RbxValue::Float32 { value: 25.0 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("VehicleSeat"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(Cow::Borrowed("Steer"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("SteerFloat"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Throttle"), RbxValue::Float32 { value: 0.0 });
                    map.insert(
                        Cow::Borrowed("ThrottleFloat"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(Cow::Borrowed("Torque"), RbxValue::Float32 { value: 10.0 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("TurnSpeed"), RbxValue::Float32 { value: 1.0 });
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("VelocityMotor"),
            RbxClassDescriptor {
                name: Cow::Borrowed("VelocityMotor"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("CurrentAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DesiredAngle"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DesiredAngle"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Hole"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Hole"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("MaxVelocity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("MaxVelocity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("DesiredAngle"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Hole"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("MaxVelocity"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("VelocityMotor"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("ViewportFrame"),
            RbxClassDescriptor {
                name: Cow::Borrowed("ViewportFrame"),
                superclass: Some(Cow::Borrowed("GuiObject")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(3);
                    map.insert(
                        Cow::Borrowed("CurrentCamera"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentCamera"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageColor3"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageColor3"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageTransparency"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("ImageTransparency"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(29);
                    map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("AnchorPoint"),
                        RbxValue::Vector2 { value: [0.0, 0.0] },
                    );
                    map.insert(
                        Cow::Borrowed("AutoLocalize"),
                        RbxValue::Bool { value: true },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundColor3"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BackgroundTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("BorderColor3"),
                        RbxValue::Color3 {
                            value: [0.10588236, 0.16470589, 0.20784315],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("BorderSizePixel"),
                        RbxValue::Float32 { value: 1.0 },
                    );
                    map.insert(
                        Cow::Borrowed("ClipsDescendants"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentCamera"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("ImageColor3"),
                        RbxValue::Color3 {
                            value: [1.0, 1.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("ImageTransparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("LayoutOrder"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("ViewportFrame"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionDown"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionLeft"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionRight"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("NextSelectionUp"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("RootLocalizationTable"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
                    map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("SelectionImageObject"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::UDim2 {
                            value: (0.0, 0, 0.0, 0),
                        },
                    );
                    map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("ZIndex"), RbxValue::Float32 { value: 1.0 });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("VirtualInputManager"),
            RbxClassDescriptor {
                name: Cow::Borrowed("VirtualInputManager"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("AdditionalLuaState"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AdditionalLuaState"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(2);
                    map.insert(
                        Cow::Borrowed("AdditionalLuaState"),
                        RbxValue::String {
                            value: String::from(""),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("VirtualInputManager"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("VirtualUser"),
            RbxClassDescriptor {
                name: Cow::Borrowed("VirtualUser"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Instance"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Visit"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Visit"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::NOT_CREATABLE
                    | RbxInstanceTags::NOT_REPLICATED
                    | RbxInstanceTags::SERVICE,
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(1);
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Visit"),
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("WedgePart"),
            RbxClassDescriptor {
                name: Cow::Borrowed("WedgePart"),
                superclass: Some(Cow::Borrowed("FormFactorPart")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(48);
                    map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
                    map.insert(
                        Cow::Borrowed("BackParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BackParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("BackSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("BottomParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
                    map.insert(
                        Cow::Borrowed("BottomSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("CFrame"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
                    map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("CollisionGroupId"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Color"),
                        RbxValue::Color3 {
                            value: [0.6392157, 0.63529414, 0.64705884],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CustomPhysicalProperties"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("Elasticity"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
                    map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
                    map.insert(
                        Cow::Borrowed("FrontParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("FrontParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("FrontSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("LeftParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("LeftSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("LocalTransparencyModifier"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
                    map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Wedge"),
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Orientation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Position"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Reflectance"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(
                        Cow::Borrowed("RightParamB"),
                        RbxValue::Float32 { value: 0.5 },
                    );
                    map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("RightSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("RootPriority"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("RotVelocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Rotation"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Size"),
                        RbxValue::Vector3 {
                            value: [4.0, 1.2, 2.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TopParamA"),
                        RbxValue::Float32 { value: -0.5 },
                    );
                    map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
                    map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
                    map.insert(
                        Cow::Borrowed("TopSurfaceInput"),
                        RbxValue::Enum { value: 0 },
                    );
                    map.insert(
                        Cow::Borrowed("Transparency"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("Velocity"),
                        RbxValue::Vector3 {
                            value: [0.0, 0.0, 0.0],
                        },
                    );
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Weld"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Weld"),
                superclass: Some(Cow::Borrowed("JointInstance")),
                tags: RbxInstanceTags::empty(),
                properties: HashMap::new(),
                default_properties: {
                    let mut map = HashMap::with_capacity(5);
                    map.insert(
                        Cow::Borrowed("C0"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("C1"),
                        RbxValue::CFrame {
                            value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Weld"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("WeldConstraint"),
            RbxClassDescriptor {
                name: Cow::Borrowed("WeldConstraint"),
                superclass: Some(Cow::Borrowed("Instance")),
                tags: RbxInstanceTags::empty(),
                properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(
                        Cow::Borrowed("Active"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Active"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Enabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Enabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Part0"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Part0"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Part1"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Part1"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(4);
                    map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("WeldConstraint"),
                        },
                    );
                    map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
                    map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
                    map
                },
            },
        );
        map.insert(
            Cow::Borrowed("Workspace"),
            RbxClassDescriptor {
                name: Cow::Borrowed("Workspace"),
                superclass: Some(Cow::Borrowed("Model")),
                tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
                properties: {
                    let mut map = HashMap::with_capacity(12);
                    map.insert(
                        Cow::Borrowed("AllowThirdPartySales"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AllowThirdPartySales"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("AutoJointsMode"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("AutoJointsMode"),
                            value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AutoJointsMode")),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentCamera"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("CurrentCamera"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("DistributedGameTime"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("DistributedGameTime"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                            tags: RbxPropertyTags::NOT_REPLICATED,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FallenPartsDestroyHeight"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FallenPartsDestroyHeight"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("FilteringEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("FilteringEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Gravity"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Gravity"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StreamingEnabled"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StreamingEnabled"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::empty(),
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::ReadWrite,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StreamingMinRadius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StreamingMinRadius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("StreamingTargetRadius"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("StreamingTargetRadius"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                            tags: RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: true,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("TemporaryLegacyPhysicsSolverOverride"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("TemporaryLegacyPhysicsSolverOverride"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::None,
                            serializes: false,
                        },
                    );
                    map.insert(
                        Cow::Borrowed("Terrain"),
                        RbxPropertyDescriptor {
                            name: Cow::Borrowed("Terrain"),
                            value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                            tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                            is_canonical: true,
                            canonical_name: None,
                            serialized_name: None,
                            scriptability: RbxPropertyScriptability::Read,
                            serializes: false,
                        },
                    );
                    map
                },
                default_properties: {
                    let mut map = HashMap::with_capacity(9);
                    map.insert(
                        Cow::Borrowed("AllowThirdPartySales"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(
                        Cow::Borrowed("CurrentCamera"),
                        RbxValue::Ref { value: None },
                    );
                    map.insert(
                        Cow::Borrowed("DistributedGameTime"),
                        RbxValue::Float32 { value: 0.0 },
                    );
                    map.insert(
                        Cow::Borrowed("FallenPartsDestroyHeight"),
                        RbxValue::Float32 { value: -500.0 },
                    );
                    map.insert(
                        Cow::Borrowed("FilteringEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map.insert(Cow::Borrowed("Gravity"), RbxValue::Float32 { value: 196.2 });
                    map.insert(
                        Cow::Borrowed("Name"),
                        RbxValue::String {
                            value: String::from("Workspace"),
                        },
                    );
                    map.insert(Cow::Borrowed("PrimaryPart"), RbxValue::Ref { value: None });
                    map.insert(
                        Cow::Borrowed("StreamingEnabled"),
                        RbxValue::Bool { value: false },
                    );
                    map
                },
            },
        );
        map
    }
}
