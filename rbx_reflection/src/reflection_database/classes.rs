// This file is automatically @generated.
#![allow(clippy::approx_constant, clippy::unreadable_literal)]
use crate::reflection_types::*;
use rbx_dom_weak::{
    BrickColor, ColorSequence, ColorSequenceKeypoint, NumberSequence, NumberSequenceKeypoint,
    RbxValue, RbxValueType, Rect,
};
use std::{borrow::Cow, collections::HashMap};
fn generate_image_button() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ImageButton"),
        superclass: Some(Cow::Borrowed("GuiButton")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("HoverImage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HoverImage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Image"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Image"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageRectOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageRectOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageRectSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageRectSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsLoaded"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLoaded"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PressedImage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PressedImage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScaleType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScaleType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScaleType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SliceCenter"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SliceCenter"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Rect),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SliceScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SliceScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TileSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TileSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(44);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoButtonColor"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("HoverImage"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Image"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("ImageColor3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("ImageRectOffset"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("ImageRectSize"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("ImageTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Modal"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ImageButton"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("PressedImage"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("ScaleType"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Selected"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("SliceCenter"),
                RbxValue::Rect {
                    value: Rect {
                        min: (0.0, 0.0),
                        max: (0.0, 0.0),
                    },
                },
            );
            map.insert(
                Cow::Borrowed("SliceScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TileSize"),
                RbxValue::UDim2 {
                    value: (1.0, 0, 1.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_spot_light() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SpotLight"),
        superclass: Some(Cow::Borrowed("Light")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Angle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Angle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Face"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Face"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Range"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Range"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(Cow::Borrowed("Angle"), RbxValue::Float32 { value: 90.0 });
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SpotLight"),
                },
            );
            map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 16.0 });
            map.insert(Cow::Borrowed("Shadows"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_pants() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Pants"),
        superclass: Some(Cow::Borrowed("Clothing")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("PantsTemplate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PantsTemplate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Clothing"),
                },
            );
            map.insert(
                Cow::Borrowed("PantsTemplate"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_spring_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SpringConstraint"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(
                Cow::Borrowed("Coils"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Coils"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Damping"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Damping"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FreeLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FreeLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LimitsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MinLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MinLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Radius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Radius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Stiffness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Stiffness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Thickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Thickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(16);
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Coils"), RbxValue::Float32 { value: 3.0 });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(200).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Damping"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("FreeLength"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(Cow::Borrowed("MaxLength"), RbxValue::Float32 { value: 5.0 });
            map.insert(Cow::Borrowed("MinLength"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SpringConstraint"),
                },
            );
            map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.4 });
            map.insert(Cow::Borrowed("Stiffness"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 0.1 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_server_script_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ServerScriptService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("LoadStringEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LoadStringEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ServerScriptService"),
                },
            );
            map
        },
    };
}
fn generate_vr_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VRService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("GuiInputUserCFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GuiInputUserCFrame"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UserCFrame")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("VRDeviceName"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VRDeviceName"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("VREnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VREnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("GuiInputUserCFrame"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("VRService"),
                },
            );
            map
        },
    };
}
fn generate_browser_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BrowserService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_rod_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RodConstraint"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("CurrentDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Length"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Length"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Thickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Thickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Length"), RbxValue::Float32 { value: 5.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RodConstraint"),
                },
            );
            map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 0.1 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_file_mesh() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FileMesh"),
        superclass: Some(Cow::Borrowed("DataModelMesh")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("MeshId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MeshId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("MeshId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Mesh"),
                },
            );
            map.insert(
                Cow::Borrowed("Offset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Scale"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("TextureId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("VertexColor"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map
        },
    };
}
fn generate_debris() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Debris"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("MaxItems"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxItems"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(Cow::Borrowed("MaxItems"), RbxValue::Int32 { value: 1000 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Debris"),
                },
            );
            map
        },
    };
}
fn generate_network_replicator() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NetworkReplicator"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Part"),
        superclass: Some(Cow::Borrowed("FormFactorPart")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Shape"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Shape"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PartType")),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("shape")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("shape"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("shape"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PartType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Shape")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(49);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Part"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_vehicle_seat() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VehicleSeat"),
        superclass: Some(Cow::Borrowed("BasePart")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(
                Cow::Borrowed("AreHingesDetected"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreHingesDetected"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Disabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Disabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HeadsUpDisplay"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeadsUpDisplay"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Occupant"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Occupant"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Steer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Steer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SteerFloat"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SteerFloat"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Throttle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Throttle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ThrottleFloat"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ThrottleFloat"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Torque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Torque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TurnSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TurnSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(56);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("HeadsUpDisplay"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(Cow::Borrowed("MaxSpeed"), RbxValue::Float32 { value: 25.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("VehicleSeat"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(Cow::Borrowed("Steer"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("SteerFloat"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Throttle"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("ThrottleFloat"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("Torque"), RbxValue::Float32 { value: 10.0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("TurnSpeed"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_plugin_menu() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginMenu"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Icon"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Icon"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Title"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Title"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_reflection_metadata_classes() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataClasses"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_service_provider() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ServiceProvider"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_stop_watch_reporter() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StopWatchReporter"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_model() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Model"),
        superclass: Some(Cow::Borrowed("PVInstance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("PrimaryPart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrimaryPart"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Model"),
                },
            );
            map.insert(Cow::Borrowed("PrimaryPart"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_teleport_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TeleportService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("CustomizedTeleportUI"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CustomizedTeleportUI"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("CustomizedTeleportUI"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Teleport Service"),
                },
            );
            map
        },
    };
}
fn generate_collection_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CollectionService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CollectionService"),
                },
            );
            map
        },
    };
}
fn generate_google_analytics_configuration() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GoogleAnalyticsConfiguration"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_local_storage_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LocalStorageService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_vector3_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Vector3Value"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_network_server() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NetworkServer"),
        superclass: Some(Cow::Borrowed("NetworkPeer")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Port"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Port"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_content_provider() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ContentProvider"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("BaseUrl"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BaseUrl"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RequestQueueSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RequestQueueSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ContentProvider"),
                },
            );
            map
        },
    };
}
fn generate_body_thrust() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyThrust"),
        superclass: Some(Cow::Borrowed("BodyMover")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Force"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Force"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Location"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Location"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("force"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("force"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Force")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("location"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("location"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Location")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Force"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Location"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BodyThrust"),
                },
            );
            map
        },
    };
}
fn generate_no_collision_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NoCollisionConstraint"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Part0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Part0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Part1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Part1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("NoCollisionConstraint"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_parabola_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ParabolaAdornment"),
        superclass: Some(Cow::Borrowed("PVAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("A"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("A"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("B"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("B"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("C"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("C"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Range"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Range"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Thickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Thickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(Cow::Borrowed("A"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("B"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("C"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(1).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.9490197, 0.95294124, 0.95294124],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ParabolaAdornment"),
                },
            );
            map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_feature() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Feature"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("FaceId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FaceId"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("InOut"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InOut"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InOut")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftRight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftRight"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("LeftRight")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TopBottom"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TopBottom"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TopBottom")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_inventory_pages() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("InventoryPages"),
        superclass: Some(Cow::Borrowed("Pages")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_physics_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PhysicsService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("PhysicsService"),
                },
            );
            map
        },
    };
}
fn generate_pose() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Pose"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EasingDirection"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EasingDirection"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "PoseEasingDirection",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EasingStyle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EasingStyle"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PoseEasingStyle")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaskWeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaskWeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Weight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Weight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("EasingDirection"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("EasingStyle"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("MaskWeight"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Pose"),
                },
            );
            map.insert(Cow::Borrowed("Weight"), RbxValue::Float32 { value: 1.0 });
            map
        },
    };
}
fn generate_context_action_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ContextActionService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ContextActionService"),
                },
            );
            map
        },
    };
}
fn generate_dialog() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Dialog"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("BehaviorType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BehaviorType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DialogBehaviorType",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ConversationDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ConversationDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GoodbyeChoiceActive"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GoodbyeChoiceActive"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GoodbyeDialog"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GoodbyeDialog"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("InUse"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InUse"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("InitialPrompt"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InitialPrompt"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Purpose"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Purpose"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("DialogPurpose")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Tone"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Tone"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("DialogTone")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TriggerDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TriggerDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TriggerOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TriggerOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(Cow::Borrowed("BehaviorType"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("ConversationDistance"),
                RbxValue::Float32 { value: 25.0 },
            );
            map.insert(
                Cow::Borrowed("GoodbyeChoiceActive"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("GoodbyeDialog"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("InUse"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("InitialPrompt"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Dialog"),
                },
            );
            map.insert(Cow::Borrowed("Purpose"), RbxValue::Enum { value: 1 });
            map.insert(Cow::Borrowed("Tone"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TriggerDistance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("TriggerOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_motor() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Motor"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("CurrentAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DesiredAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DesiredAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("CurrentAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("DesiredAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("MaxVelocity"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Motor"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_reflection_metadata_item() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataItem"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("Browsable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Browsable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClassCategory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClassCategory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClientOnly"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClientOnly"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Constraint"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Constraint"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Deprecated"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Deprecated"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EditingDisabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EditingDisabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsBackend"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsBackend"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScriptContext"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScriptContext"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ServerOnly"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ServerOnly"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UIMaximum"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UIMaximum"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UIMinimum"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UIMinimum"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UINumTicks"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UINumTicks"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("summary"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("summary"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_generic_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GenericSettings"),
        superclass: Some(Cow::Borrowed("ServiceProvider")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_velocity_motor() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VelocityMotor"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("CurrentAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DesiredAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DesiredAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Hole"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Hole"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("CurrentAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("DesiredAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Hole"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("MaxVelocity"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("VelocityMotor"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_replicated_storage() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReplicatedStorage"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ReplicatedStorage"),
                },
            );
            map
        },
    };
}
fn generate_configuration() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Configuration"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Configuration"),
                },
            );
            map
        },
    };
}
fn generate_cylindrical_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CylindricalConstraint"),
        superclass: Some(Cow::Borrowed("SlidingBallConstraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(15);
            map.insert(
                Cow::Borrowed("AngularActuatorType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularActuatorType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AngularLimitsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularLimitsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AngularRestitution"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularRestitution"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AngularSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("InclinationAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InclinationAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LowerAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LowerAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxAngularAcceleration"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MotorMaxAngularAcceleration"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MotorMaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RotationAxisVisible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RotationAxisVisible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ServoMaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ServoMaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TargetAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UpperAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UpperAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WorldRotationAxis"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WorldRotationAxis"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(31);
            map.insert(Cow::Borrowed("ActuatorType"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("AngularActuatorType"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("AngularLimitsEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("AngularRestitution"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("AngularSpeed"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(1009).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("InclinationAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("LowerAngle"),
                RbxValue::Float32 { value: -45.0 },
            );
            map.insert(
                Cow::Borrowed("LowerLimit"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("MotorMaxAcceleration"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxAngularAcceleration"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxForce"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("MotorMaxTorque"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CylindricalConstraint"),
                },
            );
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RotationAxisVisible"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("ServoMaxForce"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("ServoMaxTorque"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 0.15 });
            map.insert(Cow::Borrowed("Speed"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("TargetAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("TargetPosition"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("UpperAngle"),
                RbxValue::Float32 { value: 45.0 },
            );
            map.insert(
                Cow::Borrowed("UpperLimit"),
                RbxValue::Float32 { value: 5.0 },
            );
            map.insert(Cow::Borrowed("Velocity"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_skateboard_controller() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SkateboardController"),
        superclass: Some(Cow::Borrowed("Controller")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Steer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Steer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Throttle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Throttle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SkateboardController"),
                },
            );
            map
        },
    };
}
fn generate_terrain() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Terrain"),
        superclass: Some(Cow::Borrowed("BasePart")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("IsSmooth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsSmooth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MaterialColors"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaterialColors"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BinaryString),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxExtents"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxExtents"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                        "Region3int16",
                    )),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WaterColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WaterColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WaterReflectance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WaterReflectance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WaterTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WaterTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WaterWaveSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WaterWaveSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WaterWaveSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WaterWaveSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_reflection_metadata_enum() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataEnum"),
        superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(14);
            map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("ClassCategory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Constraint"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("EditingDisabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map.insert(
                Cow::Borrowed("ScriptContext"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float64 { value: 0.0 });
            map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float64 { value: 0.0 });
            map.insert(
                Cow::Borrowed("UINumTicks"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("summary"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_change_history_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ChangeHistoryService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ChangeHistoryService"),
                },
            );
            map
        },
    };
}
fn generate_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SoundEffect"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Priority"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Priority"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_plugin_toolbar() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginToolbar"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_image_handle_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ImageHandleAdornment"),
        superclass: Some(Cow::Borrowed("HandleAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Image"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Image"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(1).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.9490197, 0.95294124, 0.95294124],
                },
            );
            map.insert(
                Cow::Borrowed("Image"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/SurfacesDefault.png"),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ImageHandleAdornment"),
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector2 { value: [1.0, 1.0] },
            );
            map.insert(
                Cow::Borrowed("SizeRelativeOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: -1 });
            map
        },
    };
}
fn generate_blur_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BlurEffect"),
        superclass: Some(Cow::Borrowed("PostEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Blur"),
                },
            );
            map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 24.0 });
            map
        },
    };
}
fn generate_humanoid_controller() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HumanoidController"),
        superclass: Some(Cow::Borrowed("Controller")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_local_script() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LocalScript"),
        superclass: Some(Cow::Borrowed("Script")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("LinkedSource"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("LocalScript"),
                },
            );
            map.insert(
                Cow::Borrowed("Source"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_brick_color_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BrickColorValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map
        },
    };
}
fn generate_folder() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Folder"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Folder"),
                },
            );
            map
        },
    };
}
fn generate_attachment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Attachment"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("Axis"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Axis"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Orientation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Rotation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SecondaryAxis"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SecondaryAxis"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Visible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Visible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WorldAxis"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WorldAxis"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WorldCFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WorldCFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WorldOrientation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WorldOrientation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WorldPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WorldPosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WorldRotation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WorldRotation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WorldSecondaryAxis"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WorldSecondaryAxis"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("Axis"),
                RbxValue::Vector3 {
                    value: [1.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Attachment"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("SecondaryAxis"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("WorldAxis"),
                RbxValue::Vector3 {
                    value: [1.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("WorldCFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("WorldOrientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("WorldPosition"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("WorldSecondaryAxis"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_character_appearance() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CharacterAppearance"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_custom_event_receiver() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CustomEventReceiver"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Source"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Source"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CustomEventReceiver"),
                },
            );
            map.insert(Cow::Borrowed("Source"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_non_replicated_csg_dictionary_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NonReplicatedCSGDictionaryService"),
        superclass: Some(Cow::Borrowed("FlyweightService")),
        tags: RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_handles() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Handles"),
        superclass: Some(Cow::Borrowed("HandlesBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Faces"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Faces"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                        "Faces",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Style"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Style"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("HandlesStyle")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Handles"),
                },
            );
            map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_point_light() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PointLight"),
        superclass: Some(Cow::Borrowed("Light")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Range"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Range"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("PointLight"),
                },
            );
            map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 8.0 });
            map.insert(Cow::Borrowed("Shadows"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_notification_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NotificationService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("IsLuaBottomBarEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLuaBottomBarEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsLuaBottomBarWithText"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLuaBottomBarWithText"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsLuaChatEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLuaChatEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsLuaGameDetailsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLuaGameDetailsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsLuaHomeWithAvatarEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLuaHomeWithAvatarEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SelectedTheme"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SelectedTheme"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("NotificationService"),
                },
            );
            map.insert(
                Cow::Borrowed("SelectedTheme"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_keyframe_marker() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("KeyframeMarker"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("KeyframeMarker"),
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_points_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PointsService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::DEPRECATED
            | RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("PointsService"),
                },
            );
            map
        },
    };
}
fn generate_social_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SocialService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SocialService"),
                },
            );
            map
        },
    };
}
fn generate_physics_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PhysicsSettings"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SETTINGS,
        properties: {
            let mut map = HashMap::with_capacity(22);
            map.insert(
                Cow::Borrowed("AllowSleep"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllowSleep"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreAnchorsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreAnchorsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreAssembliesShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreAssembliesShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreAwakePartsHighlighted"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreAwakePartsHighlighted"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreBodyTypesShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreBodyTypesShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreContactIslandsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreContactIslandsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreContactPointsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreContactPointsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreJointCoordinatesShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreJointCoordinatesShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreMechanismsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreMechanismsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreModelCoordsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreModelCoordsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreOwnersShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreOwnersShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ArePartCoordsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ArePartCoordsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreRegionsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreRegionsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreUnalignedPartsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreUnalignedPartsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AreWorldCoordsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreWorldCoordsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DisableCSGv2"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DisableCSGv2"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsReceiveAgeShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsReceiveAgeShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsTreeShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsTreeShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PhysicsEnvironmentalThrottle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PhysicsEnvironmentalThrottle"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "EnviromentalPhysicsThrottle",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ShowDecompositionGeometry"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShowDecompositionGeometry"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ThrottleAdjustTime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ThrottleAdjustTime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UseCSGv2"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UseCSGv2"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_sound() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Sound"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(20);
            map.insert(
                Cow::Borrowed("EmitterSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EmitterSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsLoaded"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLoaded"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsPaused"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsPaused"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsPlaying"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsPlaying"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Looped"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Looped"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("xmlRead_MaxDistance_3")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MinDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MinDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Pitch"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Pitch"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PlayOnRemove"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlayOnRemove"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PlaybackLoudness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlaybackLoudness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PlaybackSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlaybackSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Playing"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Playing"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RollOffMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RollOffMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RollOffMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SoundGroup"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SoundGroup"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SoundId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SoundId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TimeLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TimeLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TimePosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TimePosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Volume"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Volume"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("isPlaying"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("isPlaying"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("xmlRead_MaxDistance_3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("xmlRead_MaxDistance_3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("MaxDistance")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(14);
            map.insert(
                Cow::Borrowed("EmitterSize"),
                RbxValue::Float32 { value: 10.0 },
            );
            map.insert(Cow::Borrowed("Looped"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("MaxDistance"),
                RbxValue::Float32 { value: 10000.0 },
            );
            map.insert(
                Cow::Borrowed("MinDistance"),
                RbxValue::Float32 { value: 10.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Sound"),
                },
            );
            map.insert(Cow::Borrowed("Pitch"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("PlayOnRemove"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("PlaybackSpeed"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("Playing"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("RollOffMode"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("SoundGroup"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("SoundId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("TimePosition"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Volume"), RbxValue::Float32 { value: 0.5 });
            map
        },
    };
}
fn generate_weld() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Weld"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Weld"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_prismatic_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PrismaticConstraint"),
        superclass: Some(Cow::Borrowed("SlidingBallConstraint")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(18);
            map.insert(Cow::Borrowed("ActuatorType"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(1009).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("LowerLimit"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("MotorMaxAcceleration"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxForce"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("PrismaticConstraint"),
                },
            );
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("ServoMaxForce"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 0.15 });
            map.insert(Cow::Borrowed("Speed"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("TargetPosition"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("UpperLimit"),
                RbxValue::Float32 { value: 5.0 },
            );
            map.insert(Cow::Borrowed("Velocity"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_reflection_metadata_yield_functions() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataYieldFunctions"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_character_mesh() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CharacterMesh"),
        superclass: Some(Cow::Borrowed("CharacterAppearance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("BaseTextureId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BaseTextureId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BodyPart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BodyPart"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("BodyPart")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MeshId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MeshId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OverlayTextureId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OverlayTextureId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(Cow::Borrowed("BaseTextureId"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("BodyPart"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("MeshId"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CharacterMesh"),
                },
            );
            map.insert(
                Cow::Borrowed("OverlayTextureId"),
                RbxValue::Int32 { value: 0 },
            );
            map
        },
    };
}
fn generate_user_storage_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UserStorageService"),
        superclass: Some(Cow::Borrowed("LocalStorageService")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_script_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ScriptService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_equalizer_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("EqualizerSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("HighGain"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HighGain"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LowGain"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LowGain"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MidGain"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MidGain"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("HighGain"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("LowGain"), RbxValue::Float32 { value: -20.0 });
            map.insert(Cow::Borrowed("MidGain"), RbxValue::Float32 { value: -10.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("EqualizerSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map
        },
    };
}
fn generate_sparkles() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Sparkles"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SparkleColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SparkleColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0000001, 1.0],
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Sparkles"),
                },
            );
            map.insert(
                Cow::Borrowed("SparkleColor"),
                RbxValue::Color3 {
                    value: [0.5647059, 0.098039225, 1.0],
                },
            );
            map
        },
    };
}
fn generate_starter_gear() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StarterGear"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("StarterGear"),
                },
            );
            map
        },
    };
}
fn generate_sliding_ball_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SlidingBallConstraint"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("ActuatorType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ActuatorType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentPosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LimitsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LowerLimit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LowerLimit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxAcceleration"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MotorMaxAcceleration"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MotorMaxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Restitution"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ServoMaxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ServoMaxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Speed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Speed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TargetPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetPosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UpperLimit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UpperLimit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Velocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_running_average_time_interval_item() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RunningAverageTimeIntervalItem"),
        superclass: Some(Cow::Borrowed("StatsItem")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_csg_dictionary_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CSGDictionaryService"),
        superclass: Some(Cow::Borrowed("FlyweightService")),
        tags: RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_game_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GameSettings"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SETTINGS,
        properties: {
            let mut map = HashMap::with_capacity(14);
            map.insert(
                Cow::Borrowed("AdditionalCoreIncludeDirs"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AdditionalCoreIncludeDirs"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BubbleChatLifetime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BubbleChatLifetime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BubbleChatMaxBubbles"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BubbleChatMaxBubbles"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ChatHistory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ChatHistory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ChatScrollLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ChatScrollLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CollisionSoundEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CollisionSoundEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CollisionSoundVolume"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CollisionSoundVolume"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("HardwareMouse"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HardwareMouse"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxCollisionSounds"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxCollisionSounds"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OverrideStarterScript"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OverrideStarterScript"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ReportAbuseChatHistory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReportAbuseChatHistory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SoftwareSound"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SoftwareSound"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VideoCaptureEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VideoCaptureEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VideoQuality"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VideoQuality"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "VideoQualitySettings",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_snap() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Snap"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Snap"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_messaging_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MessagingService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("MessagingService"),
                },
            );
            map
        },
    };
}
fn generate_plugin_drag_event() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginDragEvent"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Data"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Data"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MimeType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MimeType"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Sender"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Sender"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_analystics_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AnalysticsSettings"),
        superclass: Some(Cow::Borrowed("GenericSettings")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_terrain_region() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TerrainRegion"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("IsSmooth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsSmooth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SizeInCells"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SizeInCells"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TerrainRegion"),
                },
            );
            map
        },
    };
}
fn generate_rbx_analytics_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RbxAnalyticsService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RbxAnalyticsService"),
                },
            );
            map
        },
    };
}
fn generate_ui_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIConstraint"),
        superclass: Some(Cow::Borrowed("UIComponent")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_sky() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Sky"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("CelestialBodiesShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CelestialBodiesShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MoonAngularSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MoonAngularSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MoonTextureId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MoonTextureId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxBk"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SkyboxBk"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxDn"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SkyboxDn"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxFt"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SkyboxFt"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxLf"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SkyboxLf"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxRt"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SkyboxRt"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxUp"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SkyboxUp"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StarCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StarCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SunAngularSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SunAngularSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SunTextureId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SunTextureId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("CelestialBodiesShown"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("MoonAngularSize"),
                RbxValue::Float32 { value: 11.0 },
            );
            map.insert(
                Cow::Borrowed("MoonTextureId"),
                RbxValue::Content {
                    value: String::from("rbxasset://sky/moon.jpg"),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Sky"),
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxBk"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/sky/sky512_bk.tex"),
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxDn"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/sky/sky512_dn.tex"),
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxFt"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/sky/sky512_ft.tex"),
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxLf"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/sky/sky512_lf.tex"),
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxRt"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/sky/sky512_rt.tex"),
                },
            );
            map.insert(
                Cow::Borrowed("SkyboxUp"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/sky/sky512_up.tex"),
                },
            );
            map.insert(Cow::Borrowed("StarCount"), RbxValue::Int32 { value: 3000 });
            map.insert(
                Cow::Borrowed("SunAngularSize"),
                RbxValue::Float32 { value: 21.0 },
            );
            map.insert(
                Cow::Borrowed("SunTextureId"),
                RbxValue::Content {
                    value: String::from("rbxasset://sky/sun.jpg"),
                },
            );
            map
        },
    };
}
fn generate_ui_grid_style_layout() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIGridStyleLayout"),
        superclass: Some(Cow::Borrowed("UILayout")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("AbsoluteContentSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AbsoluteContentSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("FillDirection"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FillDirection"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FillDirection")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HorizontalAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HorizontalAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "HorizontalAlignment",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SortOrder"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SortOrder"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SortOrder")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VerticalAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VerticalAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("VerticalAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_torque() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Torque"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("RelativeTo"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RelativeTo"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "ActuatorRelativeTo",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Torque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Torque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Torque"),
                },
            );
            map.insert(Cow::Borrowed("RelativeTo"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Torque"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_ui_page_layout() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIPageLayout"),
        superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("Animated"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Animated"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Circular"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Circular"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentPage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentPage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("EasingDirection"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EasingDirection"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("EasingDirection")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EasingStyle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EasingStyle"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("EasingStyle")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GamepadInputEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GamepadInputEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Padding"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Padding"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScrollWheelInputEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScrollWheelInputEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TouchInputEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TouchInputEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TweenTime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TweenTime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(14);
            map.insert(Cow::Borrowed("Animated"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Circular"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("EasingDirection"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(Cow::Borrowed("EasingStyle"), RbxValue::Enum { value: 2 });
            map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("GamepadInputEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("HorizontalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UIPageLayout"),
                },
            );
            map.insert(Cow::Borrowed("Padding"), RbxValue::UDim { value: (0.0, 0) });
            map.insert(
                Cow::Borrowed("ScrollWheelInputEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TouchInputEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("TweenTime"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("VerticalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map
        },
    };
}
fn generate_motor6_d() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Motor6D"),
        superclass: Some(Cow::Borrowed("Motor")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Transform"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transform"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("CurrentAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("DesiredAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("MaxVelocity"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Motor6D"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Transform"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map
        },
    };
}
fn generate_cacheable_content_provider() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CacheableContentProvider"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_ui_padding() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIPadding"),
        superclass: Some(Cow::Borrowed("UIComponent")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("PaddingBottom"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PaddingBottom"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PaddingLeft"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PaddingLeft"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PaddingRight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PaddingRight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PaddingTop"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PaddingTop"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UIPadding"),
                },
            );
            map.insert(
                Cow::Borrowed("PaddingBottom"),
                RbxValue::UDim { value: (0.0, 0) },
            );
            map.insert(
                Cow::Borrowed("PaddingLeft"),
                RbxValue::UDim { value: (0.0, 0) },
            );
            map.insert(
                Cow::Borrowed("PaddingRight"),
                RbxValue::UDim { value: (0.0, 0) },
            );
            map.insert(
                Cow::Borrowed("PaddingTop"),
                RbxValue::UDim { value: (0.0, 0) },
            );
            map
        },
    };
}
fn generate_selection_part_lasso() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SelectionPartLasso"),
        superclass: Some(Cow::Borrowed("SelectionLasso")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Part"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Part"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(Cow::Borrowed("Humanoid"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SelectionPartLasso"),
                },
            );
            map.insert(Cow::Borrowed("Part"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_body_position() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyPosition"),
        superclass: Some(Cow::Borrowed("BodyMover")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("D"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("D"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("P"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("P"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("maxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("maxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("MaxForce")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Position")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(Cow::Borrowed("D"), RbxValue::Float32 { value: 1250.0 });
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxValue::Vector3 {
                    value: [4000.0, 4000.0, 4000.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BodyPosition"),
                },
            );
            map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 10000.0 });
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 50.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_image_label() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ImageLabel"),
        superclass: Some(Cow::Borrowed("GuiLabel")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("Image"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Image"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageRectOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageRectOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageRectSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageRectSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsLoaded"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsLoaded"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ScaleType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScaleType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScaleType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SliceCenter"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SliceCenter"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Rect),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SliceScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SliceScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TileSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TileSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(38);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Image"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("ImageColor3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("ImageRectOffset"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("ImageRectSize"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("ImageTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ImageLabel"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("ScaleType"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("SliceCenter"),
                RbxValue::Rect {
                    value: Rect {
                        min: (0.0, 0.0),
                        max: (0.0, 0.0),
                    },
                },
            );
            map.insert(
                Cow::Borrowed("SliceScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("TileSize"),
                RbxValue::UDim2 {
                    value: (1.0, 0, 1.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_accessory() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Accessory"),
        superclass: Some(Cow::Borrowed("Accoutrement")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("AttachmentForward"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, -1.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPoint"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPos"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentRight"),
                RbxValue::Vector3 {
                    value: [1.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentUp"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Accessory"),
                },
            );
            map
        },
    };
}
fn generate_gui_object() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiObject"),
        superclass: Some(Cow::Borrowed("GuiBase2d")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(25);
            map.insert(
                Cow::Borrowed("Active"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Active"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AnchorPoint"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackgroundColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackgroundColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackgroundTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BorderColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BorderColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BorderMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BorderMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("BorderMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BorderSizePixel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClipsDescendants"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Draggable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Draggable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LayoutOrder"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LayoutOrder"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NextSelectionDown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NextSelectionLeft"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NextSelectionRight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NextSelectionUp"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Rotation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Selectable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Selectable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SelectionImageObject"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SizeConstraint"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SizeConstraint"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SizeConstraint")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Visible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Visible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ZIndex"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ZIndex"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_player_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PlayerGui"),
        superclass: Some(Cow::Borrowed("BasePlayerGui")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::PLAYER_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("CurrentScreenOrientation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentScreenOrientation"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScreenOrientation")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ScreenOrientation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScreenOrientation"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScreenOrientation")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SelectionImageObject"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_haptic_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HapticService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("HapticService"),
                },
            );
            map
        },
    };
}
fn generate_controller() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Controller"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_standard_pages() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StandardPages"),
        superclass: Some(Cow::Borrowed("Pages")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_fire() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Fire"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Heat"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Heat"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("heat_xml")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SecondaryColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SecondaryColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("size_xml")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("heat_xml"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("heat_xml"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Heat")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Size")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("size_xml"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("size_xml"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Size")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.92549026, 0.54509807, 0.27450982],
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Heat"), RbxValue::Float32 { value: 9.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Fire"),
                },
            );
            map.insert(
                Cow::Borrowed("SecondaryColor"),
                RbxValue::Color3 {
                    value: [0.54509807, 0.3137255, 0.21568629],
                },
            );
            map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 5.0 });
            map
        },
    };
}
fn generate_path() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Path"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Status"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Status"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PathStatus")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_shirt_graphic() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ShirtGraphic"),
        superclass: Some(Cow::Borrowed("CharacterAppearance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Graphic"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Graphic"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Graphic"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Shirt Graphic"),
                },
            );
            map
        },
    };
}
fn generate_data_store_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DataStoreService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("AutomaticRetry"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutomaticRetry"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LegacyNamingScheme"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LegacyNamingScheme"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("DataStoreService"),
                },
            );
            map
        },
    };
}
fn generate_pathfinding_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PathfindingService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("EmptyCutoff"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EmptyCutoff"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("EmptyCutoff"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_team() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Team"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("AutoAssignable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoAssignable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AutoColorCharacters"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoColorCharacters"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Score"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Score"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TeamColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("AutoAssignable"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("AutoColorCharacters"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Team"),
                },
            );
            map.insert(Cow::Borrowed("Score"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(1).unwrap(),
                },
            );
            map
        },
    };
}
fn generate_debugger_watch() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DebuggerWatch"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Expression"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Expression"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_vector_force() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VectorForce"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("ApplyAtCenterOfMass"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ApplyAtCenterOfMass"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Force"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Force"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RelativeTo"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RelativeTo"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "ActuatorRelativeTo",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("ApplyAtCenterOfMass"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Force"),
                RbxValue::Vector3 {
                    value: [1000.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("VectorForce"),
                },
            );
            map.insert(Cow::Borrowed("RelativeTo"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_reflection_metadata_enum_item() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataEnumItem"),
        superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(14);
            map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("ClassCategory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Constraint"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("EditingDisabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map.insert(
                Cow::Borrowed("ScriptContext"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float64 { value: 0.0 });
            map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float64 { value: 0.0 });
            map.insert(
                Cow::Borrowed("UINumTicks"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("summary"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_reflection_metadata_functions() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataFunctions"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_handle_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HandleAdornment"),
        superclass: Some(Cow::Borrowed("PVAdornment")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AlwaysOnTop"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SizeRelativeOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SizeRelativeOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ZIndex"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ZIndex"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_workspace() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Workspace"),
        superclass: Some(Cow::Borrowed("Model")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("AllowThirdPartySales"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllowThirdPartySales"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentCamera"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentCamera"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DistributedGameTime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DistributedGameTime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FallenPartsDestroyHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FallenPartsDestroyHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FilteringEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FilteringEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Gravity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Gravity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StreamingEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StreamingEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StreamingMinRadius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StreamingMinRadius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StreamingPauseMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StreamingPauseMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "StreamingPauseMode",
                    )),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StreamingTargetRadius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StreamingTargetRadius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TemporaryLegacyPhysicsSolverOverride"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TemporaryLegacyPhysicsSolverOverride"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Terrain"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Terrain"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("AllowThirdPartySales"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CurrentCamera"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("DistributedGameTime"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("FallenPartsDestroyHeight"),
                RbxValue::Float32 { value: -500.0 },
            );
            map.insert(
                Cow::Borrowed("FilteringEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Gravity"), RbxValue::Float32 { value: 196.2 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Workspace"),
                },
            );
            map.insert(Cow::Borrowed("PrimaryPart"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("StreamingEnabled"),
                RbxValue::Bool { value: false },
            );
            map
        },
    };
}
fn generate_global_data_store() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GlobalDataStore"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_vehicle_controller() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VehicleController"),
        superclass: Some(Cow::Borrowed("Controller")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_body_gyro() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyGyro"),
        superclass: Some(Cow::Borrowed("BodyMover")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("D"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("D"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("P"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("P"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("cframe"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("cframe"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("CFrame")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("maxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("maxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("MaxTorque")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("D"), RbxValue::Float32 { value: 500.0 });
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxValue::Vector3 {
                    value: [400000.0, 0.0, 400000.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BodyGyro"),
                },
            );
            map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 3000.0 });
            map
        },
    };
}
fn generate_keyboard_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("KeyboardService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_keyframe_sequence_provider() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("KeyframeSequenceProvider"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_game_pass_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GamePassService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("GamePassService"),
                },
            );
            map
        },
    };
}
fn generate_line_force() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LineForce"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("ApplyAtCenterOfMass"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ApplyAtCenterOfMass"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("InverseSquareLaw"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InverseSquareLaw"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Magnitude"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Magnitude"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ReactionForceEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReactionForceEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(
                Cow::Borrowed("ApplyAtCenterOfMass"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("InverseSquareLaw"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Magnitude"),
                RbxValue::Float32 { value: 1000.0 },
            );
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("LineForce"),
                },
            );
            map.insert(
                Cow::Borrowed("ReactionForceEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_reverb_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReverbSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("DecayTime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DecayTime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Density"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Density"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Diffusion"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Diffusion"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DryLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DryLevel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WetLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WetLevel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(Cow::Borrowed("DecayTime"), RbxValue::Float32 { value: 1.5 });
            map.insert(Cow::Borrowed("Density"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("Diffusion"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("DryLevel"), RbxValue::Float32 { value: -6.0 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ReverbSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("WetLevel"), RbxValue::Float32 { value: 0.0 });
            map
        },
    };
}
fn generate_special_mesh() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SpecialMesh"),
        superclass: Some(Cow::Borrowed("FileMesh")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("MeshType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MeshType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("MeshType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("MeshId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("MeshType"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Mesh"),
                },
            );
            map.insert(
                Cow::Borrowed("Offset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Scale"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("TextureId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("VertexColor"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map
        },
    };
}
fn generate_box_handle_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BoxHandleAdornment"),
        superclass: Some(Cow::Borrowed("HandleAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BoxHandleAdornment"),
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("SizeRelativeOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: -1 });
            map
        },
    };
}
fn generate_lua_source_container() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LuaSourceContainer"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("CurrentEditor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentEditor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_studio_data() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StudioData"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("SrcPlaceId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SrcPlaceId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SrcUniverseId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SrcUniverseId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_timer_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TimerService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_truss_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TrussPart"),
        superclass: Some(Cow::Borrowed("BasePart")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Style"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Style"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Style")),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(48);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Truss"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [2.0, 2.0, 2.0],
                },
            );
            map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_post_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PostEffect"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_starter_character_scripts() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StarterCharacterScripts"),
        superclass: Some(Cow::Borrowed("StarterPlayerScripts")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_translator() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Translator"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("LocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_ui_layout() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UILayout"),
        superclass: Some(Cow::Borrowed("UIComponent")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_user_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UserSettings"),
        superclass: Some(Cow::Borrowed("GenericSettings")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_selection_sphere() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SelectionSphere"),
        superclass: Some(Cow::Borrowed("PVAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("SurfaceColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SurfaceColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SurfaceColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SurfaceTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SelectionSphere"),
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceColor3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceTransparency"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_client_replicator() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ClientReplicator"),
        superclass: Some(Cow::Borrowed("NetworkReplicator")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_bevel_mesh() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BevelMesh"),
        superclass: Some(Cow::Borrowed("DataModelMesh")),
        tags: RbxInstanceTags::DEPRECATED
            | RbxInstanceTags::NOT_BROWSABLE
            | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_value_base() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ValueBase"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_body_angular_velocity() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyAngularVelocity"),
        superclass: Some(Cow::Borrowed("BodyMover")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("P"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("P"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("angularvelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("angularvelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("AngularVelocity")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("maxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("maxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("MaxTorque")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 2.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxValue::Vector3 {
                    value: [4000.0, 4000.0, 4000.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BodyAngularVelocity"),
                },
            );
            map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 1250.0 });
            map
        },
    };
}
fn generate_animator() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Animator"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Animator"),
                },
            );
            map
        },
    };
}
fn generate_controller_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ControllerService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_angular_velocity() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AngularVelocity"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RelativeTo"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RelativeTo"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "ActuatorRelativeTo",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("MaxTorque"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AngularVelocity"),
                },
            );
            map.insert(Cow::Borrowed("RelativeTo"), RbxValue::Enum { value: 2 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_ordered_data_store() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("OrderedDataStore"),
        superclass: Some(Cow::Borrowed("GlobalDataStore")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_bindable_function() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BindableFunction"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Function"),
                },
            );
            map
        },
    };
}
fn generate_joints_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("JointsService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::DEPRECATED
            | RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("JointsService"),
                },
            );
            map
        },
    };
}
fn generate_mem_storage_connection() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MemStorageConnection"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_layer_collector() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LayerCollector"),
        superclass: Some(Cow::Borrowed("GuiBase2d")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ResetOnSpawn"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ResetOnSpawn"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ZIndexBehavior"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ZIndexBehavior"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ZIndexBehavior")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_analytics_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AnalyticsService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("ApiKey"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ApiKey"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AnalyticsService"),
                },
            );
            map
        },
    };
}
fn generate_tool() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Tool"),
        superclass: Some(Cow::Borrowed("BackpackItem")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("CanBeDropped"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CanBeDropped"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Grip"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Grip"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GripForward"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GripForward"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GripPos"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GripPos"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GripRight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GripRight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GripUp"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GripUp"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ManualActivationOnly"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ManualActivationOnly"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RequiresHandle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RequiresHandle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ToolTip"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ToolTip"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("CanBeDropped"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Grip"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripForward"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, -1.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripPos"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripRight"),
                RbxValue::Vector3 {
                    value: [1.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripUp"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("ManualActivationOnly"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Tool"),
                },
            );
            map.insert(
                Cow::Borrowed("RequiresHandle"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("TextureId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("ToolTip"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_http_rbx_api_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HttpRbxApiService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("HttpRbxApiService"),
                },
            );
            map
        },
    };
}
fn generate_script() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Script"),
        superclass: Some(Cow::Borrowed("BaseScript")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Source"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Source"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("LinkedSource"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Script"),
                },
            );
            map.insert(
                Cow::Borrowed("Source"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_hopper() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Hopper"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::DEPRECATED
            | RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_server_replicator() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ServerReplicator"),
        superclass: Some(Cow::Borrowed("NetworkReplicator")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_seat() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Seat"),
        superclass: Some(Cow::Borrowed("Part")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Disabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Disabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Occupant"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Occupant"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(50);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(Cow::Borrowed("Disabled"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Seat"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_reflection_metadata_properties() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataProperties"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_distortion_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DistortionSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Level"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Level"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Level"), RbxValue::Float32 { value: 0.75 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("DistortionSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map
        },
    };
}
fn generate_starter_player() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StarterPlayer"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(37);
            map.insert(
                Cow::Borrowed("AllowCustomAnimations"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllowCustomAnimations"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AutoJumpEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoJumpEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraMaxZoomDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraMaxZoomDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraMinZoomDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraMinZoomDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CameraMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterJumpHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterJumpHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterJumpPower"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterJumpPower"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterMaxSlopeAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterMaxSlopeAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterUseJumpPower"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterUseJumpPower"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterWalkSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterWalkSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevCameraOcclusionMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevCameraOcclusionMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevCameraOcclusionMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevComputerCameraMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevComputerCameraMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevComputerCameraMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevComputerMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevComputerMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevComputerMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevTouchCameraMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevTouchCameraMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevTouchCameraMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevTouchMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevTouchMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevTouchMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EnableMouseLockOption"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EnableMouseLockOption"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDFace"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDFace"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDHead"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDHead"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDLeftArm"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDLeftArm"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDLeftLeg"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDLeftLeg"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDPants"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDPants"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDRightArm"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDRightArm"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDRightLeg"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDRightLeg"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDShirt"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDShirt"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDTeeShirt"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDTeeShirt"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDTorso"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAssetIDTorso"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAvatar"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsAvatar"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("GameAvatarType")),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsR15Collision"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsR15Collision"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("R15CollisionType")),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeBodyType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsScaleRangeBodyType"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeHead"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsScaleRangeHead"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsScaleRangeHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeProportion"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsScaleRangeProportion"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeWidth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameSettingsScaleRangeWidth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HealthDisplayDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HealthDisplayDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LoadCharacterAppearance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LoadCharacterAppearance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NameDisplayDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NameDisplayDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UserEmotesEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UserEmotesEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(38);
            map.insert(
                Cow::Borrowed("AllowCustomAnimations"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("AutoJumpEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("CameraMaxZoomDistance"),
                RbxValue::Float32 { value: 400.0 },
            );
            map.insert(
                Cow::Borrowed("CameraMinZoomDistance"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("CameraMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("CharacterJumpHeight"),
                RbxValue::Float32 { value: 7.2 },
            );
            map.insert(
                Cow::Borrowed("CharacterJumpPower"),
                RbxValue::Float32 { value: 50.0 },
            );
            map.insert(
                Cow::Borrowed("CharacterMaxSlopeAngle"),
                RbxValue::Float32 { value: 89.0 },
            );
            map.insert(
                Cow::Borrowed("CharacterUseJumpPower"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("CharacterWalkSpeed"),
                RbxValue::Float32 { value: 16.0 },
            );
            map.insert(
                Cow::Borrowed("DevCameraOcclusionMode"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("DevComputerCameraMovementMode"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("DevComputerMovementMode"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("DevTouchCameraMovementMode"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("DevTouchMovementMode"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("EnableMouseLockOption"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDFace"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDHead"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDLeftArm"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDLeftLeg"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDPants"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDRightArm"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDRightLeg"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDShirt"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDTeeShirt"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAssetIDTorso"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsAvatar"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsR15Collision"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeBodyType"),
                RbxValue::NumberRange { value: (0.0, 1.0) },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeHead"),
                RbxValue::NumberRange { value: (0.95, 1.0) },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeHeight"),
                RbxValue::NumberRange { value: (0.9, 1.05) },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeProportion"),
                RbxValue::NumberRange { value: (0.0, 1.0) },
            );
            map.insert(
                Cow::Borrowed("GameSettingsScaleRangeWidth"),
                RbxValue::NumberRange { value: (0.7, 1.0) },
            );
            map.insert(
                Cow::Borrowed("HealthDisplayDistance"),
                RbxValue::Float32 { value: 100.0 },
            );
            map.insert(
                Cow::Borrowed("LoadCharacterAppearance"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("StarterPlayer"),
                },
            );
            map.insert(
                Cow::Borrowed("NameDisplayDistance"),
                RbxValue::Float32 { value: 100.0 },
            );
            map.insert(
                Cow::Borrowed("UserEmotesEnabled"),
                RbxValue::Bool { value: true },
            );
            map
        },
    };
}
fn generate_text_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TextService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TextService"),
                },
            );
            map
        },
    };
}
fn generate_rotate_v() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RotateV"),
        superclass: Some(Cow::Borrowed("DynamicRotate")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("BaseAngle"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RotateV"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_number_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NumberValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(Cow::Borrowed("Value"), RbxValue::Float64 { value: 0.0 });
            map
        },
    };
}
fn generate_rotate() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Rotate"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Rotate"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_friend_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FriendService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("FriendService"),
                },
            );
            map
        },
    };
}
fn generate_lua_web_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LuaWebService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_pv_instance() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PVInstance"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_humanoid_description() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HumanoidDescription"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(38);
            map.insert(
                Cow::Borrowed("BackAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BodyTypeScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BodyTypeScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClimbAnimation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClimbAnimation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DepthScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DepthScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Face"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Face"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FaceAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FaceAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FallAnimation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FallAnimation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FrontAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FrontAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GraphicTShirt"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GraphicTShirt"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HairAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HairAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HatAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HatAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Head"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Head"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HeadColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeadColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HeadScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeadScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HeightScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeightScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IdleAnimation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IdleAnimation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("JumpAnimation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("JumpAnimation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftArm"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftArm"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftArmColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftArmColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftLeg"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftLeg"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftLegColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftLegColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NeckAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NeckAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NumberEmotesLoaded"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NumberEmotesLoaded"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Pants"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Pants"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ProportionScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ProportionScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightArm"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightArm"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightArmColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightArmColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightLeg"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightLeg"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightLegColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightLegColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RunAnimation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RunAnimation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Shirt"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Shirt"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ShouldersAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShouldersAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SwimAnimation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SwimAnimation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Torso"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Torso"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TorsoColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TorsoColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WaistAccessory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WaistAccessory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WalkAnimation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WalkAnimation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WidthScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WidthScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(39);
            map.insert(
                Cow::Borrowed("BackAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("BodyTypeScale"),
                RbxValue::Float32 { value: 0.3 },
            );
            map.insert(
                Cow::Borrowed("ClimbAnimation"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("DepthScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("Face"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("FaceAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("FallAnimation"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("FrontAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("GraphicTShirt"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("HairAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("HatAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("Head"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("HeadColor"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("HeadScale"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("HeightScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("IdleAnimation"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("JumpAnimation"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("LeftArm"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("LeftArmColor"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("LeftLeg"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("LeftLegColor"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("HumanoidDescription"),
                },
            );
            map.insert(
                Cow::Borrowed("NeckAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("NumberEmotesLoaded"),
                RbxValue::Int32 { value: -1 },
            );
            map.insert(Cow::Borrowed("Pants"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("ProportionScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("RightArm"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RightArmColor"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("RightLeg"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RightLegColor"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("RunAnimation"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Shirt"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("ShouldersAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("SwimAnimation"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Torso"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("TorsoColor"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("WaistAccessory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("WalkAnimation"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("WidthScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map
        },
    };
}
fn generate_shirt() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Shirt"),
        superclass: Some(Cow::Borrowed("Clothing")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("ShirtTemplate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShirtTemplate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Clothing"),
                },
            );
            map.insert(
                Cow::Borrowed("ShirtTemplate"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_gui_base3d() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiBase3d"),
        superclass: Some(Cow::Borrowed("GuiBase")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Visible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Visible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_gui_main() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiMain"),
        superclass: Some(Cow::Borrowed("ScreenGui")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("DisplayOrder"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("IgnoreGuiInset"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("GuiMain"),
                },
            );
            map.insert(
                Cow::Borrowed("OnTopOfCoreBlur"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("ResetOnSpawn"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
            map
        },
    };
}
fn generate_player() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Player"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(41);
            map.insert(
                Cow::Borrowed("AccountAge"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AccountAge"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AppearanceDidLoad"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AppearanceDidLoad"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AutoJumpEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoJumpEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraMaxZoomDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraMaxZoomDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraMinZoomDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraMinZoomDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CameraMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CanLoadCharacterAppearance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CanLoadCharacterAppearance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Character"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Character"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterAppearance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterAppearance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_BROWSABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterAppearanceId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterAppearanceId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ChatMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ChatMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ChatMode")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DataComplexity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataComplexity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DataComplexityLimit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataComplexityLimit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DataReady"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataReady"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DevCameraOcclusionMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevCameraOcclusionMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevCameraOcclusionMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevComputerCameraMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevComputerCameraMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevComputerCameraMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevComputerMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevComputerMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevComputerMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevEnableMouseLock"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevEnableMouseLock"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevTouchCameraMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevTouchCameraMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevTouchCameraMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevTouchMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevTouchMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "DevTouchMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DisplayName"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DisplayName"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("FollowUserId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FollowUserId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GameplayPaused"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameplayPaused"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Guest"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Guest"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("HealthDisplayDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HealthDisplayDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MaximumSimulationRadius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaximumSimulationRadius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MembershipType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MembershipType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("MembershipType")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("NameDisplayDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NameDisplayDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Neutral"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Neutral"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OsPlatform"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OsPlatform"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ReplicationFocus"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReplicationFocus"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RespawnLocation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RespawnLocation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SimulationRadius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SimulationRadius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Team"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Team"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TeamColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Teleported"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Teleported"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TeleportedIn"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TeleportedIn"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UserId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UserId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("VRDevice"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VRDevice"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("userId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("userId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_core_packages() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CorePackages"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CorePackages"),
                },
            );
            map
        },
    };
}
fn generate_studio() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Studio"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_REPLICATED | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(74);
            map.insert(
                Cow::Borrowed("Always Save Script Changes"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Always Save Script Changes"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Animate Hover Over"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Animate Hover Over"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Auto Closing Brackets"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Auto Closing Brackets"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Auto Closing Quotes"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Auto Closing Quotes"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Auto Indent"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Auto Indent"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Auto-Recovery Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Auto-Recovery Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Auto-Recovery Interval (Minutes)"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Auto-Recovery Interval (Minutes)"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Auto-Recovery Path"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Auto-Recovery Path"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Background Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Background Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Basic Objects Display Mode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Basic Objects Display Mode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ListDisplayMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Built-in Function Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Built-in Function Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Camera Mouse Wheel Speed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Camera Mouse Wheel Speed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Camera Shift Speed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Camera Shift Speed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Camera Speed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Camera Speed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Camera Zoom to Mouse Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Camera Zoom to Mouse Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Clear Output On Start"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Clear Output On Start"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Comment Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Comment Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DefaultScriptFileDir"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DefaultScriptFileDir"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DeprecatedObjectsShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DeprecatedObjectsShown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Device Pairing Code"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Device Pairing Code"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Disable Accurate Play Solo"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Disable Accurate Play Solo"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Drag Multiple Parts As Single Part"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Drag Multiple Parts As Single Part"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enable Autocomplete"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enable Autocomplete"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enable CoreScript Debugger"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enable CoreScript Debugger"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enable Intellisense"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enable Intellisense"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Error Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Error Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Find Selection Background Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Find Selection Background Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Font"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Font"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                        "QFont",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Hover Animate Speed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Hover Animate Speed"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("HoverAnimateSpeed")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Hover Over Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Hover Over Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Keyword Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Keyword Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Language"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Language"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "LanguagePreference",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Line Thickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Line Thickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LuaDebuggerEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LuaDebuggerEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LuaDebuggerEnabledAtStartup"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LuaDebuggerEnabledAtStartup"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Matching Word Background Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Matching Word Background Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Maximum Output Lines"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Maximum Output Lines"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Number Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Number Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Only Play Audio from Window in Focus"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Only Play Audio from Window in Focus"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Operator Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Operator Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Output Font"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Output Font"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                        "QFont",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Output Layout Mode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Output Layout Mode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("OutputLayoutMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OverrideCoreScripts"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OverrideCoreScripts"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OverrideCoreScriptsDir"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OverrideCoreScriptsDir"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PermissionLevelShown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PermissionLevelShown"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "PermissionLevelShown",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PluginsDir"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PluginsDir"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Preprocessor Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Preprocessor Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RecentSavesDir"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RecentSavesDir"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("QDir")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Render Throttle Percentage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Render Throttle Percentage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Respect Studio shortcuts when game has focus"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Respect Studio shortcuts when game has focus"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RuntimeUndoBehavior"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RuntimeUndoBehavior"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "RuntimeUndoBehavior",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScriptTimeoutLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScriptTimeoutLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Select Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Select Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Select/Hover Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Select/Hover Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Selection Background Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Selection Background Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Selection Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Selection Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Server Audio Behavior"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Server Audio Behavior"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "ServerAudioBehavior",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show Core GUI in Explorer while Playing"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show Core GUI in Explorer while Playing"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show Diagnostics Bar"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show Diagnostics Bar"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show Hidden Objects in Explorer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show Hidden Objects in Explorer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show Hover Over"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show Hover Over"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show Navigation Mesh"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show Navigation Mesh"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show Plugin GUI Service in Explorer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show Plugin GUI Service in Explorer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show QT warnings in output"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show QT warnings in output"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show Roblox Plugin GUI Service in Explorer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show Roblox Plugin GUI Service in Explorer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Show plus button on hover in Explorer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Show plus button on hover in Explorer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Skip Closing Brackets and Quotes"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Skip Closing Brackets and Quotes"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("String Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("String Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Tab Width"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Tab Width"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Text Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Text Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Text Wrapping"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Text Wrapping"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Theme"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Theme"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UI Theme"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UI Theme"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UITheme")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Warning Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Warning Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_body_force() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyForce"),
        superclass: Some(Cow::Borrowed("BodyMover")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Force"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Force"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("force"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("force"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Force")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Force"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BodyForce"),
                },
            );
            map
        },
    };
}
fn generate_sound_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SoundService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("AmbientReverb"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AmbientReverb"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ReverbType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DistanceFactor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DistanceFactor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DopplerScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DopplerScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RespectFilteringEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RespectFilteringEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RolloffScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RolloffScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("AmbientReverb"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("DistanceFactor"),
                RbxValue::Float32 { value: 3.33 },
            );
            map.insert(
                Cow::Borrowed("DopplerScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SoundService"),
                },
            );
            map.insert(
                Cow::Borrowed("RespectFilteringEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("RolloffScale"),
                RbxValue::Float32 { value: 1.0 },
            );
            map
        },
    };
}
fn generate_string_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StringValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_explosion() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Explosion"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("BlastPressure"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BlastPressure"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BlastRadius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BlastRadius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DestroyJointRadiusPercent"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DestroyJointRadiusPercent"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ExplosionType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExplosionType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ExplosionType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Visible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Visible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("BlastPressure"),
                RbxValue::Float32 { value: 500000.0 },
            );
            map.insert(
                Cow::Borrowed("BlastRadius"),
                RbxValue::Float32 { value: 4.0 },
            );
            map.insert(
                Cow::Borrowed("DestroyJointRadiusPercent"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("ExplosionType"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Explosion"),
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_body_velocity() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyVelocity"),
        superclass: Some(Cow::Borrowed("BodyMover")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("P"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("P"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Velocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("maxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("maxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("MaxForce")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("velocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("velocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Velocity")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxValue::Vector3 {
                    value: [4000.0, 4000.0, 4000.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BodyVelocity"),
                },
            );
            map.insert(Cow::Borrowed("P"), RbxValue::Float32 { value: 1250.0 });
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 2.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_manual_surface_joint_instance() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ManualSurfaceJointInstance"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_physics_packet_cache() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PhysicsPacketCache"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_gui_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("AutoSelectGuiEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoSelectGuiEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CoreEffectFolder"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CoreEffectFolder"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CoreGuiFolder"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CoreGuiFolder"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CoreGuiNavigationEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CoreGuiNavigationEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GuiNavigationEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GuiNavigationEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsModalDialog"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsModalDialog"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsWindows"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsWindows"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MenuIsOpen"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MenuIsOpen"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SelectedCoreObject"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SelectedCoreObject"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SelectedObject"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SelectedObject"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("AutoSelectGuiEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("CoreEffectFolder"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("CoreGuiFolder"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("CoreGuiNavigationEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("GuiNavigationEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("GuiService"),
                },
            );
            map.insert(
                Cow::Borrowed("SelectedCoreObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("SelectedObject"),
                RbxValue::Ref { value: None },
            );
            map
        },
    };
}
fn generate_marketplace_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MarketplaceService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("MarketplaceService"),
                },
            );
            map
        },
    };
}
fn generate_selection_box() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SelectionBox"),
        superclass: Some(Cow::Borrowed("PVAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("LineThickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LineThickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SurfaceColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SurfaceColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SurfaceTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("LineThickness"),
                RbxValue::Float32 { value: 0.15 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SelectionBox"),
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceColor3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("SurfaceTransparency"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_corner_wedge_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CornerWedgePart"),
        superclass: Some(Cow::Borrowed("BasePart")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(47);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CornerWedge"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [2.0, 2.0, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_test_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TestService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("AutoRuns"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoRuns"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Description"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Description"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ErrorCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ErrorCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ExecuteWithStudioRun"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExecuteWithStudioRun"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Is30FpsThrottleEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Is30FpsThrottleEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsPhysicsEnvironmentalThrottled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsPhysicsEnvironmentalThrottled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsSleepAllowed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsSleepAllowed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NumberOfPlayers"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NumberOfPlayers"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SimulateSecondsLag"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SimulateSecondsLag"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TestCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TestCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Timeout"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Timeout"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WarnCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WarnCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(Cow::Borrowed("AutoRuns"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Description"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("ExecuteWithStudioRun"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Is30FpsThrottleEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("IsPhysicsEnvironmentalThrottled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("IsSleepAllowed"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TestService"),
                },
            );
            map.insert(
                Cow::Borrowed("NumberOfPlayers"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("SimulateSecondsLag"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Timeout"), RbxValue::Float64 { value: 10.0 });
            map
        },
    };
}
fn generate_gui_label() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiLabel"),
        superclass: Some(Cow::Borrowed("GuiObject")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_ad_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AdService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AdService"),
                },
            );
            map
        },
    };
}
fn generate_reflection_metadata_class() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataClass"),
        superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("ExplorerImageIndex"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExplorerImageIndex"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ExplorerOrder"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExplorerOrder"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Insertable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Insertable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PreferredParent"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PreferredParent"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(18);
            map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("ClassCategory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Constraint"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("EditingDisabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("ExplorerImageIndex"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("ExplorerOrder"),
                RbxValue::Int32 { value: 2147483647 },
            );
            map.insert(Cow::Borrowed("Insertable"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map.insert(
                Cow::Borrowed("PreferredParent"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("ScriptContext"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float64 { value: 0.0 });
            map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float64 { value: 0.0 });
            map.insert(
                Cow::Borrowed("UINumTicks"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("summary"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_player_mouse() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PlayerMouse"),
        superclass: Some(Cow::Borrowed("Mouse")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_weld_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("WeldConstraint"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Active"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Active"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Part0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Part0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Part1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Part1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("WeldConstraint"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_players() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Players"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("BubbleChat"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BubbleChat"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CharacterAutoLoads"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CharacterAutoLoads"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClassicChat"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClassicChat"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LocalPlayer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LocalPlayer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MaxPlayers"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxPlayers"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("MaxPlayersInternal")),
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxPlayersInternal"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxPlayersInternal"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("MaxPlayers")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("NumPlayers"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NumPlayers"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PreferredPlayers"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PreferredPlayers"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("PreferredPlayersInternal")),
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PreferredPlayersInternal"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PreferredPlayersInternal"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("PreferredPlayers")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RespawnTime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RespawnTime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("localPlayer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("localPlayer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("numPlayers"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("numPlayers"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("CharacterAutoLoads"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Players"),
                },
            );
            map.insert(
                Cow::Borrowed("RespawnTime"),
                RbxValue::Float32 { value: 5.0 },
            );
            map
        },
    };
}
fn generate_selection() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Selection"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Selection"),
                },
            );
            map
        },
    };
}
fn generate_cylinder_mesh() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CylinderMesh"),
        superclass: Some(Cow::Borrowed("BevelMesh")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Mesh"),
                },
            );
            map.insert(
                Cow::Borrowed("Offset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Scale"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("VertexColor"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map
        },
    };
}
fn generate_negate_operation() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NegateOperation"),
        superclass: Some(Cow::Borrowed("PartOperation")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(50);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionFidelity"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("NegativePart"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.1 },
            );
            map.insert(
                Cow::Borrowed("UsePartColor"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_render_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RenderSettings"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("AutoFRMLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoFRMLevel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EagerBulkExecution"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EagerBulkExecution"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EditQualityLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EditQualityLevel"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("QualityLevel")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EnableFRM"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EnableFRM"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ExportMergeByMaterial"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExportMergeByMaterial"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FrameRateManager"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FrameRateManager"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "FramerateManagerMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GraphicsMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GraphicsMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("GraphicsMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MeshCacheSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MeshCacheSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("QualityLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("QualityLevel"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("QualityLevel")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ReloadAssets"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReloadAssets"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RenderCSGTrianglesDebug"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RenderCSGTrianglesDebug"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ShowBoundingBoxes"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShowBoundingBoxes"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_debugger_breakpoint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DebuggerBreakpoint"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Condition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Condition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Line"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Line"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_chat() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Chat"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("BubbleChatEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BubbleChatEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LoadDefaultChat"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LoadDefaultChat"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("BubbleChatEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("LoadDefaultChat"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Chat"),
                },
            );
            map
        },
    };
}
fn generate_reflection_metadata_callbacks() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataCallbacks"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_billboard_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BillboardGui"),
        superclass: Some(Cow::Borrowed("LayerCollector")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(17);
            map.insert(
                Cow::Borrowed("Active"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Active"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Adornee"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Adornee"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AlwaysOnTop"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClipsDescendants"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DistanceLowerLimit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DistanceLowerLimit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DistanceStep"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DistanceStep"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DistanceUpperLimit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DistanceUpperLimit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ExtentsOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExtentsOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ExtentsOffsetWorldSpace"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExtentsOffsetWorldSpace"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightInfluence"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PlayerToHideFrom"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlayerToHideFrom"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SizeOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SizeOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StudsOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StudsOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StudsOffsetWorldSpace"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StudsOffsetWorldSpace"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(23);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("DistanceLowerLimit"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("DistanceStep"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("DistanceUpperLimit"),
                RbxValue::Float32 { value: -1.0 },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("ExtentsOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("ExtentsOffsetWorldSpace"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("MaxDistance"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BillboardGui"),
                },
            );
            map.insert(
                Cow::Borrowed("PlayerToHideFrom"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("ResetOnSpawn"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("SizeOffset"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("StudsOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("StudsOffsetWorldSpace"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
            map
        },
    };
}
fn generate_debugger_manager() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DebuggerManager"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("DebuggingEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DebuggingEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_keyframe() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Keyframe"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Time"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Time"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Keyframe"),
                },
            );
            map.insert(Cow::Borrowed("Time"), RbxValue::Float32 { value: 0.0 });
            map
        },
    };
}
fn generate_backpack_item() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BackpackItem"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("TextureId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_data_model() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DataModel"),
        superclass: Some(Cow::Borrowed("ServiceProvider")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(16);
            map.insert(
                Cow::Borrowed("CreatorId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CreatorId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CreatorType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CreatorType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CreatorType")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GameId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GameId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GearGenreSetting"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GearGenreSetting"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("GearGenreSetting")),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Genre"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Genre"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Genre")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsSFFlagsLoaded"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsSFFlagsLoaded"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("JobId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("JobId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PlaceId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlaceId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PlaceVersion"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlaceVersion"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PrivateServerId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrivateServerId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PrivateServerOwnerId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrivateServerOwnerId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("VIPServerId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VIPServerId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("VIPServerOwnerId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VIPServerOwnerId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Workspace"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Workspace"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("lighting"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("lighting"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("workspace"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("workspace"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_c_frame_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CFrameValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map
        },
    };
}
fn generate_reflection_metadata_enums() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataEnums"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_trail() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Trail"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(15);
            map.insert(
                Cow::Borrowed("Attachment0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Attachment0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Attachment1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Attachment1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::ColorSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FaceCamera"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FaceCamera"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Lifetime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Lifetime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightEmission"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightEmission"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightInfluence"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MinLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MinLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Texture"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextureMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WidthScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WidthScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(16);
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::ColorSequence {
                    value: ColorSequence {
                        keypoints: vec![
                            ColorSequenceKeypoint {
                                time: 0.0,
                                color: [1.0, 1.0, 1.0],
                            },
                            ColorSequenceKeypoint {
                                time: 1.0,
                                color: [1.0, 1.0, 1.0],
                            },
                        ],
                    },
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("FaceCamera"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Lifetime"), RbxValue::Float32 { value: 2.0 });
            map.insert(
                Cow::Borrowed("LightEmission"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("MaxLength"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("MinLength"), RbxValue::Float32 { value: 0.1 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Trail"),
                },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("TextureLength"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("TextureMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::NumberSequence {
                    value: NumberSequence {
                        keypoints: vec![
                            NumberSequenceKeypoint {
                                time: 0.0,
                                value: 0.5,
                                envelope: 0.0,
                            },
                            NumberSequenceKeypoint {
                                time: 1.0,
                                value: 0.5,
                                envelope: 0.0,
                            },
                        ],
                    },
                },
            );
            map.insert(
                Cow::Borrowed("WidthScale"),
                RbxValue::NumberSequence {
                    value: NumberSequence {
                        keypoints: vec![
                            NumberSequenceKeypoint {
                                time: 0.0,
                                value: 1.0,
                                envelope: 0.0,
                            },
                            NumberSequenceKeypoint {
                                time: 1.0,
                                value: 1.0,
                                envelope: 0.0,
                            },
                        ],
                    },
                },
            );
            map
        },
    };
}
fn generate_sun_rays_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SunRaysEffect"),
        superclass: Some(Cow::Borrowed("PostEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Intensity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Intensity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Spread"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Spread"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Intensity"),
                RbxValue::Float32 { value: 0.25 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SunRays"),
                },
            );
            map.insert(Cow::Borrowed("Spread"), RbxValue::Float32 { value: 1.0 });
            map
        },
    };
}
fn generate_user_game_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UserGameSettings"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(36);
            map.insert(
                Cow::Borrowed("AllTutorialsDisabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllTutorialsDisabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CustomCameraMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraYInverted"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraYInverted"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ChatVisible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ChatVisible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ComputerCameraMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ComputerCameraMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "ComputerCameraMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ComputerMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ComputerMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "ComputerMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ControlMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ControlMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ControlMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Fullscreen"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Fullscreen"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GamepadCameraSensitivity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GamepadCameraSensitivity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HasEverUsedVR"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HasEverUsedVR"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsUsingCameraYInverted"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsUsingCameraYInverted"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsUsingGamepadCameraSensitivity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsUsingGamepadCameraSensitivity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MasterVolume"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MasterVolume"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MicroProfilerWebServerEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MicroProfilerWebServerEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MicroProfilerWebServerIP"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MicroProfilerWebServerIP"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MicroProfilerWebServerPort"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MicroProfilerWebServerPort"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MouseSensitivity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MouseSensitivity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MouseSensitivityFirstPerson"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MouseSensitivityFirstPerson"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MouseSensitivityThirdPerson"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MouseSensitivityThirdPerson"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OnScreenProfilerEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OnScreenProfilerEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OnboardingsCompleted"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OnboardingsCompleted"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PerformanceStatsVisible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PerformanceStatsVisible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RCCProfilerRecordFrameRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RCCProfilerRecordFrameRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RCCProfilerRecordTimeFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RCCProfilerRecordTimeFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RotationType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RotationType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RotationType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SavedQualityLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SavedQualityLevel"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "SavedQualitySetting",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StartMaximized"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StartMaximized"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StartScreenPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StartScreenPosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StartScreenSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StartScreenSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TouchCameraMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TouchCameraMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "TouchCameraMovementMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TouchMovementMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TouchMovementMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TouchMovementMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UsedCoreGuiIsVisibleToggle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UsedCoreGuiIsVisibleToggle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UsedCustomGuiIsVisibleToggle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UsedCustomGuiIsVisibleToggle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UsedHideHudShortcut"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UsedHideHudShortcut"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VREnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VREnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VRRotationIntensity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VRRotationIntensity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_skin() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Skin"),
        superclass: Some(Cow::Borrowed("CharacterAppearance")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("SkinColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SkinColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Skin"),
                },
            );
            map.insert(
                Cow::Borrowed("SkinColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(226).unwrap(),
                },
            );
            map
        },
    };
}
fn generate_object_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ObjectValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(Cow::Borrowed("Value"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_beam() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Beam"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(18);
            map.insert(
                Cow::Borrowed("Attachment0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Attachment0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Attachment1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Attachment1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::ColorSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurveSize0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurveSize0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurveSize1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurveSize1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FaceCamera"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FaceCamera"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightEmission"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightEmission"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightInfluence"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Segments"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Segments"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Texture"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureLength"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureLength"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextureMode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Width0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Width0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Width1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Width1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ZOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ZOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(19);
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::ColorSequence {
                    value: ColorSequence {
                        keypoints: vec![
                            ColorSequenceKeypoint {
                                time: 0.0,
                                color: [1.0, 1.0, 1.0],
                            },
                            ColorSequenceKeypoint {
                                time: 1.0,
                                color: [1.0, 1.0, 1.0],
                            },
                        ],
                    },
                },
            );
            map.insert(
                Cow::Borrowed("CurveSize0"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("CurveSize1"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("FaceCamera"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("LightEmission"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Beam"),
                },
            );
            map.insert(Cow::Borrowed("Segments"), RbxValue::Int32 { value: 10 });
            map.insert(
                Cow::Borrowed("Texture"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("TextureLength"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("TextureMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TextureSpeed"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::NumberSequence {
                    value: NumberSequence {
                        keypoints: vec![
                            NumberSequenceKeypoint {
                                time: 0.0,
                                value: 0.5,
                                envelope: 0.0,
                            },
                            NumberSequenceKeypoint {
                                time: 1.0,
                                value: 0.5,
                                envelope: 0.0,
                            },
                        ],
                    },
                },
            );
            map.insert(Cow::Borrowed("Width0"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("Width1"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("ZOffset"), RbxValue::Float32 { value: 0.0 });
            map
        },
    };
}
fn generate_module_script() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ModuleScript"),
        superclass: Some(Cow::Borrowed("LuaSourceContainer")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("LinkedSource"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LinkedSource"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Source"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Source"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("LinkedSource"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ModuleScript"),
                },
            );
            map.insert(
                Cow::Borrowed("Source"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_viewport_frame() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ViewportFrame"),
        superclass: Some(Cow::Borrowed("GuiObject")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Ambient"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Ambient"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentCamera"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentCamera"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ImageColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ImageTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ImageTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightDirection"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightDirection"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(35);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Ambient"),
                RbxValue::Color3 {
                    value: [0.78431374, 0.78431374, 0.78431374],
                },
            );
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CurrentCamera"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("ImageColor3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("ImageTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("LightColor"),
                RbxValue::Color3 {
                    value: [0.54901963, 0.54901963, 0.54901963],
                },
            );
            map.insert(
                Cow::Borrowed("LightDirection"),
                RbxValue::Vector3 {
                    value: [-1.0, -1.0, -1.0],
                },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ViewportFrame"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_global_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GlobalSettings"),
        superclass: Some(Cow::Borrowed("GenericSettings")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_mesh_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MeshPart"),
        superclass: Some(Cow::Borrowed("TriangleMeshPart")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("MeshID"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MeshID"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MeshId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MeshId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RenderFidelity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RenderFidelity"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RenderFidelity")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureID"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureID"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(51);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionFidelity"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("MeshId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("MeshPart"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TextureID"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_replicated_first() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReplicatedFirst"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ReplicatedFirst"),
                },
            );
            map
        },
    };
}
fn generate_status() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Status"),
        superclass: Some(Cow::Borrowed("Model")),
        tags: RbxInstanceTags::DEPRECATED | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_dialog_choice() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DialogChoice"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("GoodbyeChoiceActive"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GoodbyeChoiceActive"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GoodbyeDialog"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GoodbyeDialog"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ResponseDialog"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ResponseDialog"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UserDialog"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UserDialog"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("GoodbyeChoiceActive"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("GoodbyeDialog"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("DialogChoice"),
                },
            );
            map.insert(
                Cow::Borrowed("ResponseDialog"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("UserDialog"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_custom_event() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CustomEvent"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CustomEvent"),
                },
            );
            map
        },
    };
}
fn generate_align_orientation() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AlignOrientation"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("AlignType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AlignType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AlignType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxAngularVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxAngularVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrimaryAxisOnly"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrimaryAxisOnly"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ReactionTorqueEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReactionTorqueEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Responsiveness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Responsiveness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RigidityEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RigidityEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(Cow::Borrowed("AlignType"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("MaxAngularVelocity"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxValue::Float32 { value: 10000.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AlignOrientation"),
                },
            );
            map.insert(
                Cow::Borrowed("PrimaryAxisOnly"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("ReactionTorqueEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Responsiveness"),
                RbxValue::Float32 { value: 10.0 },
            );
            map.insert(
                Cow::Borrowed("RigidityEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_virtual_input_manager() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VirtualInputManager"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("AdditionalLuaState"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AdditionalLuaState"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("AdditionalLuaState"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("VirtualInputManager"),
                },
            );
            map
        },
    };
}
fn generate_flyweight_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FlyweightService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_studio_theme() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StudioTheme"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_mouse_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MouseService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_binary_string_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BinaryStringValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map
        },
    };
}
fn generate_color3_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Color3Value"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_base_script() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BaseScript"),
        superclass: Some(Cow::Borrowed("LuaSourceContainer")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Disabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Disabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LinkedSource"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LinkedSource"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_http_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HttpService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("HttpEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HttpEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("HttpService"),
                },
            );
            map
        },
    };
}
fn generate_compressor_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CompressorSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Attack"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Attack"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GainMakeup"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GainMakeup"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Ratio"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Ratio"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Release"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Release"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SideChain"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SideChain"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Threshold"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Threshold"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(Cow::Borrowed("Attack"), RbxValue::Float32 { value: 0.1 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("GainMakeup"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CompressorSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Ratio"), RbxValue::Float32 { value: 40.0 });
            map.insert(Cow::Borrowed("Release"), RbxValue::Float32 { value: 0.1 });
            map.insert(Cow::Borrowed("SideChain"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Threshold"),
                RbxValue::Float32 { value: -40.0 },
            );
            map
        },
    };
}
fn generate_rendering_test() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RenderingTest"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ComparisonDiffThreshold"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ComparisonDiffThreshold"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ComparisonMethod"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ComparisonMethod"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "RenderingTestComparisonMethod",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ComparisonPsnrThreshold"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ComparisonPsnrThreshold"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Description"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Description"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FieldOfView"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FieldOfView"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Orientation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("QualityLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("QualityLevel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ShouldSkip"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShouldSkip"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Ticket"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Ticket"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("ComparisonDiffThreshold"),
                RbxValue::Int32 { value: 10 },
            );
            map.insert(
                Cow::Borrowed("ComparisonMethod"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("ComparisonPsnrThreshold"),
                RbxValue::Float32 { value: 50.0 },
            );
            map.insert(
                Cow::Borrowed("Description"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("FieldOfView"),
                RbxValue::Float32 { value: 70.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RenderingTest"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("QualityLevel"), RbxValue::Int32 { value: 21 });
            map.insert(Cow::Borrowed("ShouldSkip"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Ticket"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_selection_lasso() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SelectionLasso"),
        superclass: Some(Cow::Borrowed("GuiBase3d")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Humanoid"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Humanoid"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_arc_handles() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ArcHandles"),
        superclass: Some(Cow::Borrowed("HandlesBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Axes"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Axes"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Axes")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ArcHandles"),
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_text_box() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TextBox"),
        superclass: Some(Cow::Borrowed("GuiObject")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(30);
            map.insert(
                Cow::Borrowed("ClearTextOnFocus"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClearTextOnFocus"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CursorPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CursorPosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Font"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Font"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Font")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FontSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FontSize"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FontSize")),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsPassword"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsPassword"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LineHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LineHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ManualFocusRelease"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ManualFocusRelease"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MultiLine"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MultiLine"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OverlayNativeInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OverlayNativeInput"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PlaceholderColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlaceholderColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PlaceholderText"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlaceholderText"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SelectionStart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SelectionStart"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ShowNativeInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShowNativeInput"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Text"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Text"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextBounds"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextBounds"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextEditable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextEditable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextFits"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextFits"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextInputType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextInputType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextInputType")),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextScaled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextScaled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextStrokeColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextStrokeTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextTruncate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextTruncate"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextTruncate")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextWrap"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextWrap"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextWrapped"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextWrapped"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextXAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextXAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextXAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextYAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextYAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextYAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(57);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("ClearTextOnFocus"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CursorPosition"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Font"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("FontSize"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("IsPassword"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("LineHeight"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("ManualFocusRelease"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("MultiLine"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TextBox"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("OverlayNativeInput"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("PlaceholderColor3"),
                RbxValue::Color3 {
                    value: [0.7, 0.7, 0.7],
                },
            );
            map.insert(
                Cow::Borrowed("PlaceholderText"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("SelectionStart"),
                RbxValue::Int32 { value: -1 },
            );
            map.insert(
                Cow::Borrowed("ShowNativeInput"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Text"),
                RbxValue::String {
                    value: String::from("TextBox"),
                },
            );
            map.insert(
                Cow::Borrowed("TextColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("TextColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(
                Cow::Borrowed("TextEditable"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("TextInputType"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("TextScaled"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("TextSize"), RbxValue::Float32 { value: 8.0 });
            map.insert(
                Cow::Borrowed("TextStrokeColor3"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeTransparency"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("TextTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("TextTruncate"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("TextWrap"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("TextWrapped"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("TextXAlignment"), RbxValue::Enum { value: 2 });
            map.insert(Cow::Borrowed("TextYAlignment"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_light() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Light"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Brightness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Shadows"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Shadows"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_running_average_item_double() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RunningAverageItemDouble"),
        superclass: Some(Cow::Borrowed("StatsItem")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_player_scripts() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PlayerScripts"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_ui_base() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIBase"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_pv_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PVAdornment"),
        superclass: Some(Cow::Borrowed("GuiBase3d")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Adornee"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Adornee"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_mouse() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Mouse"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("Hit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Hit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Icon"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Icon"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Origin"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Origin"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Target"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Target"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TargetFilter"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetFilter"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TargetSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UnitRay"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UnitRay"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Ray")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ViewSizeX"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ViewSizeX"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ViewSizeY"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ViewSizeY"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("X"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("X"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Y"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Y"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("hit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("hit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("target"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("target"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_plugin() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Plugin"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("CollisionEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CollisionEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GridSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GridSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("HostDataModelType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HostDataModelType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "StudioDataModelType",
                    )),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UsesAssetInsertionDrag"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UsesAssetInsertionDrag"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_surface_light() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SurfaceLight"),
        superclass: Some(Cow::Borrowed("Light")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Angle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Angle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Face"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Face"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Range"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Range"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(Cow::Borrowed("Angle"), RbxValue::Float32 { value: 90.0 });
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SurfaceLight"),
                },
            );
            map.insert(Cow::Borrowed("Range"), RbxValue::Float32 { value: 16.0 });
            map.insert(Cow::Borrowed("Shadows"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_double_constrained_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DoubleConstrainedValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("ConstrainedValue"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ConstrainedValue"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MaxValue"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxValue"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MinValue"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MinValue"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("ConstrainedValue"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("MaxValue"), RbxValue::Float64 { value: 1.0 });
            map.insert(Cow::Borrowed("MinValue"), RbxValue::Float64 { value: 0.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(Cow::Borrowed("Value"), RbxValue::Float64 { value: 0.0 });
            map
        },
    };
}
fn generate_gamepad_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GamepadService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("GamepadService"),
                },
            );
            map
        },
    };
}
fn generate_part_operation_asset() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PartOperationAsset"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_plugin_toolbar_button() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginToolbarButton"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("ClickableWhenViewportHidden"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClickableWhenViewportHidden"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Icon"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Icon"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_echo_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("EchoSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Delay"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Delay"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DryLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DryLevel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Feedback"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Feedback"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WetLevel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WetLevel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(Cow::Borrowed("Delay"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("DryLevel"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Feedback"), RbxValue::Float32 { value: 0.5 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("EchoSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("WetLevel"), RbxValue::Float32 { value: 0.0 });
            map
        },
    };
}
fn generate_http_request() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HttpRequest"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_wedge_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("WedgePart"),
        superclass: Some(Cow::Borrowed("FormFactorPart")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(48);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Wedge"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_q_widget_plugin_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("QWidgetPluginGui"),
        superclass: Some(Cow::Borrowed("PluginGui")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_functional_test() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FunctionalTest"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Description"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Description"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Description"),
                RbxValue::String {
                    value: String::from("?"),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_group_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GroupService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("GroupService"),
                },
            );
            map
        },
    };
}
fn generate_line_handle_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LineHandleAdornment"),
        superclass: Some(Cow::Borrowed("HandleAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Length"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Length"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Thickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Thickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(Cow::Borrowed("Length"), RbxValue::Float32 { value: 5.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("LineHandleAdornment"),
                },
            );
            map.insert(
                Cow::Borrowed("SizeRelativeOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: -1 });
            map
        },
    };
}
fn generate_reflection_metadata_member() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataMember"),
        superclass: Some(Cow::Borrowed("ReflectionMetadataItem")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(14);
            map.insert(Cow::Borrowed("Browsable"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("ClassCategory"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ClientOnly"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Constraint"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("Deprecated"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("EditingDisabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("IsBackend"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map.insert(
                Cow::Borrowed("ScriptContext"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("ServerOnly"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("UIMaximum"), RbxValue::Float64 { value: 0.0 });
            map.insert(Cow::Borrowed("UIMinimum"), RbxValue::Float64 { value: 0.0 });
            map.insert(
                Cow::Borrowed("UINumTicks"),
                RbxValue::Float64 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("summary"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_sphere_handle_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SphereHandleAdornment"),
        superclass: Some(Cow::Borrowed("HandleAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Radius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Radius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SphereHandleAdornment"),
                },
            );
            map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("SizeRelativeOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: -1 });
            map
        },
    };
}
fn generate_rope_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RopeConstraint"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("CurrentDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Length"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Length"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Restitution"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Thickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Thickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(25).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Length"), RbxValue::Float32 { value: 5.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RopeConstraint"),
                },
            );
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Thickness"), RbxValue::Float32 { value: 0.1 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_script_context() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ScriptContext"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("ScriptsDisabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScriptsDisabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Script Context"),
                },
            );
            map
        },
    };
}
fn generate_tremolo_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TremoloSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Depth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Depth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Duty"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Duty"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Frequency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Frequency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("Depth"), RbxValue::Float32 { value: 1.0 });
            map.insert(Cow::Borrowed("Duty"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Frequency"), RbxValue::Float32 { value: 5.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TremoloSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map
        },
    };
}
fn generate_input_object() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("InputObject"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("Delta"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Delta"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("KeyCode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("KeyCode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("KeyCode")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UserInputState"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UserInputState"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UserInputState")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UserInputType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UserInputType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("UserInputType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_handles_base() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HandlesBase"),
        superclass: Some(Cow::Borrowed("PartAdornment")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_ui_text_size_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UITextSizeConstraint"),
        superclass: Some(Cow::Borrowed("UIConstraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("MaxTextSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxTextSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MinTextSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MinTextSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(Cow::Borrowed("MaxTextSize"), RbxValue::Int32 { value: 100 });
            map.insert(Cow::Borrowed("MinTextSize"), RbxValue::Int32 { value: 1 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UITextSizeConstraint"),
                },
            );
            map
        },
    };
}
fn generate_dynamic_rotate() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DynamicRotate"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("BaseAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BaseAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Constraint"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Active"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Active"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Attachment0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Attachment0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Attachment1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Attachment1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Visible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Visible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_network_client() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NetworkClient"),
        superclass: Some(Cow::Borrowed("NetworkPeer")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Ticket"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Ticket"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_tween_base() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TweenBase"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("PlaybackState"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlaybackState"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PlaybackState")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_ui_list_layout() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIListLayout"),
        superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Padding"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Padding"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("HorizontalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UIListLayout"),
                },
            );
            map.insert(Cow::Borrowed("Padding"), RbxValue::UDim { value: (0.0, 0) });
            map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("VerticalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map
        },
    };
}
fn generate_floor_wire() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FloorWire"),
        superclass: Some(Cow::Borrowed("GuiBase3d")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("CycleOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CycleOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("From"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("From"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StudsBetweenTextures"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StudsBetweenTextures"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Texture"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextureSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextureSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("To"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("To"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Velocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WireRadius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WireRadius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("CycleOffset"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("From"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("FloorWire"),
                },
            );
            map.insert(
                Cow::Borrowed("StudsBetweenTextures"),
                RbxValue::Float32 { value: 4.0 },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("TextureSize"),
                RbxValue::Vector2 { value: [1.0, 1.0] },
            );
            map.insert(Cow::Borrowed("To"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Velocity"), RbxValue::Float32 { value: 2.0 });
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("WireRadius"),
                RbxValue::Float32 { value: 0.0625 },
            );
            map
        },
    };
}
fn generate_animation_controller() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AnimationController"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AnimationController"),
                },
            );
            map
        },
    };
}
fn generate_bool_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BoolValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(Cow::Borrowed("Value"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_version_control_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VersionControlService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_remote_event() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RemoteEvent"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RemoteEvent"),
                },
            );
            map
        },
    };
}
fn generate_file() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("File"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("FileName"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FileName"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("FileSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FileSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_touch_transmitter() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TouchTransmitter"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_text_filter_result() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TextFilterResult"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_starter_pack() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StarterPack"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("StarterPack"),
                },
            );
            map
        },
    };
}
fn generate_skateboard_platform() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SkateboardPlatform"),
        superclass: Some(Cow::Borrowed("Part")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("Controller"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Controller"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ControllingHumanoid"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ControllingHumanoid"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Steer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Steer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StickyWheels"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StickyWheels"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Throttle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Throttle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(52);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SkateboardPlatform"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(Cow::Borrowed("Steer"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("StickyWheels"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("Throttle"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_hopper_bin() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HopperBin"),
        superclass: Some(Cow::Borrowed("BackpackItem")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Active"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Active"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BinType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BinType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("BinType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("BinType"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("HopperBin"),
                },
            );
            map.insert(
                Cow::Borrowed("TextureId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_lighting() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Lighting"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(18);
            map.insert(
                Cow::Borrowed("Ambient"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Ambient"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Brightness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClockTime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClockTime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ColorShift_Bottom"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ColorShift_Bottom"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ColorShift_Top"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ColorShift_Top"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ExposureCompensation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExposureCompensation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FogColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FogColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FogEnd"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FogEnd"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FogStart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FogStart"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GeographicLatitude"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GeographicLatitude"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GlobalShadows"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GlobalShadows"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LegacyOutlines"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LegacyOutlines"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OutdoorAmbient"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OutdoorAmbient"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Outlines"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Outlines"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ShadowColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShadowColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ShadowSoftness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShadowSoftness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Technology"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Technology"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Technology")),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TimeOfDay"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TimeOfDay"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(17);
            map.insert(
                Cow::Borrowed("Ambient"),
                RbxValue::Color3 {
                    value: [0.5, 0.5, 0.5],
                },
            );
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("ClockTime"),
                RbxValue::Float32 { value: 14.0 },
            );
            map.insert(
                Cow::Borrowed("ColorShift_Bottom"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("ColorShift_Top"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("ExposureCompensation"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("FogColor"),
                RbxValue::Color3 {
                    value: [0.75, 0.75, 0.75],
                },
            );
            map.insert(
                Cow::Borrowed("FogEnd"),
                RbxValue::Float32 { value: 100000.0 },
            );
            map.insert(Cow::Borrowed("FogStart"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("GeographicLatitude"),
                RbxValue::Float32 { value: 41.7333 },
            );
            map.insert(
                Cow::Borrowed("GlobalShadows"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Lighting"),
                },
            );
            map.insert(
                Cow::Borrowed("OutdoorAmbient"),
                RbxValue::Color3 {
                    value: [0.5, 0.5, 0.5],
                },
            );
            map.insert(Cow::Borrowed("Outlines"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("ShadowColor"),
                RbxValue::Color3 {
                    value: [0.7, 0.7, 0.72],
                },
            );
            map.insert(
                Cow::Borrowed("ShadowSoftness"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(
                Cow::Borrowed("TimeOfDay"),
                RbxValue::String {
                    value: String::from("14:00:00"),
                },
            );
            map
        },
    };
}
fn generate_guid_registry_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuidRegistryService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_bindable_event() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BindableEvent"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Event"),
                },
            );
            map
        },
    };
}
fn generate_screen_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ScreenGui"),
        superclass: Some(Cow::Borrowed("LayerCollector")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("DisplayOrder"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DisplayOrder"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IgnoreGuiInset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IgnoreGuiInset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OnTopOfCoreBlur"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OnTopOfCoreBlur"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("DisplayOrder"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("IgnoreGuiInset"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ScreenGui"),
                },
            );
            map.insert(
                Cow::Borrowed("OnTopOfCoreBlur"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("ResetOnSpawn"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
            map
        },
    };
}
fn generate_mem_storage_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MemStorageService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("MemStorageService"),
                },
            );
            map
        },
    };
}
fn generate_reflection_metadata() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadata"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_block_mesh() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BlockMesh"),
        superclass: Some(Cow::Borrowed("BevelMesh")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Mesh"),
                },
            );
            map.insert(
                Cow::Borrowed("Offset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Scale"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("VertexColor"),
                RbxValue::Vector3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map
        },
    };
}
fn generate_network_peer() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NetworkPeer"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_plugin_mouse() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginMouse"),
        superclass: Some(Cow::Borrowed("Mouse")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_cluster_packet_cache() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ClusterPacketCache"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_remote_function() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RemoteFunction"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RemoteFunction"),
                },
            );
            map
        },
    };
}
fn generate_task_scheduler() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TaskScheduler"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("SchedulerDutyCycle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SchedulerDutyCycle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SchedulerRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SchedulerRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ThreadPoolConfig"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ThreadPoolConfig"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ThreadPoolConfig")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ThreadPoolSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ThreadPoolSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_gui_button() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiButton"),
        superclass: Some(Cow::Borrowed("GuiObject")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("AutoButtonColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoButtonColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Modal"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Modal"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Selected"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Selected"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Style"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Style"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ButtonStyle")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_clothing() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Clothing"),
        superclass: Some(Cow::Borrowed("CharacterAppearance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_asset_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AssetService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AssetService"),
                },
            );
            map
        },
    };
}
fn generate_gui_base() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiBase"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_manual_weld() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ManualWeld"),
        superclass: Some(Cow::Borrowed("ManualSurfaceJointInstance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ManualWeld"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_script_debugger() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ScriptDebugger"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("CurrentLine"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentLine"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsDebugging"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsDebugging"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsPaused"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsPaused"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Script"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Script"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_plugin_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginGui"),
        superclass: Some(Cow::Borrowed("LayerCollector")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Title"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Title"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_starter_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StarterGui"),
        superclass: Some(Cow::Borrowed("BasePlayerGui")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("ProcessUserInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ProcessUserInput"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ResetPlayerGuiOnSpawn"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ResetPlayerGuiOnSpawn"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScreenOrientation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScreenOrientation"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScreenOrientation")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ShowDevelopmentGui"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShowDevelopmentGui"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("StarterGui"),
                },
            );
            map.insert(
                Cow::Borrowed("ProcessUserInput"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("ResetPlayerGuiOnSpawn"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("ScreenOrientation"),
                RbxValue::Enum { value: 2 },
            );
            map.insert(
                Cow::Borrowed("ShowDevelopmentGui"),
                RbxValue::Bool { value: true },
            );
            map
        },
    };
}
fn generate_flag_stand_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FlagStandService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_click_detector() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ClickDetector"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("CursorIcon"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CursorIcon"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxActivationDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxActivationDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("CursorIcon"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("MaxActivationDistance"),
                RbxValue::Float32 { value: 32.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ClickDetector"),
                },
            );
            map
        },
    };
}
fn generate_app_storage_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AppStorageService"),
        superclass: Some(Cow::Borrowed("LocalStorageService")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_package_link() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PackageLink"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("AutoUpdate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoUpdate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PackageId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PackageId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Status"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Status"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("VersionNumber"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VersionNumber"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_advanced_dragger() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AdvancedDragger"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AdvancedDragger"),
                },
            );
            map
        },
    };
}
fn generate_motor_feature() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MotorFeature"),
        superclass: Some(Cow::Borrowed("Feature")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(Cow::Borrowed("FaceId"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("InOut"), RbxValue::Enum { value: 2 });
            map.insert(Cow::Borrowed("LeftRight"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("MotorFeature"),
                },
            );
            map.insert(Cow::Borrowed("TopBottom"), RbxValue::Enum { value: 1 });
            map
        },
    };
}
fn generate_part_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PartAdornment"),
        superclass: Some(Cow::Borrowed("GuiBase3d")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Adornee"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Adornee"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_animation_track() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AnimationTrack"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("Animation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Animation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsPlaying"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsPlaying"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Length"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Length"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Looped"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Looped"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Priority"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Priority"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AnimationPriority")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Speed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Speed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TimePosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TimePosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WeightCurrent"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WeightCurrent"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WeightTarget"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WeightTarget"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_selection_point_lasso() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SelectionPointLasso"),
        superclass: Some(Cow::Borrowed("SelectionLasso")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Point"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Point"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(Cow::Borrowed("Humanoid"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SelectionPointLasso"),
                },
            );
            map.insert(
                Cow::Borrowed("Point"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_studio_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StudioService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("ActiveScript"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ActiveScript"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("StudioLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StudioLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("StudioService"),
                },
            );
            map
        },
    };
}
fn generate_flag() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Flag"),
        superclass: Some(Cow::Borrowed("Tool")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TeamColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("CanBeDropped"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Grip"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripForward"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, -1.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripPos"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripRight"),
                RbxValue::Vector3 {
                    value: [1.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("GripUp"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("ManualActivationOnly"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Flag"),
                },
            );
            map.insert(
                Cow::Borrowed("RequiresHandle"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("TextureId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("ToolTip"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_touch_input_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TouchInputService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TouchInputService"),
                },
            );
            map
        },
    };
}
fn generate_bloom_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BloomEffect"),
        superclass: Some(Cow::Borrowed("PostEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Intensity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Intensity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Threshold"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Threshold"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Intensity"), RbxValue::Float32 { value: 0.4 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Bloom"),
                },
            );
            map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 24.0 });
            map.insert(
                Cow::Borrowed("Threshold"),
                RbxValue::Float32 { value: 0.95 },
            );
            map
        },
    };
}
fn generate_platform() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Platform"),
        superclass: Some(Cow::Borrowed("Part")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_badge_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BadgeService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BadgeService"),
                },
            );
            map
        },
    };
}
fn generate_align_position() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("AlignPosition"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("ApplyAtCenterOfMass"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ApplyAtCenterOfMass"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxForce"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ReactionForceEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReactionForceEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Responsiveness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Responsiveness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RigidityEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RigidityEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("ApplyAtCenterOfMass"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("MaxForce"),
                RbxValue::Float32 { value: 10000.0 },
            );
            map.insert(
                Cow::Borrowed("MaxVelocity"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("AlignPosition"),
                },
            );
            map.insert(
                Cow::Borrowed("ReactionForceEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Responsiveness"),
                RbxValue::Float32 { value: 10.0 },
            );
            map.insert(
                Cow::Borrowed("RigidityEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_chorus_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ChorusSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Depth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Depth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Mix"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Mix"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Rate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Rate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("Depth"), RbxValue::Float32 { value: 0.15 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Mix"), RbxValue::Float32 { value: 0.5 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ChorusSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Rate"), RbxValue::Float32 { value: 0.5 });
            map
        },
    };
}
fn generate_stats() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Stats"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(10);
            map.insert(
                Cow::Borrowed("ContactsCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ContactsCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DataReceiveKbps"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataReceiveKbps"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DataSendKbps"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataSendKbps"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("HeartbeatTimeMs"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeartbeatTimeMs"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("InstanceCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InstanceCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MovingPrimitivesCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MovingPrimitivesCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PhysicsReceiveKbps"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PhysicsReceiveKbps"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PhysicsSendKbps"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PhysicsSendKbps"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PhysicsStepTimeMs"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PhysicsStepTimeMs"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PrimitivesCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrimitivesCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Stats"),
                },
            );
            map
        },
    };
}
fn generate_ui_component() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIComponent"),
        superclass: Some(Cow::Borrowed("UIBase")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_ui_table_layout() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UITableLayout"),
        superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("FillEmptySpaceColumns"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FillEmptySpaceColumns"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FillEmptySpaceRows"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FillEmptySpaceRows"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MajorAxis"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MajorAxis"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TableMajorAxis")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Padding"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Padding"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("FillEmptySpaceColumns"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("FillEmptySpaceRows"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("HorizontalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(Cow::Borrowed("MajorAxis"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UITableLayout"),
                },
            );
            map.insert(
                Cow::Borrowed("Padding"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("VerticalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map
        },
    };
}
fn generate_localization_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LocalizationService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("ForcePlayModeGameLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ForcePlayModeGameLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ForcePlayModeRobloxLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ForcePlayModeRobloxLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsTextScraperRunning"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsTextScraperRunning"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RobloxForcePlayModeGameLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RobloxForcePlayModeGameLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RobloxForcePlayModeRobloxLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RobloxForcePlayModeRobloxLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RobloxLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RobloxLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SystemLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SystemLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("IsTextScraperRunning"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("LocalizationService"),
                },
            );
            map.insert(
                Cow::Borrowed("RobloxForcePlayModeGameLocaleId"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("RobloxForcePlayModeRobloxLocaleId"),
                RbxValue::String {
                    value: String::from("en-us"),
                },
            );
            map
        },
    };
}
fn generate_ui_scale() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIScale"),
        superclass: Some(Cow::Borrowed("UIComponent")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Scale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Scale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UIScale"),
                },
            );
            map.insert(Cow::Borrowed("Scale"), RbxValue::Float32 { value: 1.0 });
            map
        },
    };
}
fn generate_text_button() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TextButton"),
        superclass: Some(Cow::Borrowed("GuiButton")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(19);
            map.insert(
                Cow::Borrowed("Font"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Font"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Font")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FontSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FontSize"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FontSize")),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LineHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LineHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LocalizedText"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LocalizedText"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Text"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Text"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextBounds"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextBounds"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextFits"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextFits"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextScaled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextScaled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextStrokeColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextStrokeTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextTruncate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextTruncate"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextTruncate")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextWrap"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextWrap"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextWrapped"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextWrapped"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextXAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextXAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextXAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextYAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextYAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextYAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(49);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoButtonColor"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Font"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("FontSize"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("LineHeight"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Modal"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TextButton"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Selected"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Text"),
                RbxValue::String {
                    value: String::from("Button"),
                },
            );
            map.insert(
                Cow::Borrowed("TextColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("TextColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("TextScaled"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("TextSize"), RbxValue::Float32 { value: 8.0 });
            map.insert(
                Cow::Borrowed("TextStrokeColor3"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeTransparency"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("TextTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("TextTruncate"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("TextWrap"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("TextWrapped"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("TextXAlignment"), RbxValue::Enum { value: 2 });
            map.insert(Cow::Borrowed("TextYAlignment"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_server_storage() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ServerStorage"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ServerStorage"),
                },
            );
            map
        },
    };
}
fn generate_part_operation() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PartOperation"),
        superclass: Some(Cow::Borrowed("TriangleMeshPart")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("RenderFidelity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RenderFidelity"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("RenderFidelity")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TriangleCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TriangleCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UsePartColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UsePartColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(50);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionFidelity"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("PartOperation"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("UsePartColor"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_run_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RunService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Run Service"),
                },
            );
            map
        },
    };
}
fn generate_joint_instance() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("JointInstance"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Active"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Active"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("C0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("C0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("C1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Part0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Part0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Part1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Part1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("part1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("part1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Part1")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_rotate_p() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RotateP"),
        superclass: Some(Cow::Borrowed("DynamicRotate")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("BaseAngle"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RotateP"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_roblox_replicated_storage() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RobloxReplicatedStorage"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE
            | RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RobloxReplicatedStorage"),
                },
            );
            map
        },
    };
}
fn generate_geometry() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Geometry"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Geometry"),
                },
            );
            map
        },
    };
}
fn generate_pitch_shift_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PitchShiftSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Octave"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Octave"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("PitchShiftSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Octave"), RbxValue::Float32 { value: 1.25 });
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map
        },
    };
}
fn generate_form_factor_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FormFactorPart"),
        superclass: Some(Cow::Borrowed("BasePart")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("FormFactor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FormFactor"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FormFactor")),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("formFactorRaw")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("formFactor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("formFactor"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FormFactor")),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("FormFactor")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("formFactorRaw"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("formFactorRaw"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FormFactor")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("FormFactor")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_teams() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Teams"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Teams"),
                },
            );
            map
        },
    };
}
fn generate_int_constrained_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("IntConstrainedValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("ConstrainedValue"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ConstrainedValue"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MaxValue"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxValue"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MinValue"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MinValue"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("ConstrainedValue"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(Cow::Borrowed("MaxValue"), RbxValue::Int32 { value: 10 });
            map.insert(Cow::Borrowed("MinValue"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(Cow::Borrowed("Value"), RbxValue::Int32 { value: 0 });
            map
        },
    };
}
fn generate_int_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("IntValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map.insert(Cow::Borrowed("Value"), RbxValue::Int32 { value: 0 });
            map
        },
    };
}
fn generate_virtual_user() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("VirtualUser"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_core_script() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CoreScript"),
        superclass: Some(Cow::Borrowed("BaseScript")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_ui_aspect_ratio_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIAspectRatioConstraint"),
        superclass: Some(Cow::Borrowed("UIConstraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("AspectRatio"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AspectRatio"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AspectType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AspectType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AspectType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DominantAxis"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DominantAxis"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("DominantAxis")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("AspectRatio"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("AspectType"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("DominantAxis"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UIAspectRatioConstraint"),
                },
            );
            map
        },
    };
}
fn generate_cookies_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CookiesService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CookiesService"),
                },
            );
            map
        },
    };
}
fn generate_mesh_content_provider() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("MeshContentProvider"),
        superclass: Some(Cow::Borrowed("CacheableContentProvider")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("MeshContentProvider"),
                },
            );
            map
        },
    };
}
fn generate_hat() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Hat"),
        superclass: Some(Cow::Borrowed("Accoutrement")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("AttachmentForward"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, -1.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPoint"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPos"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentRight"),
                RbxValue::Vector3 {
                    value: [1.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentUp"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Hat"),
                },
            );
            map
        },
    };
}
fn generate_dragger() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Dragger"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Dragger"),
                },
            );
            map
        },
    };
}
fn generate_hole() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Hole"),
        superclass: Some(Cow::Borrowed("Feature")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(Cow::Borrowed("FaceId"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("InOut"), RbxValue::Enum { value: 2 });
            map.insert(Cow::Borrowed("LeftRight"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Hole"),
                },
            );
            map.insert(Cow::Borrowed("TopBottom"), RbxValue::Enum { value: 1 });
            map
        },
    };
}
fn generate_instance() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Instance"),
        superclass: None,
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("Archivable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Archivable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("archivable")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClassName"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClassName"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DataCost"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataCost"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Name"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Parent"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Parent"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RobloxLocked"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RobloxLocked"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Tags"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Tags"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BinaryString),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Custom,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("archivable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("archivable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Archivable")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("className"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("className"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("ClassName")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_third_party_user_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ThirdPartyUserService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_ab_test_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ABTestService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ABTestService"),
                },
            );
            map
        },
    };
}
fn generate_reflection_metadata_events() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ReflectionMetadataEvents"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_friend_pages() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FriendPages"),
        superclass: Some(Cow::Borrowed("Pages")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_decal() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Decal"),
        superclass: Some(Cow::Borrowed("FaceInstance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LocalTransparencyModifier"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Shiny"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Shiny"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Specular"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Specular"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Texture"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Decal"),
                },
            );
            map.insert(Cow::Borrowed("Shiny"), RbxValue::Float32 { value: 20.0 });
            map.insert(Cow::Borrowed("Specular"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("Texture"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map
        },
    };
}
fn generate_ball_socket_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BallSocketConstraint"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LimitsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Radius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Radius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Restitution"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TwistLimitsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TwistLimitsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TwistLowerAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TwistLowerAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TwistUpperAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TwistUpperAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UpperAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UpperAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(1009).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("BallSocketConstraint"),
                },
            );
            map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.15 });
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("TwistLimitsEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("TwistLowerAngle"),
                RbxValue::Float32 { value: -45.0 },
            );
            map.insert(
                Cow::Borrowed("TwistUpperAngle"),
                RbxValue::Float32 { value: 45.0 },
            );
            map.insert(
                Cow::Borrowed("UpperAngle"),
                RbxValue::Float32 { value: 45.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_lua_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LuaSettings"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::SETTINGS,
        properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("AreScriptStartsReported"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AreScriptStartsReported"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DefaultWaitTime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DefaultWaitTime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GcFrequency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GcFrequency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GcLimit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GcLimit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GcPause"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GcPause"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GcStepMul"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GcStepMul"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WaitingThreadsBudget"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WaitingThreadsBudget"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_ui_size_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UISizeConstraint"),
        superclass: Some(Cow::Borrowed("UIConstraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("MaxSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MinSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MinSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("MaxSize"),
                RbxValue::Vector2 {
                    value: [1000000000.0, 1000000000.0],
                },
            );
            map.insert(
                Cow::Borrowed("MinSize"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UISizeConstraint"),
                },
            );
            map
        },
    };
}
fn generate_face_instance() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FaceInstance"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Face"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Face"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_animation() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Animation"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("AnimationId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AnimationId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("AnimationId"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Animation"),
                },
            );
            map
        },
    };
}
fn generate_solid_model_content_provider() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SolidModelContentProvider"),
        superclass: Some(Cow::Borrowed("CacheableContentProvider")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SolidModelContentProvider"),
                },
            );
            map
        },
    };
}
fn generate_debug_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DebugSettings"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SETTINGS,
        properties: {
            let mut map = HashMap::with_capacity(20);
            map.insert(
                Cow::Borrowed("DataModel"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataModel"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ErrorReporting"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ErrorReporting"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ErrorReporting")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("GfxCard"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GfxCard"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("InstanceCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InstanceCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IsFmodProfilingEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsFmodProfilingEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsScriptStackTracingEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsScriptStackTracingEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("JobCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("JobCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LuaRamLimit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LuaRamLimit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OsIs64Bit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OsIs64Bit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OsPlatform"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OsPlatform"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OsPlatformId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OsPlatformId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OsVer"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OsVer"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PlayerCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlayerCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ReportSoundWarnings"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReportSoundWarnings"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RobloxProductName"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RobloxProductName"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RobloxVersion"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RobloxVersion"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SIMD"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SIMD"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SystemProductName"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SystemProductName"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TickCountPreciseOverride"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TickCountPreciseOverride"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "TickCountSampleMethod",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VideoMemory"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VideoMemory"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_surface_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SurfaceGui"),
        superclass: Some(Cow::Borrowed("LayerCollector")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(
                Cow::Borrowed("Active"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Active"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Adornee"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Adornee"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AlwaysOnTop"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CanvasSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CanvasSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClipsDescendants"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Face"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Face"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightInfluence"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PixelsPerStud"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PixelsPerStud"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SizingMode"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SizingMode"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "SurfaceGuiSizingMode",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ToolPunchThroughDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ToolPunchThroughDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ZOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ZOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(18);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("CanvasSize"),
                RbxValue::Vector2 {
                    value: [800.0, 600.0],
                },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SurfaceGui"),
                },
            );
            map.insert(
                Cow::Borrowed("PixelsPerStud"),
                RbxValue::Float32 { value: 50.0 },
            );
            map.insert(
                Cow::Borrowed("ResetOnSpawn"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("SizingMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("ToolPunchThroughDistance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("ZIndexBehavior"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("ZOffset"), RbxValue::Float32 { value: 0.0 });
            map
        },
    };
}
fn generate_plugin_gui_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginGuiService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("PluginGuiService"),
                },
            );
            map
        },
    };
}
fn generate_tween_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TweenService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TweenService"),
                },
            );
            map
        },
    };
}
fn generate_ui_grid_layout() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIGridLayout"),
        superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("AbsoluteCellCount"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AbsoluteCellCount"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AbsoluteCellSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AbsoluteCellSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CellPadding"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CellPadding"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CellSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CellSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FillDirectionMaxCells"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FillDirectionMaxCells"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StartCorner"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StartCorner"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("StartCorner")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("CellPadding"),
                RbxValue::UDim2 {
                    value: (0.0, 5, 0.0, 5),
                },
            );
            map.insert(
                Cow::Borrowed("CellSize"),
                RbxValue::UDim2 {
                    value: (0.0, 100, 0.0, 100),
                },
            );
            map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FillDirectionMaxCells"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("HorizontalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UIGridLayout"),
                },
            );
            map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("StartCorner"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("VerticalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map
        },
    };
}
fn generate_spawn_location() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SpawnLocation"),
        superclass: Some(Cow::Borrowed("Part")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("AllowTeamChangeOnTouch"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllowTeamChangeOnTouch"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Duration"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Duration"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Neutral"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Neutral"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TeamColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(54);
            map.insert(
                Cow::Borrowed("AllowTeamChangeOnTouch"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(Cow::Borrowed("Duration"), RbxValue::Int32 { value: 10 });
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SpawnLocation"),
                },
            );
            map.insert(Cow::Borrowed("Neutral"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_union_operation() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UnionOperation"),
        superclass: Some(Cow::Borrowed("PartOperation")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(50);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionFidelity"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Union"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("RenderFidelity"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("UsePartColor"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_tween() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Tween"),
        superclass: Some(Cow::Borrowed("TweenBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Instance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Instance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TweenInfo"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TweenInfo"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                        "TweenInfo",
                    )),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Tween"),
                },
            );
            map
        },
    };
}
fn generate_user_input_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UserInputService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(23);
            map.insert(
                Cow::Borrowed("AccelerometerEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AccelerometerEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("BottomBarSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BottomBarSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GamepadEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GamepadEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GazeSelectionEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GazeSelectionEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("GyroscopeEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("GyroscopeEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("KeyboardEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("KeyboardEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LegacyInputEventsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LegacyInputEventsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ModalEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ModalEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MouseBehavior"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MouseBehavior"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("MouseBehavior")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MouseDeltaSensitivity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MouseDeltaSensitivity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MouseEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MouseEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MouseIconEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MouseIconEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NavBarSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NavBarSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OnScreenKeyboardAnimationDuration"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OnScreenKeyboardAnimationDuration"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OnScreenKeyboardPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OnScreenKeyboardPosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OnScreenKeyboardSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OnScreenKeyboardSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OnScreenKeyboardVisible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OnScreenKeyboardVisible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("OverrideMouseIconBehavior"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OverrideMouseIconBehavior"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "OverrideMouseIconBehavior",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RightBarSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightBarSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("StatusBarSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StatusBarSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TouchEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TouchEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UserHeadCFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UserHeadCFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("VREnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VREnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("GazeSelectionEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("LegacyInputEventsEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("ModalEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("MouseBehavior"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("MouseDeltaSensitivity"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("MouseIconEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map.insert(
                Cow::Borrowed("OverrideMouseIconBehavior"),
                RbxValue::Enum { value: 0 },
            );
            map
        },
    };
}
fn generate_ui_inline_layout() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("UIInlineLayout"),
        superclass: Some(Cow::Borrowed("UIGridStyleLayout")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("InlineAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InlineAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InlineAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("InlinePadding"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("InlinePadding"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(Cow::Borrowed("FillDirection"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("HorizontalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(
                Cow::Borrowed("InlineAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(
                Cow::Borrowed("InlinePadding"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("UIInlineLayout"),
                },
            );
            map.insert(Cow::Borrowed("SortOrder"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("VerticalAlignment"),
                RbxValue::Enum { value: 1 },
            );
            map
        },
    };
}
fn generate_manual_glue() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ManualGlue"),
        superclass: Some(Cow::Borrowed("ManualSurfaceJointInstance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ManualGlue"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_ray_value() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RayValue"),
        superclass: Some(Cow::Borrowed("ValueBase")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Value"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Value"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed("Ray")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Value"),
                },
            );
            map
        },
    };
}
fn generate_hint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Hint"),
        superclass: Some(Cow::Borrowed("Message")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Message"),
                },
            );
            map.insert(
                Cow::Borrowed("Text"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_emotes_pages() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("EmotesPages"),
        superclass: Some(Cow::Borrowed("InventoryPages")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_drafts_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DraftsService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("DraftsService"),
                },
            );
            map
        },
    };
}
fn generate_data_model_mesh() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DataModelMesh"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Offset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Offset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Scale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Scale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VertexColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VertexColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_starter_player_scripts() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StarterPlayerScripts"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_smoke() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Smoke"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Opacity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Opacity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("opacity_xml")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RiseVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RiseVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("riseVelocity_xml")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("size_xml")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("opacity_xml"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("opacity_xml"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Opacity")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("riseVelocity_xml"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("riseVelocity_xml"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("RiseVelocity")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("size_xml"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("size_xml"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Size")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Smoke"),
                },
            );
            map.insert(Cow::Borrowed("Opacity"), RbxValue::Float32 { value: 0.5 });
            map.insert(
                Cow::Borrowed("RiseVelocity"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("Size"), RbxValue::Float32 { value: 1.0 });
            map
        },
    };
}
fn generate_plugin_action() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginAction"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(
                Cow::Borrowed("ActionId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ActionId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AllowBinding"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllowBinding"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Checked"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Checked"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DefaultShortcut"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DefaultShortcut"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("StatusTip"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StatusTip"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Text"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Text"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(Cow::Borrowed("Checked"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("DefaultShortcut"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_runtime_script_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RuntimeScriptService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_running_average_item_int() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RunningAverageItemInt"),
        superclass: Some(Cow::Borrowed("StatsItem")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_total_count_time_interval_item() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TotalCountTimeIntervalItem"),
        superclass: Some(Cow::Borrowed("StatsItem")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_backpack() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Backpack"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Backpack"),
                },
            );
            map
        },
    };
}
fn generate_flange_sound_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FlangeSoundEffect"),
        superclass: Some(Cow::Borrowed("SoundEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("Depth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Depth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Mix"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Mix"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Rate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Rate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(Cow::Borrowed("Depth"), RbxValue::Float32 { value: 0.45 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("Mix"), RbxValue::Float32 { value: 0.85 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("FlangeSoundEffect"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Rate"), RbxValue::Float32 { value: 5.0 });
            map
        },
    };
}
fn generate_stats_item() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("StatsItem"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_surface_selection() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SurfaceSelection"),
        superclass: Some(Cow::Borrowed("PartAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("TargetSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(7);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SurfaceSelection"),
                },
            );
            map.insert(Cow::Borrowed("TargetSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
fn generate_login_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LoginService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_camera() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Camera"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraSubject"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraSubject"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CameraType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CoordinateFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CoordinateFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("CFrame")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("FieldOfView"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FieldOfView"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Focus"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Focus"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HeadLocked"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeadLocked"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HeadScale"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeadScale"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NearPlaneZ"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NearPlaneZ"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ViewportSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ViewportSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("focus"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("focus"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Focus")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(8);
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [
                        0.0, 20.0, 20.0, 1.0, 0.0, 0.0, 0.0, 0.7071068, 0.7071068, 0.0, -0.7071068,
                        0.7071068,
                    ],
                },
            );
            map.insert(
                Cow::Borrowed("CameraSubject"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("CameraType"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FieldOfView"),
                RbxValue::Float32 { value: 70.0 },
            );
            map.insert(
                Cow::Borrowed("Focus"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, -5.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("HeadLocked"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("HeadScale"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Camera"),
                },
            );
            map
        },
    };
}
fn generate_text_label() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TextLabel"),
        superclass: Some(Cow::Borrowed("GuiLabel")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(19);
            map.insert(
                Cow::Borrowed("Font"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Font"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Font")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FontSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FontSize"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FontSize")),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LineHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LineHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LocalizedText"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LocalizedText"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Text"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Text"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextBounds"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextBounds"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextFits"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextFits"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextScaled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextScaled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextStrokeColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextStrokeTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextTruncate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextTruncate"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextTruncate")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextWrap"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextWrap"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TextWrapped"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextWrapped"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextXAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextXAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextXAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TextYAlignment"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TextYAlignment"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("TextYAlignment")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(45);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Font"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("FontSize"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("LineHeight"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("TextLabel"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Text"),
                RbxValue::String {
                    value: String::from("Label"),
                },
            );
            map.insert(
                Cow::Borrowed("TextColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("TextColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("TextScaled"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("TextSize"), RbxValue::Float32 { value: 8.0 });
            map.insert(
                Cow::Borrowed("TextStrokeColor3"),
                RbxValue::Color3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("TextStrokeTransparency"),
                RbxValue::Float32 { value: 1.0 },
            );
            map.insert(
                Cow::Borrowed("TextTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("TextTruncate"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("TextWrap"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("TextWrapped"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("TextXAlignment"), RbxValue::Enum { value: 2 });
            map.insert(Cow::Borrowed("TextYAlignment"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_roblox_plugin_gui_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RobloxPluginGuiService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RobloxPluginGuiService"),
                },
            );
            map
        },
    };
}
fn generate_network_settings() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NetworkSettings"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(34);
            map.insert(
                Cow::Borrowed("ArePhysicsRejectionsReported"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ArePhysicsRejectionsReported"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ClientPhysicsSendRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ClientPhysicsSendRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DataGCRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataGCRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DataMtuAdjust"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataMtuAdjust"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DataSendPriority"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataSendPriority"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PacketPriority")),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("DataSendRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DataSendRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ExtraMemoryUsed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ExtraMemoryUsed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("FreeMemoryMBytes"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FreeMemoryMBytes"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("IncommingReplicationLag"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IncommingReplicationLag"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("IsQueueErrorComputed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsQueueErrorComputed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NetworkOwnerRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NetworkOwnerRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PhysicsMtuAdjust"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PhysicsMtuAdjust"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PhysicsSendPriority"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PhysicsSendPriority"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("PacketPriority")),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("PhysicsSendRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PhysicsSendRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PreferredClientPort"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PreferredClientPort"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintBits"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintBits"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintEvents"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintEvents"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintFilters"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintFilters"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintInstances"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintInstances"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintJoinSizeBreakdown"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintJoinSizeBreakdown"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintPhysicsErrors"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintPhysicsErrors"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintProperties"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintProperties"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintSplitMessage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintSplitMessage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintStreamInstanceQuota"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintStreamInstanceQuota"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PrintTouches"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PrintTouches"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ProxyEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ProxyEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ProxyURL"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ProxyURL"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ReceiveRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReceiveRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float64),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RenderStreamedRegions"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RenderStreamedRegions"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ShowActiveAnimationAsset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ShowActiveAnimationAsset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TouchSendRate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TouchSendRate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TrackDataTypes"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TrackDataTypes"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TrackPhysicsDetails"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TrackPhysicsDetails"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UsePhysicsPacketCache"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UsePhysicsPacketCache"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_sound_group() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SoundGroup"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Volume"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Volume"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("SoundGroup"),
                },
            );
            map.insert(Cow::Borrowed("Volume"), RbxValue::Float32 { value: 0.5 });
            map
        },
    };
}
fn generate_spawner_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("SpawnerService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_dock_widget_plugin_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DockWidgetPluginGui"),
        superclass: Some(Cow::Borrowed("PluginGui")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("HostWidgetWasRestored"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HostWidgetWasRestored"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_log_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LogService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("LogService"),
                },
            );
            map
        },
    };
}
fn generate_message() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Message"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Text"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Text"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Message"),
                },
            );
            map.insert(
                Cow::Borrowed("Text"),
                RbxValue::String {
                    value: String::from(""),
                },
            );
            map
        },
    };
}
fn generate_flag_stand() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("FlagStand"),
        superclass: Some(Cow::Borrowed("Part")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TeamColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(50);
            map.insert(Cow::Borrowed("Anchored"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BackSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("BottomSurface"), RbxValue::Enum { value: 4 });
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("CanCollide"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("CastShadow"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxValue::Int32 { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxValue::PhysicalProperties { value: None },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FormFactor"), RbxValue::Enum { value: 1 });
            map.insert(Cow::Borrowed("Friction"), RbxValue::Float32 { value: 0.3 });
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("FrontSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("LeftSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Locked"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Massless"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("Material"), RbxValue::Enum { value: 256 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("FlagStand"),
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxValue::Float32 { value: 0.5 },
            );
            map.insert(Cow::Borrowed("RightSurface"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("RootPriority"), RbxValue::Int32 { value: 0 });
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Shape"), RbxValue::Enum { value: 1 });
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::Vector3 {
                    value: [4.0, 1.2, 2.0],
                },
            );
            map.insert(
                Cow::Borrowed("TeamColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxValue::Float32 { value: -0.5 },
            );
            map.insert(Cow::Borrowed("TopParamB"), RbxValue::Float32 { value: 0.5 });
            map.insert(Cow::Borrowed("TopSurface"), RbxValue::Enum { value: 3 });
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map
        },
    };
}
fn generate_hinge_constraint() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("HingeConstraint"),
        superclass: Some(Cow::Borrowed("Constraint")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("ActuatorType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ActuatorType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ActuatorType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AngularSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AngularVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CurrentAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CurrentAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LimitsEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LowerAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LowerAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxAcceleration"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MotorMaxAcceleration"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MotorMaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Radius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Radius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Restitution"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ServoMaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ServoMaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TargetAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("UpperAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UpperAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(18);
            map.insert(Cow::Borrowed("ActuatorType"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("AngularSpeed"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("AngularVelocity"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Attachment0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Attachment1"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(1009).unwrap(),
                },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("LimitsEnabled"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("LowerAngle"),
                RbxValue::Float32 { value: -45.0 },
            );
            map.insert(
                Cow::Borrowed("MotorMaxAcceleration"),
                RbxValue::Float32 {
                    value: 1000000000.0,
                },
            );
            map.insert(
                Cow::Borrowed("MotorMaxTorque"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("HingeConstraint"),
                },
            );
            map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.15 });
            map.insert(
                Cow::Borrowed("Restitution"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("ServoMaxTorque"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("TargetAngle"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("UpperAngle"),
                RbxValue::Float32 { value: 45.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: false });
            map
        },
    };
}
fn generate_frame() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Frame"),
        superclass: Some(Cow::Borrowed("GuiObject")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Style"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Style"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("FrameStyle")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(30);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Frame"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("Style"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_pages() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Pages"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("IsFinished"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("IsFinished"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_localization_table() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("LocalizationTable"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Contents"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Contents"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Custom,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DevelopmentLanguage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DevelopmentLanguage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Root"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Root"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SourceLocaleId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SourceLocaleId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("DevelopmentLanguage"),
                RbxValue::String {
                    value: String::from("en-us"),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("LocalizationTable"),
                },
            );
            map.insert(Cow::Borrowed("Root"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("SourceLocaleId"),
                RbxValue::String {
                    value: String::from("en-us"),
                },
            );
            map
        },
    };
}
fn generate_gui_base2d() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("GuiBase2d"),
        superclass: Some(Cow::Borrowed("GuiBase")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("AbsolutePosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AbsolutePosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AbsoluteRotation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AbsoluteRotation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AbsoluteSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AbsoluteSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoLocalize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Localize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Localize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RootLocalizationTable"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_color_correction_effect() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ColorCorrectionEffect"),
        superclass: Some(Cow::Borrowed("PostEffect")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Brightness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Contrast"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Contrast"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Saturation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Saturation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TintColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TintColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("Brightness"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Contrast"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ColorCorrection"),
                },
            );
            map.insert(
                Cow::Borrowed("Saturation"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("TintColor"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map
        },
    };
}
fn generate_visit() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Visit"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Visit"),
                },
            );
            map
        },
    };
}
fn generate_keyframe_sequence() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("KeyframeSequence"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(3);
            map.insert(
                Cow::Borrowed("AuthoredHipHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AuthoredHipHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Loop"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Loop"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Priority"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Priority"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("AnimationPriority")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("AuthoredHipHeight"),
                RbxValue::Float32 { value: 2.0 },
            );
            map.insert(Cow::Borrowed("Loop"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("KeyframeSequence"),
                },
            );
            map.insert(Cow::Borrowed("Priority"), RbxValue::Enum { value: 2 });
            map
        },
    };
}
fn generate_triangle_mesh_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("TriangleMeshPart"),
        superclass: Some(Cow::Borrowed("BasePart")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("CollisionFidelity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CollisionFidelity"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("CollisionFidelity")),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_particle_emitter() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ParticleEmitter"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(20);
            map.insert(
                Cow::Borrowed("Acceleration"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Acceleration"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::ColorSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Drag"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Drag"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("EmissionDirection"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("EmissionDirection"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NormalId")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Enabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Enabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Lifetime"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Lifetime"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightEmission"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightEmission"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LightInfluence"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LockedToPart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LockedToPart"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Rate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Rate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RotSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RotSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Rotation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Speed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Speed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberRange),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SpreadAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SpreadAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Texture"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::NumberSequence),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VelocityInheritance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VelocityInheritance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VelocitySpread"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VelocitySpread"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ZOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ZOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(21);
            map.insert(
                Cow::Borrowed("Acceleration"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::ColorSequence {
                    value: ColorSequence {
                        keypoints: vec![
                            ColorSequenceKeypoint {
                                time: 0.0,
                                color: [1.0, 1.0, 1.0],
                            },
                            ColorSequenceKeypoint {
                                time: 1.0,
                                color: [1.0, 1.0, 1.0],
                            },
                        ],
                    },
                },
            );
            map.insert(Cow::Borrowed("Drag"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("EmissionDirection"),
                RbxValue::Enum { value: 1 },
            );
            map.insert(Cow::Borrowed("Enabled"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("Lifetime"),
                RbxValue::NumberRange { value: (5.0, 10.0) },
            );
            map.insert(
                Cow::Borrowed("LightEmission"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("LightInfluence"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("LockedToPart"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ParticleEmitter"),
                },
            );
            map.insert(Cow::Borrowed("Rate"), RbxValue::Float32 { value: 20.0 });
            map.insert(
                Cow::Borrowed("RotSpeed"),
                RbxValue::NumberRange { value: (0.0, 0.0) },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxValue::NumberRange { value: (0.0, 0.0) },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::NumberSequence {
                    value: NumberSequence {
                        keypoints: vec![
                            NumberSequenceKeypoint {
                                time: 0.0,
                                value: 1.0,
                                envelope: 0.0,
                            },
                            NumberSequenceKeypoint {
                                time: 1.0,
                                value: 1.0,
                                envelope: 0.0,
                            },
                        ],
                    },
                },
            );
            map.insert(
                Cow::Borrowed("Speed"),
                RbxValue::NumberRange { value: (5.0, 5.0) },
            );
            map.insert(
                Cow::Borrowed("SpreadAngle"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/particles/sparkles_main.dds"),
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::NumberSequence {
                    value: NumberSequence {
                        keypoints: vec![
                            NumberSequenceKeypoint {
                                time: 0.0,
                                value: 0.0,
                                envelope: 0.0,
                            },
                            NumberSequenceKeypoint {
                                time: 1.0,
                                value: 0.0,
                                envelope: 0.0,
                            },
                        ],
                    },
                },
            );
            map.insert(
                Cow::Borrowed("VelocityInheritance"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("VelocitySpread"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("ZOffset"), RbxValue::Float32 { value: 0.0 });
            map
        },
    };
}
fn generate_rocket_propulsion() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("RocketPropulsion"),
        superclass: Some(Cow::Borrowed("BodyMover")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(11);
            map.insert(
                Cow::Borrowed("CartoonFactor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CartoonFactor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxThrust"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxThrust"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxTorque"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Target"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Target"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TargetOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TargetRadius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetRadius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ThrustD"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ThrustD"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ThrustP"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ThrustP"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TurnD"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TurnD"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TurnP"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TurnP"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("CartoonFactor"),
                RbxValue::Float32 { value: 0.7 },
            );
            map.insert(Cow::Borrowed("MaxSpeed"), RbxValue::Float32 { value: 30.0 });
            map.insert(
                Cow::Borrowed("MaxThrust"),
                RbxValue::Float32 { value: 4000.0 },
            );
            map.insert(
                Cow::Borrowed("MaxTorque"),
                RbxValue::Vector3 {
                    value: [400000.0, 400000.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("RocketPropulsion"),
                },
            );
            map.insert(Cow::Borrowed("Target"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("TargetOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("TargetRadius"),
                RbxValue::Float32 { value: 4.0 },
            );
            map.insert(Cow::Borrowed("ThrustD"), RbxValue::Float32 { value: 0.001 });
            map.insert(Cow::Borrowed("ThrustP"), RbxValue::Float32 { value: 5.0 });
            map.insert(Cow::Borrowed("TurnD"), RbxValue::Float32 { value: 500.0 });
            map.insert(Cow::Borrowed("TurnP"), RbxValue::Float32 { value: 3000.0 });
            map
        },
    };
}
fn generate_core_script_sync_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CoreScriptSyncService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_accoutrement() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Accoutrement"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(5);
            map.insert(
                Cow::Borrowed("AttachmentForward"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AttachmentForward"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPoint"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AttachmentPoint"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPos"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AttachmentPos"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentRight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AttachmentRight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentUp"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AttachmentUp"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(6);
            map.insert(
                Cow::Borrowed("AttachmentForward"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, -1.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPoint"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentPos"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentRight"),
                RbxValue::Vector3 {
                    value: [1.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("AttachmentUp"),
                RbxValue::Vector3 {
                    value: [0.0, 1.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Accoutrement"),
                },
            );
            map
        },
    };
}
fn generate_scrolling_frame() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ScrollingFrame"),
        superclass: Some(Cow::Borrowed("GuiObject")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(15);
            map.insert(
                Cow::Borrowed("AbsoluteWindowSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AbsoluteWindowSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("BottomImage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BottomImage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CanvasPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CanvasPosition"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CanvasSize"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CanvasSize"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::UDim2),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ElasticBehavior"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ElasticBehavior"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ElasticBehavior")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HorizontalScrollBarInset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HorizontalScrollBarInset"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScrollBarInset")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MidImage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MidImage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScrollBarImageColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScrollBarImageColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScrollBarImageTransparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScrollBarImageTransparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScrollBarThickness"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScrollBarThickness"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScrollingDirection"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScrollingDirection"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "ScrollingDirection",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ScrollingEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ScrollingEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TopImage"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TopImage"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Content),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VerticalScrollBarInset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VerticalScrollBarInset"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("ScrollBarInset")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("VerticalScrollBarPosition"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("VerticalScrollBarPosition"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "VerticalScrollBarPosition",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(43);
            map.insert(Cow::Borrowed("Active"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("AnchorPoint"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("AutoLocalize"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(194).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundColor3"),
                RbxValue::Color3 {
                    value: [0.6392157, 0.63529414, 0.64705884],
                },
            );
            map.insert(
                Cow::Borrowed("BackgroundTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("BorderColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(26).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("BorderColor3"),
                RbxValue::Color3 {
                    value: [0.10588236, 0.16470589, 0.20784315],
                },
            );
            map.insert(Cow::Borrowed("BorderMode"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("BorderSizePixel"),
                RbxValue::Int32 { value: 1 },
            );
            map.insert(
                Cow::Borrowed("BottomImage"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/ui/Scroll/scroll-bottom.png"),
                },
            );
            map.insert(
                Cow::Borrowed("CanvasPosition"),
                RbxValue::Vector2 { value: [0.0, 0.0] },
            );
            map.insert(
                Cow::Borrowed("CanvasSize"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 2.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("ClipsDescendants"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("Draggable"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("ElasticBehavior"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("HorizontalScrollBarInset"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("LayoutOrder"), RbxValue::Int32 { value: 0 });
            map.insert(Cow::Borrowed("Localize"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("MidImage"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/ui/Scroll/scroll-middle.png"),
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ScrollingFrame"),
                },
            );
            map.insert(
                Cow::Borrowed("NextSelectionDown"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionLeft"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionRight"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("NextSelectionUp"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(
                Cow::Borrowed("RootLocalizationTable"),
                RbxValue::Ref { value: None },
            );
            map.insert(Cow::Borrowed("Rotation"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("ScrollBarImageColor3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("ScrollBarImageTransparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("ScrollBarThickness"),
                RbxValue::Int32 { value: 12 },
            );
            map.insert(
                Cow::Borrowed("ScrollingDirection"),
                RbxValue::Enum { value: 4 },
            );
            map.insert(
                Cow::Borrowed("ScrollingEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("Selectable"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxValue::UDim2 {
                    value: (0.0, 0, 0.0, 0),
                },
            );
            map.insert(Cow::Borrowed("SizeConstraint"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("TopImage"),
                RbxValue::Content {
                    value: String::from("rbxasset://textures/ui/Scroll/scroll-top.png"),
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("VerticalScrollBarInset"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(
                Cow::Borrowed("VerticalScrollBarPosition"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: 1 });
            map
        },
    };
}
fn generate_cone_handle_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ConeHandleAdornment"),
        superclass: Some(Cow::Borrowed("HandleAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Height"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Height"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Radius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Radius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(Cow::Borrowed("Height"), RbxValue::Float32 { value: 2.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ConeHandleAdornment"),
                },
            );
            map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 0.5 });
            map.insert(
                Cow::Borrowed("SizeRelativeOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: -1 });
            map
        },
    };
}
fn generate_humanoid() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Humanoid"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(34);
            map.insert(
                Cow::Borrowed("AutoJumpEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoJumpEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AutoRotate"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutoRotate"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AutomaticScalingEnabled"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AutomaticScalingEnabled"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BreakJointsOnDeath"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BreakJointsOnDeath"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CameraOffset"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CameraOffset"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CollisionType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CollisionType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "HumanoidCollisionType",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("DisplayDistanceType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("DisplayDistanceType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "HumanoidDisplayDistanceType",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FloorMaterial"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FloorMaterial"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Material")),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Health"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Health"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("HealthDisplayDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HealthDisplayDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HealthDisplayType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HealthDisplayType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed(
                        "HumanoidHealthDisplayType",
                    )),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("HipHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HipHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Jump"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Jump"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("JumpHeight"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("JumpHeight"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("JumpPower"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("JumpPower"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftLeg"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftLeg"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("MaxHealth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxHealth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MaxSlopeAngle"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MaxSlopeAngle"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("MoveDirection"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("MoveDirection"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("NameDisplayDistance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NameDisplayDistance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("NameOcclusion"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("NameOcclusion"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("NameOcclusion")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("PlatformStand"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("PlatformStand"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RigType"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RigType"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("HumanoidRigType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightLeg"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightLeg"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RootPart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RootPart"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("SeatPart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SeatPart"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Sit"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Sit"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TargetPoint"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TargetPoint"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Torso"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Torso"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("UseJumpPower"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("UseJumpPower"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WalkSpeed"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WalkSpeed"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("WalkToPart"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WalkToPart"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("WalkToPoint"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("WalkToPoint"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("maxHealth"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("maxHealth"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(31);
            map.insert(
                Cow::Borrowed("AutoJumpEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(Cow::Borrowed("AutoRotate"), RbxValue::Bool { value: true });
            map.insert(
                Cow::Borrowed("AutomaticScalingEnabled"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("BreakJointsOnDeath"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("CameraOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("CollisionType"), RbxValue::Enum { value: 0 });
            map.insert(
                Cow::Borrowed("DisplayDistanceType"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("Health"), RbxValue::Float32 { value: 100.0 });
            map.insert(
                Cow::Borrowed("HealthDisplayDistance"),
                RbxValue::Float32 { value: 100.0 },
            );
            map.insert(
                Cow::Borrowed("HealthDisplayType"),
                RbxValue::Enum { value: 0 },
            );
            map.insert(Cow::Borrowed("HipHeight"), RbxValue::Float32 { value: 0.0 });
            map.insert(Cow::Borrowed("Jump"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("JumpHeight"),
                RbxValue::Float32 { value: 7.2 },
            );
            map.insert(
                Cow::Borrowed("JumpPower"),
                RbxValue::Float32 { value: 50.0 },
            );
            map.insert(Cow::Borrowed("LeftLeg"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("MaxHealth"),
                RbxValue::Float32 { value: 100.0 },
            );
            map.insert(
                Cow::Borrowed("MaxSlopeAngle"),
                RbxValue::Float32 { value: 89.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Humanoid"),
                },
            );
            map.insert(
                Cow::Borrowed("NameDisplayDistance"),
                RbxValue::Float32 { value: 100.0 },
            );
            map.insert(Cow::Borrowed("NameOcclusion"), RbxValue::Enum { value: 2 });
            map.insert(
                Cow::Borrowed("PlatformStand"),
                RbxValue::Bool { value: false },
            );
            map.insert(Cow::Borrowed("RigType"), RbxValue::Enum { value: 0 });
            map.insert(Cow::Borrowed("RightLeg"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Sit"), RbxValue::Bool { value: false });
            map.insert(
                Cow::Borrowed("TargetPoint"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(Cow::Borrowed("Torso"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("UseJumpPower"),
                RbxValue::Bool { value: true },
            );
            map.insert(
                Cow::Borrowed("WalkSpeed"),
                RbxValue::Float32 { value: 16.0 },
            );
            map.insert(Cow::Borrowed("WalkToPart"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("WalkToPoint"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("maxHealth"),
                RbxValue::Float32 { value: 100.0 },
            );
            map
        },
    };
}
fn generate_glue() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Glue"),
        superclass: Some(Cow::Borrowed("JointInstance")),
        tags: RbxInstanceTags::DEPRECATED,
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("F0"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("F0"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("F1"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("F1"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("F2"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("F2"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("F3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("F3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(9);
            map.insert(
                Cow::Borrowed("C0"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("C1"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("F0"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("F1"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("F2"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("F3"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Glue"),
                },
            );
            map.insert(Cow::Borrowed("Part0"), RbxValue::Ref { value: None });
            map.insert(Cow::Borrowed("Part1"), RbxValue::Ref { value: None });
            map
        },
    };
}
fn generate_texture() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("Texture"),
        superclass: Some(Cow::Borrowed("Decal")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(4);
            map.insert(
                Cow::Borrowed("OffsetStudsU"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OffsetStudsU"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("OffsetStudsV"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("OffsetStudsV"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StudsPerTileU"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StudsPerTileU"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("StudsPerTileV"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("StudsPerTileV"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [1.0, 1.0, 1.0],
                },
            );
            map.insert(Cow::Borrowed("Face"), RbxValue::Enum { value: 5 });
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Texture"),
                },
            );
            map.insert(
                Cow::Borrowed("OffsetStudsU"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(
                Cow::Borrowed("OffsetStudsV"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Shiny"), RbxValue::Float32 { value: 20.0 });
            map.insert(Cow::Borrowed("Specular"), RbxValue::Float32 { value: 0.0 });
            map.insert(
                Cow::Borrowed("StudsPerTileU"),
                RbxValue::Float32 { value: 2.0 },
            );
            map.insert(
                Cow::Borrowed("StudsPerTileV"),
                RbxValue::Float32 { value: 2.0 },
            );
            map.insert(
                Cow::Borrowed("Texture"),
                RbxValue::Content {
                    value: String::from(""),
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map
        },
    };
}
fn generate_network_marker() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("NetworkMarker"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_base_part() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BasePart"),
        superclass: Some(Cow::Borrowed("PVInstance")),
        tags: RbxInstanceTags::NOT_BROWSABLE | RbxInstanceTags::NOT_CREATABLE,
        properties: {
            let mut map = HashMap::with_capacity(56);
            map.insert(
                Cow::Borrowed("Anchored"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Anchored"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BackParamA"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackParamA"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BackParamB"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackParamB"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BackSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BackSurfaceInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BackSurfaceInput"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BottomParamA"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BottomParamA"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BottomParamB"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BottomParamB"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BottomSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BottomSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BottomSurfaceInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BottomSurfaceInput"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("BrickColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("BrickColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Color")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CFrame"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::CFrame),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CanCollide"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CanCollide"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CastShadow"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CastShadow"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CenterOfMass"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CenterOfMass"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CollisionGroupId"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CollisionGroupId"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("CollisionGroups"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CollisionGroups"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::String),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Custom,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("Color3uint8")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Color3uint8"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Color3uint8"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3uint8),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Color")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("CustomPhysicalProperties"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("CustomPhysicalProperties"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::PhysicalProperties),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Elasticity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Elasticity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Friction"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Friction"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("FrontParamA"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FrontParamA"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FrontParamB"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FrontParamB"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FrontSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FrontSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("FrontSurfaceInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("FrontSurfaceInput"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftParamA"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftParamA"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftParamB"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftParamB"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftSurfaceInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftSurfaceInput"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LocalTransparencyModifier"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LocalTransparencyModifier"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::HIDDEN | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Locked"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Locked"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Massless"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Massless"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Material"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Material"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("Material")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Orientation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Orientation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Position"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Position"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ReceiveAge"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ReceiveAge"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::HIDDEN
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Reflectance"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Reflectance"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("ResizeIncrement"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ResizeIncrement"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("ResizeableFaces"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("ResizeableFaces"),
                    value_type: RbxPropertyTypeDescriptor::UnimplementedType(Cow::Borrowed(
                        "Faces",
                    )),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RightParamA"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightParamA"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightParamB"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightParamB"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightSurfaceInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightSurfaceInput"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RootPriority"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RootPriority"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RotVelocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RotVelocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Rotation"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Rotation"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("Size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: Some(Cow::Borrowed("size")),
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("SpecificGravity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SpecificGravity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_REPLICATED
                        | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TopParamA"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TopParamA"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TopParamB"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TopParamB"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TopSurface"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TopSurface"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("SurfaceType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TopSurfaceInput"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TopSurfaceInput"),
                    value_type: RbxPropertyTypeDescriptor::Enum(Cow::Borrowed("InputType")),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Transparency"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Velocity"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Velocity"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("brickColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("brickColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::DEPRECATED | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Color")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("size"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("size"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Vector3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: false,
                    canonical_name: Some(Cow::Borrowed("Size")),
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: false,
                },
            );
            map
        },
        default_properties: HashMap::new(),
    };
}
fn generate_core_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CoreGui"),
        superclass: Some(Cow::Borrowed("BasePlayerGui")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("SelectionImageObject"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Ref),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Version"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Version"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Int32),
                    tags: RbxPropertyTags::NOT_REPLICATED | RbxPropertyTags::READ_ONLY,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::Read,
                    serializes: false,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CoreGui"),
                },
            );
            map.insert(
                Cow::Borrowed("SelectionImageObject"),
                RbxValue::Ref { value: None },
            );
            map
        },
    };
}
fn generate_plugin_manager() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PluginManager"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_body_mover() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyMover"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_insert_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("InsertService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::SERVICE,
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("AllowClientInsertModels"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllowClientInsertModels"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::NOT_SCRIPTABLE,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::None,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("AllowInsertFreeModels"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("AllowInsertFreeModels"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::DEPRECATED
                        | RbxPropertyTags::NOT_BROWSABLE
                        | RbxPropertyTags::NOT_REPLICATED,
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("AllowInsertFreeModels"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("InsertService"),
                },
            );
            map
        },
    };
}
fn generate_cylinder_handle_adornment() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("CylinderHandleAdornment"),
        superclass: Some(Cow::Borrowed("HandleAdornment")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Height"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Height"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("Radius"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Radius"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Float32),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(Cow::Borrowed("Adornee"), RbxValue::Ref { value: None });
            map.insert(
                Cow::Borrowed("AlwaysOnTop"),
                RbxValue::Bool { value: false },
            );
            map.insert(
                Cow::Borrowed("CFrame"),
                RbxValue::CFrame {
                    value: [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
                },
            );
            map.insert(
                Cow::Borrowed("Color"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("Color3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(Cow::Borrowed("Height"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("CylinderHandleAdornment"),
                },
            );
            map.insert(Cow::Borrowed("Radius"), RbxValue::Float32 { value: 1.0 });
            map.insert(
                Cow::Borrowed("SizeRelativeOffset"),
                RbxValue::Vector3 {
                    value: [0.0, 0.0, 0.0],
                },
            );
            map.insert(
                Cow::Borrowed("Transparency"),
                RbxValue::Float32 { value: 0.0 },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map.insert(Cow::Borrowed("ZIndex"), RbxValue::Int32 { value: -1 });
            map
        },
    };
}
fn generate_body_colors() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BodyColors"),
        superclass: Some(Cow::Borrowed("CharacterAppearance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(12);
            map.insert(
                Cow::Borrowed("HeadColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeadColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("HeadColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("HeadColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftArmColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftArmColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LeftArmColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftArmColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("LeftLegColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftLegColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("LeftLegColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("LeftLegColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightArmColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightArmColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RightArmColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightArmColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("RightLegColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightLegColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("RightLegColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("RightLegColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map.insert(
                Cow::Borrowed("TorsoColor"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TorsoColor"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::BrickColor),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: false,
                },
            );
            map.insert(
                Cow::Borrowed("TorsoColor3"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("TorsoColor3"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Color3),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(13);
            map.insert(
                Cow::Borrowed("HeadColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(226).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("HeadColor3"),
                RbxValue::Color3 {
                    value: [0.9921569, 0.9176471, 0.5529412],
                },
            );
            map.insert(
                Cow::Borrowed("LeftArmColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(226).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("LeftArmColor3"),
                RbxValue::Color3 {
                    value: [0.9921569, 0.9176471, 0.5529412],
                },
            );
            map.insert(
                Cow::Borrowed("LeftLegColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("LeftLegColor3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Body Colors"),
                },
            );
            map.insert(
                Cow::Borrowed("RightArmColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(226).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("RightArmColor3"),
                RbxValue::Color3 {
                    value: [0.9921569, 0.9176471, 0.5529412],
                },
            );
            map.insert(
                Cow::Borrowed("RightLegColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(23).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("RightLegColor3"),
                RbxValue::Color3 {
                    value: [0.050980397, 0.41176474, 0.6745098],
                },
            );
            map.insert(
                Cow::Borrowed("TorsoColor"),
                RbxValue::BrickColor {
                    value: BrickColor::from_number(28).unwrap(),
                },
            );
            map.insert(
                Cow::Borrowed("TorsoColor3"),
                RbxValue::Color3 {
                    value: [0.15686275, 0.49803925, 0.2784314],
                },
            );
            map
        },
    };
}
fn generate_package_service() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("PackageService"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE
            | RbxInstanceTags::NOT_REPLICATED
            | RbxInstanceTags::SERVICE,
        properties: HashMap::new(),
        default_properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("Instance"),
                },
            );
            map
        },
    };
}
fn generate_base_player_gui() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("BasePlayerGui"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::NOT_CREATABLE,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_data_store_pages() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("DataStorePages"),
        superclass: Some(Cow::Borrowed("Pages")),
        tags: RbxInstanceTags::NOT_CREATABLE | RbxInstanceTags::NOT_REPLICATED,
        properties: HashMap::new(),
        default_properties: HashMap::new(),
    };
}
fn generate_force_field() -> RbxClassDescriptor {
    return RbxClassDescriptor {
        name: Cow::Borrowed("ForceField"),
        superclass: Some(Cow::Borrowed("Instance")),
        tags: RbxInstanceTags::empty(),
        properties: {
            let mut map = HashMap::with_capacity(1);
            map.insert(
                Cow::Borrowed("Visible"),
                RbxPropertyDescriptor {
                    name: Cow::Borrowed("Visible"),
                    value_type: RbxPropertyTypeDescriptor::Data(RbxValueType::Bool),
                    tags: RbxPropertyTags::empty(),
                    is_canonical: true,
                    canonical_name: None,
                    serialized_name: None,
                    scriptability: RbxPropertyScriptability::ReadWrite,
                    serializes: true,
                },
            );
            map
        },
        default_properties: {
            let mut map = HashMap::with_capacity(2);
            map.insert(
                Cow::Borrowed("Name"),
                RbxValue::String {
                    value: String::from("ForceField"),
                },
            );
            map.insert(Cow::Borrowed("Visible"), RbxValue::Bool { value: true });
            map
        },
    };
}
pub fn generate_classes() -> HashMap<Cow<'static, str>, RbxClassDescriptor> {
    let mut map = HashMap::with_capacity(414);
    map.insert(Cow::Borrowed("ImageButton"), generate_image_button());
    map.insert(Cow::Borrowed("SpotLight"), generate_spot_light());
    map.insert(Cow::Borrowed("Pants"), generate_pants());
    map.insert(
        Cow::Borrowed("SpringConstraint"),
        generate_spring_constraint(),
    );
    map.insert(
        Cow::Borrowed("ServerScriptService"),
        generate_server_script_service(),
    );
    map.insert(Cow::Borrowed("VRService"), generate_vr_service());
    map.insert(Cow::Borrowed("BrowserService"), generate_browser_service());
    map.insert(Cow::Borrowed("RodConstraint"), generate_rod_constraint());
    map.insert(Cow::Borrowed("FileMesh"), generate_file_mesh());
    map.insert(Cow::Borrowed("Debris"), generate_debris());
    map.insert(
        Cow::Borrowed("NetworkReplicator"),
        generate_network_replicator(),
    );
    map.insert(Cow::Borrowed("Part"), generate_part());
    map.insert(Cow::Borrowed("VehicleSeat"), generate_vehicle_seat());
    map.insert(Cow::Borrowed("PluginMenu"), generate_plugin_menu());
    map.insert(
        Cow::Borrowed("ReflectionMetadataClasses"),
        generate_reflection_metadata_classes(),
    );
    map.insert(
        Cow::Borrowed("ServiceProvider"),
        generate_service_provider(),
    );
    map.insert(
        Cow::Borrowed("StopWatchReporter"),
        generate_stop_watch_reporter(),
    );
    map.insert(Cow::Borrowed("Model"), generate_model());
    map.insert(
        Cow::Borrowed("TeleportService"),
        generate_teleport_service(),
    );
    map.insert(
        Cow::Borrowed("CollectionService"),
        generate_collection_service(),
    );
    map.insert(
        Cow::Borrowed("GoogleAnalyticsConfiguration"),
        generate_google_analytics_configuration(),
    );
    map.insert(
        Cow::Borrowed("LocalStorageService"),
        generate_local_storage_service(),
    );
    map.insert(Cow::Borrowed("Vector3Value"), generate_vector3_value());
    map.insert(Cow::Borrowed("NetworkServer"), generate_network_server());
    map.insert(
        Cow::Borrowed("ContentProvider"),
        generate_content_provider(),
    );
    map.insert(Cow::Borrowed("BodyThrust"), generate_body_thrust());
    map.insert(
        Cow::Borrowed("NoCollisionConstraint"),
        generate_no_collision_constraint(),
    );
    map.insert(
        Cow::Borrowed("ParabolaAdornment"),
        generate_parabola_adornment(),
    );
    map.insert(Cow::Borrowed("Feature"), generate_feature());
    map.insert(Cow::Borrowed("InventoryPages"), generate_inventory_pages());
    map.insert(Cow::Borrowed("PhysicsService"), generate_physics_service());
    map.insert(Cow::Borrowed("Pose"), generate_pose());
    map.insert(
        Cow::Borrowed("ContextActionService"),
        generate_context_action_service(),
    );
    map.insert(Cow::Borrowed("Dialog"), generate_dialog());
    map.insert(Cow::Borrowed("Motor"), generate_motor());
    map.insert(
        Cow::Borrowed("ReflectionMetadataItem"),
        generate_reflection_metadata_item(),
    );
    map.insert(
        Cow::Borrowed("GenericSettings"),
        generate_generic_settings(),
    );
    map.insert(Cow::Borrowed("VelocityMotor"), generate_velocity_motor());
    map.insert(
        Cow::Borrowed("ReplicatedStorage"),
        generate_replicated_storage(),
    );
    map.insert(Cow::Borrowed("Configuration"), generate_configuration());
    map.insert(
        Cow::Borrowed("CylindricalConstraint"),
        generate_cylindrical_constraint(),
    );
    map.insert(
        Cow::Borrowed("SkateboardController"),
        generate_skateboard_controller(),
    );
    map.insert(Cow::Borrowed("Terrain"), generate_terrain());
    map.insert(
        Cow::Borrowed("ReflectionMetadataEnum"),
        generate_reflection_metadata_enum(),
    );
    map.insert(
        Cow::Borrowed("ChangeHistoryService"),
        generate_change_history_service(),
    );
    map.insert(Cow::Borrowed("SoundEffect"), generate_sound_effect());
    map.insert(Cow::Borrowed("PluginToolbar"), generate_plugin_toolbar());
    map.insert(
        Cow::Borrowed("ImageHandleAdornment"),
        generate_image_handle_adornment(),
    );
    map.insert(Cow::Borrowed("BlurEffect"), generate_blur_effect());
    map.insert(
        Cow::Borrowed("HumanoidController"),
        generate_humanoid_controller(),
    );
    map.insert(Cow::Borrowed("LocalScript"), generate_local_script());
    map.insert(
        Cow::Borrowed("BrickColorValue"),
        generate_brick_color_value(),
    );
    map.insert(Cow::Borrowed("Folder"), generate_folder());
    map.insert(Cow::Borrowed("Attachment"), generate_attachment());
    map.insert(
        Cow::Borrowed("CharacterAppearance"),
        generate_character_appearance(),
    );
    map.insert(
        Cow::Borrowed("CustomEventReceiver"),
        generate_custom_event_receiver(),
    );
    map.insert(
        Cow::Borrowed("NonReplicatedCSGDictionaryService"),
        generate_non_replicated_csg_dictionary_service(),
    );
    map.insert(Cow::Borrowed("Handles"), generate_handles());
    map.insert(Cow::Borrowed("PointLight"), generate_point_light());
    map.insert(
        Cow::Borrowed("NotificationService"),
        generate_notification_service(),
    );
    map.insert(Cow::Borrowed("KeyframeMarker"), generate_keyframe_marker());
    map.insert(Cow::Borrowed("PointsService"), generate_points_service());
    map.insert(Cow::Borrowed("SocialService"), generate_social_service());
    map.insert(
        Cow::Borrowed("PhysicsSettings"),
        generate_physics_settings(),
    );
    map.insert(Cow::Borrowed("Sound"), generate_sound());
    map.insert(Cow::Borrowed("Weld"), generate_weld());
    map.insert(
        Cow::Borrowed("PrismaticConstraint"),
        generate_prismatic_constraint(),
    );
    map.insert(
        Cow::Borrowed("ReflectionMetadataYieldFunctions"),
        generate_reflection_metadata_yield_functions(),
    );
    map.insert(Cow::Borrowed("CharacterMesh"), generate_character_mesh());
    map.insert(
        Cow::Borrowed("UserStorageService"),
        generate_user_storage_service(),
    );
    map.insert(Cow::Borrowed("ScriptService"), generate_script_service());
    map.insert(
        Cow::Borrowed("EqualizerSoundEffect"),
        generate_equalizer_sound_effect(),
    );
    map.insert(Cow::Borrowed("Sparkles"), generate_sparkles());
    map.insert(Cow::Borrowed("StarterGear"), generate_starter_gear());
    map.insert(
        Cow::Borrowed("SlidingBallConstraint"),
        generate_sliding_ball_constraint(),
    );
    map.insert(
        Cow::Borrowed("RunningAverageTimeIntervalItem"),
        generate_running_average_time_interval_item(),
    );
    map.insert(
        Cow::Borrowed("CSGDictionaryService"),
        generate_csg_dictionary_service(),
    );
    map.insert(Cow::Borrowed("GameSettings"), generate_game_settings());
    map.insert(Cow::Borrowed("Snap"), generate_snap());
    map.insert(
        Cow::Borrowed("MessagingService"),
        generate_messaging_service(),
    );
    map.insert(
        Cow::Borrowed("PluginDragEvent"),
        generate_plugin_drag_event(),
    );
    map.insert(
        Cow::Borrowed("AnalysticsSettings"),
        generate_analystics_settings(),
    );
    map.insert(Cow::Borrowed("TerrainRegion"), generate_terrain_region());
    map.insert(
        Cow::Borrowed("RbxAnalyticsService"),
        generate_rbx_analytics_service(),
    );
    map.insert(Cow::Borrowed("UIConstraint"), generate_ui_constraint());
    map.insert(Cow::Borrowed("Sky"), generate_sky());
    map.insert(
        Cow::Borrowed("UIGridStyleLayout"),
        generate_ui_grid_style_layout(),
    );
    map.insert(Cow::Borrowed("Torque"), generate_torque());
    map.insert(Cow::Borrowed("UIPageLayout"), generate_ui_page_layout());
    map.insert(Cow::Borrowed("Motor6D"), generate_motor6_d());
    map.insert(
        Cow::Borrowed("CacheableContentProvider"),
        generate_cacheable_content_provider(),
    );
    map.insert(Cow::Borrowed("UIPadding"), generate_ui_padding());
    map.insert(
        Cow::Borrowed("SelectionPartLasso"),
        generate_selection_part_lasso(),
    );
    map.insert(Cow::Borrowed("BodyPosition"), generate_body_position());
    map.insert(Cow::Borrowed("ImageLabel"), generate_image_label());
    map.insert(Cow::Borrowed("Accessory"), generate_accessory());
    map.insert(Cow::Borrowed("GuiObject"), generate_gui_object());
    map.insert(Cow::Borrowed("PlayerGui"), generate_player_gui());
    map.insert(Cow::Borrowed("HapticService"), generate_haptic_service());
    map.insert(Cow::Borrowed("Controller"), generate_controller());
    map.insert(Cow::Borrowed("StandardPages"), generate_standard_pages());
    map.insert(Cow::Borrowed("Fire"), generate_fire());
    map.insert(Cow::Borrowed("Path"), generate_path());
    map.insert(Cow::Borrowed("ShirtGraphic"), generate_shirt_graphic());
    map.insert(
        Cow::Borrowed("DataStoreService"),
        generate_data_store_service(),
    );
    map.insert(
        Cow::Borrowed("PathfindingService"),
        generate_pathfinding_service(),
    );
    map.insert(Cow::Borrowed("Team"), generate_team());
    map.insert(Cow::Borrowed("DebuggerWatch"), generate_debugger_watch());
    map.insert(Cow::Borrowed("VectorForce"), generate_vector_force());
    map.insert(
        Cow::Borrowed("ReflectionMetadataEnumItem"),
        generate_reflection_metadata_enum_item(),
    );
    map.insert(
        Cow::Borrowed("ReflectionMetadataFunctions"),
        generate_reflection_metadata_functions(),
    );
    map.insert(
        Cow::Borrowed("HandleAdornment"),
        generate_handle_adornment(),
    );
    map.insert(Cow::Borrowed("Workspace"), generate_workspace());
    map.insert(
        Cow::Borrowed("GlobalDataStore"),
        generate_global_data_store(),
    );
    map.insert(
        Cow::Borrowed("VehicleController"),
        generate_vehicle_controller(),
    );
    map.insert(Cow::Borrowed("BodyGyro"), generate_body_gyro());
    map.insert(
        Cow::Borrowed("KeyboardService"),
        generate_keyboard_service(),
    );
    map.insert(
        Cow::Borrowed("KeyframeSequenceProvider"),
        generate_keyframe_sequence_provider(),
    );
    map.insert(
        Cow::Borrowed("GamePassService"),
        generate_game_pass_service(),
    );
    map.insert(Cow::Borrowed("LineForce"), generate_line_force());
    map.insert(
        Cow::Borrowed("ReverbSoundEffect"),
        generate_reverb_sound_effect(),
    );
    map.insert(Cow::Borrowed("SpecialMesh"), generate_special_mesh());
    map.insert(
        Cow::Borrowed("BoxHandleAdornment"),
        generate_box_handle_adornment(),
    );
    map.insert(
        Cow::Borrowed("LuaSourceContainer"),
        generate_lua_source_container(),
    );
    map.insert(Cow::Borrowed("StudioData"), generate_studio_data());
    map.insert(Cow::Borrowed("TimerService"), generate_timer_service());
    map.insert(Cow::Borrowed("TrussPart"), generate_truss_part());
    map.insert(Cow::Borrowed("PostEffect"), generate_post_effect());
    map.insert(
        Cow::Borrowed("StarterCharacterScripts"),
        generate_starter_character_scripts(),
    );
    map.insert(Cow::Borrowed("Translator"), generate_translator());
    map.insert(Cow::Borrowed("UILayout"), generate_ui_layout());
    map.insert(Cow::Borrowed("UserSettings"), generate_user_settings());
    map.insert(
        Cow::Borrowed("SelectionSphere"),
        generate_selection_sphere(),
    );
    map.insert(
        Cow::Borrowed("ClientReplicator"),
        generate_client_replicator(),
    );
    map.insert(Cow::Borrowed("BevelMesh"), generate_bevel_mesh());
    map.insert(Cow::Borrowed("ValueBase"), generate_value_base());
    map.insert(
        Cow::Borrowed("BodyAngularVelocity"),
        generate_body_angular_velocity(),
    );
    map.insert(Cow::Borrowed("Animator"), generate_animator());
    map.insert(
        Cow::Borrowed("ControllerService"),
        generate_controller_service(),
    );
    map.insert(
        Cow::Borrowed("AngularVelocity"),
        generate_angular_velocity(),
    );
    map.insert(
        Cow::Borrowed("OrderedDataStore"),
        generate_ordered_data_store(),
    );
    map.insert(
        Cow::Borrowed("BindableFunction"),
        generate_bindable_function(),
    );
    map.insert(Cow::Borrowed("JointsService"), generate_joints_service());
    map.insert(
        Cow::Borrowed("MemStorageConnection"),
        generate_mem_storage_connection(),
    );
    map.insert(Cow::Borrowed("LayerCollector"), generate_layer_collector());
    map.insert(
        Cow::Borrowed("AnalyticsService"),
        generate_analytics_service(),
    );
    map.insert(Cow::Borrowed("Tool"), generate_tool());
    map.insert(
        Cow::Borrowed("HttpRbxApiService"),
        generate_http_rbx_api_service(),
    );
    map.insert(Cow::Borrowed("Script"), generate_script());
    map.insert(Cow::Borrowed("Hopper"), generate_hopper());
    map.insert(
        Cow::Borrowed("ServerReplicator"),
        generate_server_replicator(),
    );
    map.insert(Cow::Borrowed("Seat"), generate_seat());
    map.insert(
        Cow::Borrowed("ReflectionMetadataProperties"),
        generate_reflection_metadata_properties(),
    );
    map.insert(
        Cow::Borrowed("DistortionSoundEffect"),
        generate_distortion_sound_effect(),
    );
    map.insert(Cow::Borrowed("StarterPlayer"), generate_starter_player());
    map.insert(Cow::Borrowed("TextService"), generate_text_service());
    map.insert(Cow::Borrowed("RotateV"), generate_rotate_v());
    map.insert(Cow::Borrowed("NumberValue"), generate_number_value());
    map.insert(Cow::Borrowed("Rotate"), generate_rotate());
    map.insert(Cow::Borrowed("FriendService"), generate_friend_service());
    map.insert(Cow::Borrowed("LuaWebService"), generate_lua_web_service());
    map.insert(Cow::Borrowed("PVInstance"), generate_pv_instance());
    map.insert(
        Cow::Borrowed("HumanoidDescription"),
        generate_humanoid_description(),
    );
    map.insert(Cow::Borrowed("Shirt"), generate_shirt());
    map.insert(Cow::Borrowed("GuiBase3d"), generate_gui_base3d());
    map.insert(Cow::Borrowed("GuiMain"), generate_gui_main());
    map.insert(Cow::Borrowed("Player"), generate_player());
    map.insert(Cow::Borrowed("CorePackages"), generate_core_packages());
    map.insert(Cow::Borrowed("Studio"), generate_studio());
    map.insert(Cow::Borrowed("BodyForce"), generate_body_force());
    map.insert(Cow::Borrowed("SoundService"), generate_sound_service());
    map.insert(Cow::Borrowed("StringValue"), generate_string_value());
    map.insert(Cow::Borrowed("Explosion"), generate_explosion());
    map.insert(Cow::Borrowed("BodyVelocity"), generate_body_velocity());
    map.insert(
        Cow::Borrowed("ManualSurfaceJointInstance"),
        generate_manual_surface_joint_instance(),
    );
    map.insert(
        Cow::Borrowed("PhysicsPacketCache"),
        generate_physics_packet_cache(),
    );
    map.insert(Cow::Borrowed("GuiService"), generate_gui_service());
    map.insert(
        Cow::Borrowed("MarketplaceService"),
        generate_marketplace_service(),
    );
    map.insert(Cow::Borrowed("SelectionBox"), generate_selection_box());
    map.insert(
        Cow::Borrowed("CornerWedgePart"),
        generate_corner_wedge_part(),
    );
    map.insert(Cow::Borrowed("TestService"), generate_test_service());
    map.insert(Cow::Borrowed("GuiLabel"), generate_gui_label());
    map.insert(Cow::Borrowed("AdService"), generate_ad_service());
    map.insert(
        Cow::Borrowed("ReflectionMetadataClass"),
        generate_reflection_metadata_class(),
    );
    map.insert(Cow::Borrowed("PlayerMouse"), generate_player_mouse());
    map.insert(Cow::Borrowed("WeldConstraint"), generate_weld_constraint());
    map.insert(Cow::Borrowed("Players"), generate_players());
    map.insert(Cow::Borrowed("Selection"), generate_selection());
    map.insert(Cow::Borrowed("CylinderMesh"), generate_cylinder_mesh());
    map.insert(
        Cow::Borrowed("NegateOperation"),
        generate_negate_operation(),
    );
    map.insert(Cow::Borrowed("RenderSettings"), generate_render_settings());
    map.insert(
        Cow::Borrowed("DebuggerBreakpoint"),
        generate_debugger_breakpoint(),
    );
    map.insert(Cow::Borrowed("Chat"), generate_chat());
    map.insert(
        Cow::Borrowed("ReflectionMetadataCallbacks"),
        generate_reflection_metadata_callbacks(),
    );
    map.insert(Cow::Borrowed("BillboardGui"), generate_billboard_gui());
    map.insert(
        Cow::Borrowed("DebuggerManager"),
        generate_debugger_manager(),
    );
    map.insert(Cow::Borrowed("Keyframe"), generate_keyframe());
    map.insert(Cow::Borrowed("BackpackItem"), generate_backpack_item());
    map.insert(Cow::Borrowed("DataModel"), generate_data_model());
    map.insert(Cow::Borrowed("CFrameValue"), generate_c_frame_value());
    map.insert(
        Cow::Borrowed("ReflectionMetadataEnums"),
        generate_reflection_metadata_enums(),
    );
    map.insert(Cow::Borrowed("Trail"), generate_trail());
    map.insert(Cow::Borrowed("SunRaysEffect"), generate_sun_rays_effect());
    map.insert(
        Cow::Borrowed("UserGameSettings"),
        generate_user_game_settings(),
    );
    map.insert(Cow::Borrowed("Skin"), generate_skin());
    map.insert(Cow::Borrowed("ObjectValue"), generate_object_value());
    map.insert(Cow::Borrowed("Beam"), generate_beam());
    map.insert(Cow::Borrowed("ModuleScript"), generate_module_script());
    map.insert(Cow::Borrowed("ViewportFrame"), generate_viewport_frame());
    map.insert(Cow::Borrowed("GlobalSettings"), generate_global_settings());
    map.insert(Cow::Borrowed("MeshPart"), generate_mesh_part());
    map.insert(
        Cow::Borrowed("ReplicatedFirst"),
        generate_replicated_first(),
    );
    map.insert(Cow::Borrowed("Status"), generate_status());
    map.insert(Cow::Borrowed("DialogChoice"), generate_dialog_choice());
    map.insert(Cow::Borrowed("CustomEvent"), generate_custom_event());
    map.insert(
        Cow::Borrowed("AlignOrientation"),
        generate_align_orientation(),
    );
    map.insert(
        Cow::Borrowed("VirtualInputManager"),
        generate_virtual_input_manager(),
    );
    map.insert(
        Cow::Borrowed("FlyweightService"),
        generate_flyweight_service(),
    );
    map.insert(Cow::Borrowed("StudioTheme"), generate_studio_theme());
    map.insert(Cow::Borrowed("MouseService"), generate_mouse_service());
    map.insert(
        Cow::Borrowed("BinaryStringValue"),
        generate_binary_string_value(),
    );
    map.insert(Cow::Borrowed("Color3Value"), generate_color3_value());
    map.insert(Cow::Borrowed("BaseScript"), generate_base_script());
    map.insert(Cow::Borrowed("HttpService"), generate_http_service());
    map.insert(
        Cow::Borrowed("CompressorSoundEffect"),
        generate_compressor_sound_effect(),
    );
    map.insert(Cow::Borrowed("RenderingTest"), generate_rendering_test());
    map.insert(Cow::Borrowed("SelectionLasso"), generate_selection_lasso());
    map.insert(Cow::Borrowed("ArcHandles"), generate_arc_handles());
    map.insert(Cow::Borrowed("TextBox"), generate_text_box());
    map.insert(Cow::Borrowed("Light"), generate_light());
    map.insert(
        Cow::Borrowed("RunningAverageItemDouble"),
        generate_running_average_item_double(),
    );
    map.insert(Cow::Borrowed("PlayerScripts"), generate_player_scripts());
    map.insert(Cow::Borrowed("UIBase"), generate_ui_base());
    map.insert(Cow::Borrowed("PVAdornment"), generate_pv_adornment());
    map.insert(Cow::Borrowed("Mouse"), generate_mouse());
    map.insert(Cow::Borrowed("Plugin"), generate_plugin());
    map.insert(Cow::Borrowed("SurfaceLight"), generate_surface_light());
    map.insert(
        Cow::Borrowed("DoubleConstrainedValue"),
        generate_double_constrained_value(),
    );
    map.insert(Cow::Borrowed("GamepadService"), generate_gamepad_service());
    map.insert(
        Cow::Borrowed("PartOperationAsset"),
        generate_part_operation_asset(),
    );
    map.insert(
        Cow::Borrowed("PluginToolbarButton"),
        generate_plugin_toolbar_button(),
    );
    map.insert(
        Cow::Borrowed("EchoSoundEffect"),
        generate_echo_sound_effect(),
    );
    map.insert(Cow::Borrowed("HttpRequest"), generate_http_request());
    map.insert(Cow::Borrowed("WedgePart"), generate_wedge_part());
    map.insert(
        Cow::Borrowed("QWidgetPluginGui"),
        generate_q_widget_plugin_gui(),
    );
    map.insert(Cow::Borrowed("FunctionalTest"), generate_functional_test());
    map.insert(Cow::Borrowed("GroupService"), generate_group_service());
    map.insert(
        Cow::Borrowed("LineHandleAdornment"),
        generate_line_handle_adornment(),
    );
    map.insert(
        Cow::Borrowed("ReflectionMetadataMember"),
        generate_reflection_metadata_member(),
    );
    map.insert(
        Cow::Borrowed("SphereHandleAdornment"),
        generate_sphere_handle_adornment(),
    );
    map.insert(Cow::Borrowed("RopeConstraint"), generate_rope_constraint());
    map.insert(Cow::Borrowed("ScriptContext"), generate_script_context());
    map.insert(
        Cow::Borrowed("TremoloSoundEffect"),
        generate_tremolo_sound_effect(),
    );
    map.insert(Cow::Borrowed("InputObject"), generate_input_object());
    map.insert(Cow::Borrowed("HandlesBase"), generate_handles_base());
    map.insert(
        Cow::Borrowed("UITextSizeConstraint"),
        generate_ui_text_size_constraint(),
    );
    map.insert(Cow::Borrowed("DynamicRotate"), generate_dynamic_rotate());
    map.insert(Cow::Borrowed("Constraint"), generate_constraint());
    map.insert(Cow::Borrowed("NetworkClient"), generate_network_client());
    map.insert(Cow::Borrowed("TweenBase"), generate_tween_base());
    map.insert(Cow::Borrowed("UIListLayout"), generate_ui_list_layout());
    map.insert(Cow::Borrowed("FloorWire"), generate_floor_wire());
    map.insert(
        Cow::Borrowed("AnimationController"),
        generate_animation_controller(),
    );
    map.insert(Cow::Borrowed("BoolValue"), generate_bool_value());
    map.insert(
        Cow::Borrowed("VersionControlService"),
        generate_version_control_service(),
    );
    map.insert(Cow::Borrowed("RemoteEvent"), generate_remote_event());
    map.insert(Cow::Borrowed("File"), generate_file());
    map.insert(
        Cow::Borrowed("TouchTransmitter"),
        generate_touch_transmitter(),
    );
    map.insert(
        Cow::Borrowed("TextFilterResult"),
        generate_text_filter_result(),
    );
    map.insert(Cow::Borrowed("StarterPack"), generate_starter_pack());
    map.insert(
        Cow::Borrowed("SkateboardPlatform"),
        generate_skateboard_platform(),
    );
    map.insert(Cow::Borrowed("HopperBin"), generate_hopper_bin());
    map.insert(Cow::Borrowed("Lighting"), generate_lighting());
    map.insert(
        Cow::Borrowed("GuidRegistryService"),
        generate_guid_registry_service(),
    );
    map.insert(Cow::Borrowed("BindableEvent"), generate_bindable_event());
    map.insert(Cow::Borrowed("ScreenGui"), generate_screen_gui());
    map.insert(
        Cow::Borrowed("MemStorageService"),
        generate_mem_storage_service(),
    );
    map.insert(
        Cow::Borrowed("ReflectionMetadata"),
        generate_reflection_metadata(),
    );
    map.insert(Cow::Borrowed("BlockMesh"), generate_block_mesh());
    map.insert(Cow::Borrowed("NetworkPeer"), generate_network_peer());
    map.insert(Cow::Borrowed("PluginMouse"), generate_plugin_mouse());
    map.insert(
        Cow::Borrowed("ClusterPacketCache"),
        generate_cluster_packet_cache(),
    );
    map.insert(Cow::Borrowed("RemoteFunction"), generate_remote_function());
    map.insert(Cow::Borrowed("TaskScheduler"), generate_task_scheduler());
    map.insert(Cow::Borrowed("GuiButton"), generate_gui_button());
    map.insert(Cow::Borrowed("Clothing"), generate_clothing());
    map.insert(Cow::Borrowed("AssetService"), generate_asset_service());
    map.insert(Cow::Borrowed("GuiBase"), generate_gui_base());
    map.insert(Cow::Borrowed("ManualWeld"), generate_manual_weld());
    map.insert(Cow::Borrowed("ScriptDebugger"), generate_script_debugger());
    map.insert(Cow::Borrowed("PluginGui"), generate_plugin_gui());
    map.insert(Cow::Borrowed("StarterGui"), generate_starter_gui());
    map.insert(
        Cow::Borrowed("FlagStandService"),
        generate_flag_stand_service(),
    );
    map.insert(Cow::Borrowed("ClickDetector"), generate_click_detector());
    map.insert(
        Cow::Borrowed("AppStorageService"),
        generate_app_storage_service(),
    );
    map.insert(Cow::Borrowed("PackageLink"), generate_package_link());
    map.insert(
        Cow::Borrowed("AdvancedDragger"),
        generate_advanced_dragger(),
    );
    map.insert(Cow::Borrowed("MotorFeature"), generate_motor_feature());
    map.insert(Cow::Borrowed("PartAdornment"), generate_part_adornment());
    map.insert(Cow::Borrowed("AnimationTrack"), generate_animation_track());
    map.insert(
        Cow::Borrowed("SelectionPointLasso"),
        generate_selection_point_lasso(),
    );
    map.insert(Cow::Borrowed("StudioService"), generate_studio_service());
    map.insert(Cow::Borrowed("Flag"), generate_flag());
    map.insert(
        Cow::Borrowed("TouchInputService"),
        generate_touch_input_service(),
    );
    map.insert(Cow::Borrowed("BloomEffect"), generate_bloom_effect());
    map.insert(Cow::Borrowed("Platform"), generate_platform());
    map.insert(Cow::Borrowed("BadgeService"), generate_badge_service());
    map.insert(Cow::Borrowed("AlignPosition"), generate_align_position());
    map.insert(
        Cow::Borrowed("ChorusSoundEffect"),
        generate_chorus_sound_effect(),
    );
    map.insert(Cow::Borrowed("Stats"), generate_stats());
    map.insert(Cow::Borrowed("UIComponent"), generate_ui_component());
    map.insert(Cow::Borrowed("UITableLayout"), generate_ui_table_layout());
    map.insert(
        Cow::Borrowed("LocalizationService"),
        generate_localization_service(),
    );
    map.insert(Cow::Borrowed("UIScale"), generate_ui_scale());
    map.insert(Cow::Borrowed("TextButton"), generate_text_button());
    map.insert(Cow::Borrowed("ServerStorage"), generate_server_storage());
    map.insert(Cow::Borrowed("PartOperation"), generate_part_operation());
    map.insert(Cow::Borrowed("RunService"), generate_run_service());
    map.insert(Cow::Borrowed("JointInstance"), generate_joint_instance());
    map.insert(Cow::Borrowed("RotateP"), generate_rotate_p());
    map.insert(
        Cow::Borrowed("RobloxReplicatedStorage"),
        generate_roblox_replicated_storage(),
    );
    map.insert(Cow::Borrowed("Geometry"), generate_geometry());
    map.insert(
        Cow::Borrowed("PitchShiftSoundEffect"),
        generate_pitch_shift_sound_effect(),
    );
    map.insert(Cow::Borrowed("FormFactorPart"), generate_form_factor_part());
    map.insert(Cow::Borrowed("Teams"), generate_teams());
    map.insert(
        Cow::Borrowed("IntConstrainedValue"),
        generate_int_constrained_value(),
    );
    map.insert(Cow::Borrowed("IntValue"), generate_int_value());
    map.insert(Cow::Borrowed("VirtualUser"), generate_virtual_user());
    map.insert(Cow::Borrowed("CoreScript"), generate_core_script());
    map.insert(
        Cow::Borrowed("UIAspectRatioConstraint"),
        generate_ui_aspect_ratio_constraint(),
    );
    map.insert(Cow::Borrowed("CookiesService"), generate_cookies_service());
    map.insert(
        Cow::Borrowed("MeshContentProvider"),
        generate_mesh_content_provider(),
    );
    map.insert(Cow::Borrowed("Hat"), generate_hat());
    map.insert(Cow::Borrowed("Dragger"), generate_dragger());
    map.insert(Cow::Borrowed("Hole"), generate_hole());
    map.insert(Cow::Borrowed("Instance"), generate_instance());
    map.insert(
        Cow::Borrowed("ThirdPartyUserService"),
        generate_third_party_user_service(),
    );
    map.insert(Cow::Borrowed("ABTestService"), generate_ab_test_service());
    map.insert(
        Cow::Borrowed("ReflectionMetadataEvents"),
        generate_reflection_metadata_events(),
    );
    map.insert(Cow::Borrowed("FriendPages"), generate_friend_pages());
    map.insert(Cow::Borrowed("Decal"), generate_decal());
    map.insert(
        Cow::Borrowed("BallSocketConstraint"),
        generate_ball_socket_constraint(),
    );
    map.insert(Cow::Borrowed("LuaSettings"), generate_lua_settings());
    map.insert(
        Cow::Borrowed("UISizeConstraint"),
        generate_ui_size_constraint(),
    );
    map.insert(Cow::Borrowed("FaceInstance"), generate_face_instance());
    map.insert(Cow::Borrowed("Animation"), generate_animation());
    map.insert(
        Cow::Borrowed("SolidModelContentProvider"),
        generate_solid_model_content_provider(),
    );
    map.insert(Cow::Borrowed("DebugSettings"), generate_debug_settings());
    map.insert(Cow::Borrowed("SurfaceGui"), generate_surface_gui());
    map.insert(
        Cow::Borrowed("PluginGuiService"),
        generate_plugin_gui_service(),
    );
    map.insert(Cow::Borrowed("TweenService"), generate_tween_service());
    map.insert(Cow::Borrowed("UIGridLayout"), generate_ui_grid_layout());
    map.insert(Cow::Borrowed("SpawnLocation"), generate_spawn_location());
    map.insert(Cow::Borrowed("UnionOperation"), generate_union_operation());
    map.insert(Cow::Borrowed("Tween"), generate_tween());
    map.insert(
        Cow::Borrowed("UserInputService"),
        generate_user_input_service(),
    );
    map.insert(Cow::Borrowed("UIInlineLayout"), generate_ui_inline_layout());
    map.insert(Cow::Borrowed("ManualGlue"), generate_manual_glue());
    map.insert(Cow::Borrowed("RayValue"), generate_ray_value());
    map.insert(Cow::Borrowed("Hint"), generate_hint());
    map.insert(Cow::Borrowed("EmotesPages"), generate_emotes_pages());
    map.insert(Cow::Borrowed("DraftsService"), generate_drafts_service());
    map.insert(Cow::Borrowed("DataModelMesh"), generate_data_model_mesh());
    map.insert(
        Cow::Borrowed("StarterPlayerScripts"),
        generate_starter_player_scripts(),
    );
    map.insert(Cow::Borrowed("Smoke"), generate_smoke());
    map.insert(Cow::Borrowed("PluginAction"), generate_plugin_action());
    map.insert(
        Cow::Borrowed("RuntimeScriptService"),
        generate_runtime_script_service(),
    );
    map.insert(
        Cow::Borrowed("RunningAverageItemInt"),
        generate_running_average_item_int(),
    );
    map.insert(
        Cow::Borrowed("TotalCountTimeIntervalItem"),
        generate_total_count_time_interval_item(),
    );
    map.insert(Cow::Borrowed("Backpack"), generate_backpack());
    map.insert(
        Cow::Borrowed("FlangeSoundEffect"),
        generate_flange_sound_effect(),
    );
    map.insert(Cow::Borrowed("StatsItem"), generate_stats_item());
    map.insert(
        Cow::Borrowed("SurfaceSelection"),
        generate_surface_selection(),
    );
    map.insert(Cow::Borrowed("LoginService"), generate_login_service());
    map.insert(Cow::Borrowed("Camera"), generate_camera());
    map.insert(Cow::Borrowed("TextLabel"), generate_text_label());
    map.insert(
        Cow::Borrowed("RobloxPluginGuiService"),
        generate_roblox_plugin_gui_service(),
    );
    map.insert(
        Cow::Borrowed("NetworkSettings"),
        generate_network_settings(),
    );
    map.insert(Cow::Borrowed("SoundGroup"), generate_sound_group());
    map.insert(Cow::Borrowed("SpawnerService"), generate_spawner_service());
    map.insert(
        Cow::Borrowed("DockWidgetPluginGui"),
        generate_dock_widget_plugin_gui(),
    );
    map.insert(Cow::Borrowed("LogService"), generate_log_service());
    map.insert(Cow::Borrowed("Message"), generate_message());
    map.insert(Cow::Borrowed("FlagStand"), generate_flag_stand());
    map.insert(
        Cow::Borrowed("HingeConstraint"),
        generate_hinge_constraint(),
    );
    map.insert(Cow::Borrowed("Frame"), generate_frame());
    map.insert(Cow::Borrowed("Pages"), generate_pages());
    map.insert(
        Cow::Borrowed("LocalizationTable"),
        generate_localization_table(),
    );
    map.insert(Cow::Borrowed("GuiBase2d"), generate_gui_base2d());
    map.insert(
        Cow::Borrowed("ColorCorrectionEffect"),
        generate_color_correction_effect(),
    );
    map.insert(Cow::Borrowed("Visit"), generate_visit());
    map.insert(
        Cow::Borrowed("KeyframeSequence"),
        generate_keyframe_sequence(),
    );
    map.insert(
        Cow::Borrowed("TriangleMeshPart"),
        generate_triangle_mesh_part(),
    );
    map.insert(
        Cow::Borrowed("ParticleEmitter"),
        generate_particle_emitter(),
    );
    map.insert(
        Cow::Borrowed("RocketPropulsion"),
        generate_rocket_propulsion(),
    );
    map.insert(
        Cow::Borrowed("CoreScriptSyncService"),
        generate_core_script_sync_service(),
    );
    map.insert(Cow::Borrowed("Accoutrement"), generate_accoutrement());
    map.insert(Cow::Borrowed("ScrollingFrame"), generate_scrolling_frame());
    map.insert(
        Cow::Borrowed("ConeHandleAdornment"),
        generate_cone_handle_adornment(),
    );
    map.insert(Cow::Borrowed("Humanoid"), generate_humanoid());
    map.insert(Cow::Borrowed("Glue"), generate_glue());
    map.insert(Cow::Borrowed("Texture"), generate_texture());
    map.insert(Cow::Borrowed("NetworkMarker"), generate_network_marker());
    map.insert(Cow::Borrowed("BasePart"), generate_base_part());
    map.insert(Cow::Borrowed("CoreGui"), generate_core_gui());
    map.insert(Cow::Borrowed("PluginManager"), generate_plugin_manager());
    map.insert(Cow::Borrowed("BodyMover"), generate_body_mover());
    map.insert(Cow::Borrowed("InsertService"), generate_insert_service());
    map.insert(
        Cow::Borrowed("CylinderHandleAdornment"),
        generate_cylinder_handle_adornment(),
    );
    map.insert(Cow::Borrowed("BodyColors"), generate_body_colors());
    map.insert(Cow::Borrowed("PackageService"), generate_package_service());
    map.insert(Cow::Borrowed("BasePlayerGui"), generate_base_player_gui());
    map.insert(Cow::Borrowed("DataStorePages"), generate_data_store_pages());
    map.insert(Cow::Borrowed("ForceField"), generate_force_field());
    map
}
